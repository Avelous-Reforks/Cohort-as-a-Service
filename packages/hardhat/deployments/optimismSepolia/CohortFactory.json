{
  "address": "0xbdC528dDf5a76C506E74668343f794F6d78F3F17",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FailedToSendETH",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        }
      ],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceFeedInvalid",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "cohortAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "primaryAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "CohortCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "CreationFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPriceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cohortRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "cohortAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "creationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primaryAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_cycle",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_builders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        }
      ],
      "name": "createCohort",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationFeeUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCohorts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cohortAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "creationTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CohortFactory.CohortInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getCohortByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cohortAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "creationTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CohortFactory.CohortInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequiredEthAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCohorts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCohort",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCohorts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFeeUSD",
          "type": "uint256"
        }
      ],
      "name": "updateCreationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPriceFeed",
          "type": "address"
        }
      ],
      "name": "updatePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a92c63e9c91056eb25f9ff1a3220be0bcf9cfcc7c664e194b17b2fa83c914ed",
  "receipt": {
    "to": null,
    "from": "0x5F1b4cFfD8B7B3653197149bC046C493060B0bd7",
    "contractAddress": "0xbdC528dDf5a76C506E74668343f794F6d78F3F17",
    "transactionIndex": 2,
    "gasUsed": "4442159",
    "logsBloom": "0x
    "blockHash": "0x799ca887abff35a96f5eebd879b8e155e291c7d62c775f935509ed9c69d7ffde",
    "transactionHash": "0x5a92c63e9c91056eb25f9ff1a3220be0bcf9cfcc7c664e194b17b2fa83c914ed",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 24133809,
        "transactionHash": "0x5a92c63e9c91056eb25f9ff1a3220be0bcf9cfcc7c664e194b17b2fa83c914ed",
        "address": "0xbdC528dDf5a76C506E74668343f794F6d78F3F17",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f1b4cffd8b7b3653197149bc046c493060b0bd7"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x799ca887abff35a96f5eebd879b8e155e291c7d62c775f935509ed9c69d7ffde"
      }
    ],
    "blockNumber": 24133809,
    "cumulativeGasUsed": "5591012",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x61Ec26aA57019C486B10502285c5A3D4A4750AD7"
  ],
  "numDeployments": 6,
  "solcInputHash": "5eef6141f366b44913a121b623becc6d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedToSendETH\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeedInvalid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cohortAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primaryAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"CohortCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"CreationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPriceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cohortRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cohortAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primaryAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_builders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"}],\"name\":\"createCohort\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationFeeUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCohorts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cohortAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CohortFactory.CohortInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCohortByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cohortAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CohortFactory.CohortInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCohorts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCohort\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCohorts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeUSD\",\"type\":\"uint256\"}],\"name\":\"updateCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPriceFeed\",\"type\":\"address\"}],\"name\":\"updatePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Factory contract for deploying new Cohort contracts with an updatable creation fee\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor sets the price feed address and initial creation fee\",\"params\":{\"_priceFeed\":\"Chainlink price feed address for ETH/USD\"}},\"createCohort(address,address,string,string,uint256,address[],uint256[])\":{\"details\":\"Creates a new Cohort contract\",\"params\":{\"_builders\":\"Array of builder addresses\",\"_caps\":\"Array of cap values for builders\",\"_cycle\":\"Cycle duration\",\"_description\":\"Description of the cohort\",\"_name\":\"Name of the cohort\",\"_primaryAdmin\":\"Address of the primary admin\",\"_tokenAddress\":\"Address of ERC20 token (zero address for ETH)\"},\"returns\":{\"_0\":\"Address of the newly created cohort\"}},\"getAllCohorts()\":{\"details\":\"Gets all created cohorts with their information\",\"returns\":{\"_0\":\"Array of CohortInfo structs\"}},\"getCohortByIndex(uint256)\":{\"details\":\"Gets cohort information by index\",\"params\":{\"_index\":\"Index of the cohort in the registry\"},\"returns\":{\"_0\":\"Cohort information\"}},\"getRequiredEthAmount()\":{\"details\":\"Calculates required ETH amount for creation fee based on current ETH price\",\"returns\":{\"_0\":\"Required ETH amount in wei\"}},\"getTotalCohorts()\":{\"details\":\"Gets the total number of created cohorts\",\"returns\":{\"_0\":\"Number of cohorts\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCreationFee(uint256)\":{\"details\":\"Updates the creation fee amount\",\"params\":{\"_newFeeUSD\":\"New fee amount in USD (scaled by 1e18)\"}},\"updatePriceFeed(address)\":{\"details\":\"Updates the price feed address\",\"params\":{\"_newPriceFeed\":\"New price feed address\"}}},\"title\":\"CohortFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CohortFactory.sol\":\"CohortFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Cohort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n//A smart contract for streaming Eth or ERC20 tokens to builders\\n\\n// Custom errors\\nerror NoValueSent();\\nerror InsufficientFundsInContract(uint256 requested, uint256 unlocked);\\nerror NoActiveStreamForBuilder(address builder);\\nerror InsufficientInStream(uint256 requested, uint256 unlocked);\\nerror EtherSendingFailed();\\nerror LengthsMismatch();\\nerror InvalidBuilderAddress();\\nerror BuilderAlreadyExists();\\nerror ContractIsStopped();\\nerror MaxBuildersReached();\\nerror AccessDenied();\\nerror InvalidTokenAddress();\\nerror NoFundsInContract();\\nerror ERC20TransferFailed();\\nerror ERC20SendingFailed(address token, address recipient);\\nerror ERC20FundsTransferFailed(address token, address to, uint256 amount);\\nerror BelowMinimumCap(uint256 provided, uint256 minimum);\\nerror NotAuthorized();\\nerror InvalidNewAdminAddress();\\n\\nerror NoWithdrawRequest();\\nerror WithdrawRequestNotApproved();\\nerror WithdrawRequestAlreadyCompleted();\\nerror WithdrawRequestNotFound();\\nerror PendingWithdrawRequestExists();\\n\\ncontract Cohort is AccessControl, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant MAXCREATORS = 25;\\n    uint256 constant MINIMUM_CAP = 0.25 ether;\\n    uint256 constant MINIMUM_ERC20_CAP = 10 * 10 ** 18;\\n\\n    // Cycle duration for the stream\\n    uint256 public cycle;\\n\\n    // ERC20 support\\n    bool public isERC20;\\n\\n    // Emergency mode variable\\n    bool public stopped;\\n\\n    // Cohort name\\n    string public name;\\n\\n    // Cohort description\\n    string public description;\\n\\n    // Token address for ERC20 support\\n    address public tokenAddress;\\n\\n    // Primary admin for remaining balances\\n    address public primaryAdmin;\\n\\n    // Constructor to setup admin role and initial builders\\n    constructor(\\n        address _primaryAdmin,\\n        address _tokenAddress,\\n        string memory _name,\\n        string memory _description,\\n        uint256 _cycle,\\n        address[] memory _builders,\\n        uint256[] memory _caps\\n    ) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _primaryAdmin);\\n        isAdmin[_primaryAdmin] = true;\\n        primaryAdmin = _primaryAdmin;\\n        name = _name;\\n        description = _description;\\n        cycle = _cycle;\\n\\n        if (_tokenAddress != address(0)) {\\n            isERC20 = true;\\n            tokenAddress = _tokenAddress;\\n        }\\n\\n        if (_builders.length == 0) return;\\n\\n        uint256 cLength = _builders.length;\\n        if (_builders.length >= MAXCREATORS) revert MaxBuildersReached();\\n        if (cLength != _caps.length) revert LengthsMismatch();\\n        for (uint256 i = 0; i < cLength; ) {\\n            validateBuilderInput(payable(_builders[i]), _caps[i]);\\n            streamingBuilders[_builders[i]] = BuilderStreamInfo(_caps[i], block.timestamp - _cycle);\\n            activeBuilders.push(_builders[i]);\\n            builderIndex[_builders[i]] = activeBuilders.length - 1;\\n            emit AddBuilder(_builders[i], _caps[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // Function to modify admin roles\\n    function modifyAdminRole(address adminAddress, bool shouldGrant) public onlyAdmin {\\n        if (shouldGrant) {\\n            if (streamingBuilders[adminAddress].cap != 0) revert InvalidBuilderAddress();\\n            grantRole(DEFAULT_ADMIN_ROLE, adminAddress);\\n            isAdmin[adminAddress] = true;\\n            emit AdminAdded(adminAddress);\\n        } else {\\n            if (adminAddress == primaryAdmin) revert AccessDenied();\\n            revokeRole(DEFAULT_ADMIN_ROLE, adminAddress);\\n            isAdmin[adminAddress] = false;\\n            emit AdminRemoved(adminAddress);\\n        }\\n    }\\n\\n    // Struct to store information about builder's stream\\n    struct BuilderStreamInfo {\\n        uint256 cap; // Maximum amount of funds that can be withdrawn in a cycle\\n        uint256 last; // The timestamp of the last withdrawal\\n    }\\n\\n    // Function to transfer primary admin role\\n    function transferPrimaryAdmin(address newPrimaryAdmin) public {\\n        if (msg.sender != primaryAdmin) revert NotAuthorized();\\n        if (newPrimaryAdmin == address(0)) revert InvalidNewAdminAddress();\\n\\n        primaryAdmin = newPrimaryAdmin;\\n\\n        _revokeRole(DEFAULT_ADMIN_ROLE, primaryAdmin);\\n        _grantRole(DEFAULT_ADMIN_ROLE, newPrimaryAdmin);\\n\\n        emit PrimaryAdminTransferred(newPrimaryAdmin);\\n    }\\n\\n    // Withdrawal request structure\\n    struct WithdrawRequest {\\n        uint256 amount;\\n        string reason;\\n        bool approved;\\n        bool completed;\\n        uint256 requestTime;\\n    }\\n\\n    // Mapping to store withdrawal requests for each builder\\n    mapping(address => WithdrawRequest[]) public withdrawRequests;\\n\\n    // Mapping to track whether specific builders require approval\\n    mapping(address => bool) public requiresApproval;\\n\\n    // Modifier to check for admin permissions\\n    modifier onlyAdmin() {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AccessDenied();\\n        _;\\n    }\\n\\n    // Mapping to store the stream info of each builder\\n    mapping(address => BuilderStreamInfo) public streamingBuilders;\\n    // Mapping to store the index of each builder in the activeBuilders array\\n    mapping(address => uint256) public builderIndex;\\n    // Array to store the addresses of all active builders\\n    address[] public activeBuilders;\\n    // Mapping to see if an address is admin\\n    mapping(address => bool) public isAdmin;\\n\\n    // Declare events to log various activities\\n    event FundsReceived(address indexed from, uint256 amount);\\n    event Withdraw(address indexed to, uint256 amount, string reason);\\n    event AddBuilder(address indexed to, uint256 amount);\\n    event UpdateBuilder(address indexed to, uint256 amount);\\n\\n    event AdminAdded(address indexed to);\\n    event AdminRemoved(address indexed to);\\n    event ContractDrained(uint256 amount);\\n    event PrimaryAdminTransferred(address indexed newAdmin);\\n    event ERC20FundsReceived(address indexed token, address indexed from, uint256 amount);\\n\\n    // Withdrawal request events\\n    event WithdrawRequested(address indexed builder, uint256 requestId, uint256 amount, string reason);\\n    event WithdrawApproved(address indexed builder, uint256 requestId);\\n    event WithdrawRejected(address indexed builder, uint256 requestId);\\n    event WithdrawCompleted(address indexed builder, uint256 requestId, uint256 amount);\\n    event ApprovalRequirementChanged(address indexed builder, bool requiresApproval);\\n\\n    // Check if a stream for a builder is active\\n    modifier isStreamActive(address _builder) {\\n        if (streamingBuilders[_builder].cap == 0) revert NoActiveStreamForBuilder(_builder);\\n        _;\\n    }\\n\\n    // Check if the contract is stopped\\n    modifier stopInEmergency() {\\n        if (stopped) revert ContractIsStopped();\\n        _;\\n    }\\n\\n    // Modifier to check if builder has no pending withdrawal requests\\n    modifier noPendingRequests(address _builder) {\\n        bool hasPending = false;\\n        uint256 requestCount = withdrawRequests[_builder].length;\\n\\n        for (uint256 i = 0; i < requestCount; ) {\\n            if (!withdrawRequests[_builder][i].completed) {\\n                hasPending = true;\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (hasPending) revert PendingWithdrawRequestExists();\\n        _;\\n    }\\n\\n    // Fund contract\\n    function fundContract(uint256 _amount) public payable {\\n        if (!isERC20) {\\n            if (msg.value == 0) revert NoValueSent();\\n            emit FundsReceived(msg.sender, msg.value);\\n        } else {\\n            if (_amount == 0) revert NoValueSent();\\n\\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            emit ERC20FundsReceived(tokenAddress, msg.sender, _amount);\\n        }\\n    }\\n\\n    // Enable or disable emergency mode\\n    function emergencyMode(bool _enable) public onlyAdmin {\\n        stopped = _enable;\\n    }\\n\\n    // Get all builders' data.\\n    function allBuildersData(address[] calldata _builders) public view returns (BuilderStreamInfo[] memory) {\\n        uint256 builderLength = _builders.length;\\n        BuilderStreamInfo[] memory result = new BuilderStreamInfo[](builderLength);\\n        for (uint256 i = 0; i < builderLength; ) {\\n            address builderAddress = _builders[i];\\n            result[i] = streamingBuilders[builderAddress];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // Get the unlocked amount for a builder.\\n    function unlockedBuilderAmount(address _builder) public view isStreamActive(_builder) returns (uint256) {\\n        BuilderStreamInfo memory builderStream = streamingBuilders[_builder];\\n        uint256 timePassed = block.timestamp - builderStream.last;\\n\\n        if (timePassed < cycle) {\\n            uint256 unlockedAmount = (timePassed * builderStream.cap) / cycle;\\n            return unlockedAmount;\\n        } else {\\n            return builderStream.cap;\\n        }\\n    }\\n\\n    // Add a new builder's stream. No more than 25 builders are allowed.\\n    function addBuilderStream(address payable _builder, uint256 _cap) public onlyAdmin {\\n        // Check for maximum builders.\\n        if (activeBuilders.length >= MAXCREATORS) revert MaxBuildersReached();\\n\\n        validateBuilderInput(_builder, _cap);\\n        streamingBuilders[_builder] = BuilderStreamInfo(_cap, block.timestamp - cycle);\\n        activeBuilders.push(_builder);\\n        builderIndex[_builder] = activeBuilders.length - 1;\\n        emit AddBuilder(_builder, _cap);\\n    }\\n\\n    // Add a batch of builders.\\n    function addBatch(address[] memory _builders, uint256[] memory _caps) public onlyAdmin {\\n        uint256 cLength = _builders.length;\\n        if (_builders.length >= MAXCREATORS) revert MaxBuildersReached();\\n        if (cLength != _caps.length) revert LengthsMismatch();\\n        for (uint256 i = 0; i < cLength; ) {\\n            addBuilderStream(payable(_builders[i]), _caps[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // Validate the input for a builder\\n    function validateBuilderInput(address payable _builder, uint256 _cap) internal view {\\n        //check if minimum cap is met, eth mode and erc20 mode\\n        if (_cap < MINIMUM_CAP && !isERC20) revert BelowMinimumCap(_cap, MINIMUM_CAP);\\n        if (_cap < MINIMUM_ERC20_CAP && isERC20) revert BelowMinimumCap(_cap, MINIMUM_ERC20_CAP);\\n        if (_builder == address(0)) revert InvalidBuilderAddress();\\n        if (isAdmin[_builder]) revert InvalidBuilderAddress();\\n        if (streamingBuilders[_builder].cap > 0) revert BuilderAlreadyExists();\\n    }\\n\\n    // Update a builder's stream cap\\n    function updateBuilderStreamCap(\\n        address payable _builder,\\n        uint256 _newCap\\n    ) public onlyAdmin isStreamActive(_builder) {\\n        if (_newCap < MINIMUM_CAP && !isERC20) revert BelowMinimumCap(_newCap, MINIMUM_CAP);\\n        if (_newCap < MINIMUM_ERC20_CAP && isERC20) revert BelowMinimumCap(_newCap, MINIMUM_ERC20_CAP);\\n\\n        BuilderStreamInfo storage builderStream = streamingBuilders[_builder];\\n\\n        builderStream.cap = _newCap;\\n\\n        builderStream.last = block.timestamp - (cycle);\\n\\n        emit UpdateBuilder(_builder, _newCap);\\n    }\\n\\n    // Remove a builder's stream\\n    function removeBuilderStream(address _builder) public onlyAdmin isStreamActive(_builder) {\\n        uint256 builderIndexToRemove = builderIndex[_builder];\\n        address lastBuilder = activeBuilders[activeBuilders.length - 1];\\n\\n        if (_builder != lastBuilder) {\\n            activeBuilders[builderIndexToRemove] = lastBuilder;\\n            builderIndex[lastBuilder] = builderIndexToRemove;\\n        }\\n\\n        activeBuilders.pop();\\n\\n        delete streamingBuilders[_builder];\\n        delete builderIndex[_builder];\\n\\n        emit UpdateBuilder(_builder, 0);\\n    }\\n\\n    // Set whether a builder requires approval for withdrawals\\n    function setBuilderApprovalRequirement(\\n        address _builder,\\n        bool _requiresApproval\\n    ) public onlyAdmin isStreamActive(_builder) {\\n        requiresApproval[_builder] = _requiresApproval;\\n        emit ApprovalRequirementChanged(_builder, _requiresApproval);\\n    }\\n\\n    // Request a withdrawal - for builders that require approval\\n    function _requestWithdraw(uint256 _amount, string memory _reason) private noPendingRequests(msg.sender) {\\n        // Check if the builder has enough unlocked to withdraw\\n        uint256 totalAmountCanWithdraw = unlockedBuilderAmount(msg.sender);\\n        if (totalAmountCanWithdraw < _amount) {\\n            revert InsufficientInStream(_amount, totalAmountCanWithdraw);\\n        }\\n\\n        // Create withdrawal request\\n        withdrawRequests[msg.sender].push(\\n            WithdrawRequest({\\n                amount: _amount,\\n                reason: _reason,\\n                approved: false,\\n                completed: false,\\n                requestTime: block.timestamp\\n            })\\n        );\\n\\n        uint256 requestId = withdrawRequests[msg.sender].length - 1;\\n        emit WithdrawRequested(msg.sender, requestId, _amount, _reason);\\n    }\\n\\n    // Approve a withdrawal request - only admins can call this\\n    function approveWithdraw(address _builder, uint256 _requestId) public onlyAdmin {\\n        if (withdrawRequests[_builder].length <= _requestId) revert WithdrawRequestNotFound();\\n        WithdrawRequest storage request = withdrawRequests[_builder][_requestId];\\n\\n        if (request.completed) revert WithdrawRequestAlreadyCompleted();\\n\\n        request.approved = true;\\n        emit WithdrawApproved(_builder, _requestId);\\n    }\\n\\n    // Reject a withdrawal request - only admins can call this\\n    function rejectWithdraw(address _builder, uint256 _requestId) public onlyAdmin {\\n        if (withdrawRequests[_builder].length <= _requestId) revert WithdrawRequestNotFound();\\n        WithdrawRequest storage request = withdrawRequests[_builder][_requestId];\\n\\n        if (request.completed) revert WithdrawRequestAlreadyCompleted();\\n\\n        // Delete the request by marking it as completed but not approved\\n        request.completed = true;\\n        request.approved = false;\\n        emit WithdrawRejected(_builder, _requestId);\\n    }\\n\\n    // Complete a withdrawal that was previously approved\\n    function completeWithdraw(uint256 _requestId) public isStreamActive(msg.sender) nonReentrant stopInEmergency {\\n        // Check if request exists\\n        if (withdrawRequests[msg.sender].length <= _requestId) revert WithdrawRequestNotFound();\\n        WithdrawRequest storage request = withdrawRequests[msg.sender][_requestId];\\n\\n        // Check if request is completed\\n        if (request.completed) revert WithdrawRequestAlreadyCompleted();\\n\\n        // Check if approval is required and given\\n        if (requiresApproval[msg.sender] && !request.approved) revert WithdrawRequestNotApproved();\\n\\n        _processStreamWithdraw(request.amount);\\n\\n        // Mark request as completed\\n        request.completed = true;\\n\\n        emit WithdrawCompleted(msg.sender, _requestId, request.amount);\\n        emit Withdraw(msg.sender, request.amount, request.reason);\\n    }\\n\\n    function streamWithdraw(\\n        uint256 _amount,\\n        string memory _reason\\n    ) public isStreamActive(msg.sender) nonReentrant stopInEmergency {\\n        if (requiresApproval[msg.sender]) {\\n            _requestWithdraw(_amount, _reason);\\n            return;\\n        }\\n\\n        _processStreamWithdraw(_amount);\\n\\n        emit Withdraw(msg.sender, _amount, _reason);\\n    }\\n\\n    function _processStreamWithdraw(uint256 _amount) private {\\n        uint256 totalAmountCanWithdraw = unlockedBuilderAmount(msg.sender);\\n        if (totalAmountCanWithdraw < _amount) {\\n            revert InsufficientInStream(_amount, totalAmountCanWithdraw);\\n        }\\n\\n        // Process the withdrawal similar to streamWithdraw\\n        BuilderStreamInfo storage builderStream = streamingBuilders[msg.sender];\\n        uint256 builderstreamLast = builderStream.last;\\n        uint256 timestamp = block.timestamp;\\n        uint256 cappedLast = timestamp - cycle;\\n        if (builderstreamLast < cappedLast) {\\n            builderstreamLast = cappedLast;\\n        }\\n\\n        if (!isERC20) {\\n            uint256 contractFunds = address(this).balance;\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            (bool sent, ) = msg.sender.call{ value: _amount }(\\\"\\\");\\n            if (!sent) revert EtherSendingFailed();\\n        } else {\\n            uint256 contractFunds = IERC20(tokenAddress).balanceOf(address(this));\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            IERC20(tokenAddress).safeTransfer(msg.sender, _amount);\\n        }\\n\\n        // Update last withdrawal time\\n        builderStream.last = builderstreamLast + (((timestamp - builderstreamLast) * _amount) / totalAmountCanWithdraw);\\n    }\\n\\n    // Drain the contract to the primary admin address\\n    function drainContract(address _token) public onlyAdmin nonReentrant {\\n        uint256 remainingBalance;\\n\\n        // Drain Ether\\n        if (_token == address(0)) {\\n            remainingBalance = address(this).balance;\\n            if (remainingBalance > 0) {\\n                (bool sent, ) = primaryAdmin.call{ value: remainingBalance }(\\\"\\\");\\n                if (!sent) revert EtherSendingFailed();\\n                emit ContractDrained(remainingBalance);\\n            }\\n            return;\\n        }\\n\\n        // Drain ERC20 tokens\\n        remainingBalance = IERC20(_token).balanceOf(address(this));\\n        if (remainingBalance > 0) {\\n            IERC20(_token).safeTransfer(primaryAdmin, remainingBalance);\\n            emit ContractDrained(remainingBalance);\\n        }\\n    }\\n\\n    // Fallback function to receive ether\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x5b22a147acdf1dd24e2ba222f06817268cf1b77b9f1b9d04a52b2f5298032fbe\",\"license\":\"MIT\"},\"contracts/CohortFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Cohort.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./Libraries/PriceConverter.sol\\\";\\n\\n/**\\n * @title CohortFactory\\n * @dev Factory contract for deploying new Cohort contracts with an updatable creation fee\\n */\\ncontract CohortFactory is Ownable {\\n    using PriceConverter for uint256;\\n\\n    struct CohortInfo {\\n        address cohortAddress;\\n        string name;\\n        uint256 creationTimestamp;\\n    }\\n\\n    AggregatorV3Interface private priceFeed;\\n\\n    uint256 public creationFeeUSD;\\n\\n    mapping(address => bool) public isCohort;\\n    mapping(uint256 => CohortInfo) public cohortRegistry;\\n    uint256 public totalCohorts;\\n\\n    event CohortCreated(address indexed cohortAddress, address indexed primaryAdmin, string name, string description);\\n\\n    event PriceFeedUpdated(address newPriceFeed);\\n    event CreationFeeUpdated(uint256 oldFee, uint256 newFee);\\n\\n    error InsufficientPayment(uint256 required, uint256 provided);\\n    error PriceFeedInvalid();\\n    error FailedToSendETH();\\n    error InvalidFeeAmount();\\n\\n    /**\\n     * @dev Constructor sets the price feed address and initial creation fee\\n     * @param _priceFeed Chainlink price feed address for ETH/USD\\n     */\\n    constructor(address _priceFeed) {\\n        if (_priceFeed == address(0)) revert PriceFeedInvalid();\\n\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\n        creationFeeUSD = 0.1 * 1e18;\\n    }\\n\\n    /**\\n     * @dev Updates the price feed address\\n     * @param _newPriceFeed New price feed address\\n     */\\n    function updatePriceFeed(address _newPriceFeed) external onlyOwner {\\n        if (_newPriceFeed == address(0)) revert PriceFeedInvalid();\\n        priceFeed = AggregatorV3Interface(_newPriceFeed);\\n        emit PriceFeedUpdated(_newPriceFeed);\\n    }\\n\\n    /**\\n     * @dev Updates the creation fee amount\\n     * @param _newFeeUSD New fee amount in USD (scaled by 1e18)\\n     */\\n    function updateCreationFee(uint256 _newFeeUSD) external onlyOwner {\\n        if (_newFeeUSD == 0) revert InvalidFeeAmount();\\n\\n        uint256 oldFee = creationFeeUSD;\\n        creationFeeUSD = _newFeeUSD;\\n\\n        emit CreationFeeUpdated(oldFee, _newFeeUSD);\\n    }\\n\\n    /**\\n     * @dev Calculates required ETH amount for creation fee based on current ETH price\\n     * @return Required ETH amount in wei\\n     */\\n    function getRequiredEthAmount() public view returns (uint256) {\\n        uint256 ethPrice = PriceConverter.getPrice(priceFeed);\\n        return (creationFeeUSD * 1e18) / ethPrice;\\n    }\\n\\n    /**\\n     * @dev Creates a new Cohort contract\\n     * @param _primaryAdmin Address of the primary admin\\n     * @param _tokenAddress Address of ERC20 token (zero address for ETH)\\n     * @param _name Name of the cohort\\n     * @param _description Description of the cohort\\n     * @param _cycle Cycle duration\\n     * @param _builders Array of builder addresses\\n     * @param _caps Array of cap values for builders\\n     * @return Address of the newly created cohort\\n     */\\n    function createCohort(\\n        address _primaryAdmin,\\n        address _tokenAddress,\\n        string memory _name,\\n        string memory _description,\\n        uint256 _cycle,\\n        address[] memory _builders,\\n        uint256[] memory _caps\\n    ) external payable returns (address) {\\n        uint256 requiredEth = getRequiredEthAmount();\\n\\n        if (msg.value.getConversionRate(priceFeed) < creationFeeUSD) {\\n            revert InsufficientPayment(requiredEth, msg.value);\\n        }\\n\\n        Cohort newCohort = new Cohort(_primaryAdmin, _tokenAddress, _name, _description, _cycle, _builders, _caps);\\n\\n        address cohortAddress = address(newCohort);\\n        isCohort[cohortAddress] = true;\\n\\n        uint256 cohortId = totalCohorts;\\n        cohortRegistry[cohortId] = CohortInfo({\\n            cohortAddress: cohortAddress,\\n            name: _name,\\n            creationTimestamp: block.timestamp\\n        });\\n\\n        totalCohorts++;\\n\\n        (bool sent, ) = owner().call{ value: msg.value }(\\\"\\\");\\n        if (!sent) revert FailedToSendETH();\\n\\n        emit CohortCreated(cohortAddress, _primaryAdmin, _name, _description);\\n        return cohortAddress;\\n    }\\n\\n    /**\\n     * @dev Gets all created cohorts with their information\\n     * @return Array of CohortInfo structs\\n     */\\n    function getAllCohorts() external view returns (CohortInfo[] memory) {\\n        CohortInfo[] memory allCohorts = new CohortInfo[](totalCohorts);\\n\\n        for (uint256 i = 0; i < totalCohorts; i++) {\\n            allCohorts[i] = cohortRegistry[i];\\n        }\\n\\n        return allCohorts;\\n    }\\n\\n    /**\\n     * @dev Gets cohort information by index\\n     * @param _index Index of the cohort in the registry\\n     * @return Cohort information\\n     */\\n    function getCohortByIndex(uint256 _index) external view returns (CohortInfo memory) {\\n        require(_index < totalCohorts, \\\"Index out of bounds\\\");\\n        return cohortRegistry[_index];\\n    }\\n\\n    /**\\n     * @dev Gets the total number of created cohorts\\n     * @return Number of cohorts\\n     */\\n    function getTotalCohorts() external view returns (uint256) {\\n        return totalCohorts;\\n    }\\n}\\n\",\"keccak256\":\"0x2ef8910051edc653656234fadd53884d220609c8f9dd7cfd1e75e798531d43c2\",\"license\":\"MIT\"},\"contracts/Libraries/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    /**\\n     * @dev Gets the latest ETH/USD price from Chainlink\\n     * @return price Latest ETH/USD price with 18 decimals\\n     */\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (\\n            ,\\n            /* uint80 roundID */ int256 price /* uint256 startedAt */ /* uint256 timeStamp */ /* uint80 answeredInRound */,\\n            ,\\n            ,\\n\\n        ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n        // ETH in terms of USD\\n    }\\n\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xd1f1a46f67f5fcdc41caffe9a74bbde1663f4c669d5284119d106713cdf3f570\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162004f4938038062004f49833981016040819052610031916100e2565b61003a33610092565b6001600160a01b038116610061576040516307806b6560e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b039290921691909117905567016345785d8a0000600255610112565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100f457600080fd5b81516001600160a01b038116811461010b57600080fd5b9392505050565b614e2780620001226000396000f3fe608060405260043610620000ef5760003560e01c8063715018a6116200008957806395877f78116200006057806395877f7814620002965780639b8a969e14620002bb578063a2299a9d14620002d3578063f2fde38b14620002eb57600080fd5b8063715018a6146200022a5780637659073814620002425780638da5cb5b146200027657600080fd5b80634e73e35511620000ca5780634e73e3551462000194578063595a2dd314620001bb5780636a8479b214620001eb5780636fa23795146200020357600080fd5b8063114be58514620000f45780633d5e5ed914620001195780634bdcda92146200014f575b600080fd5b3480156200010157600080fd5b506005545b6040519081526020015b60405180910390f35b3480156200012657600080fd5b506200013e6200013836600462000ca6565b62000310565b604051620001109392919062000d08565b3480156200015c57600080fd5b50620001836200016e36600462000d5b565b60036020526000908152604090205460ff1681565b604051901515815260200162000110565b348015620001a157600080fd5b50620001ac620003cd565b60405162000110919062000db6565b620001d2620001cc36600462000fe2565b6200056d565b6040516001600160a01b03909116815260200162000110565b348015620001f857600080fd5b506200010660025481565b3480156200021057600080fd5b50620002286200022236600462000ca6565b620007d2565b005b3480156200023757600080fd5b506200022862000865565b3480156200024f57600080fd5b50620002676200026136600462000ca6565b620008a0565b604051620001109190620010cb565b3480156200028357600080fd5b506000546001600160a01b0316620001d2565b348015620002a357600080fd5b5062000228620002b536600462000d5b565b620009ee565b348015620002c857600080fd5b506200010662000a97565b348015620002e057600080fd5b506200010660055481565b348015620002f857600080fd5b50620002286200030a36600462000d5b565b62000ae0565b600460205260009081526040902080546001820180546001600160a01b0390921692916200033e90620010e0565b80601f01602080910402602001604051908101604052809291908181526020018280546200036c90620010e0565b8015620003bd5780601f106200039157610100808354040283529160200191620003bd565b820191906000526020600020905b8154815290600101906020018083116200039f57829003601f168201915b5050505050908060020154905083565b6060600060055467ffffffffffffffff811115620003ef57620003ef62000e1c565b6040519080825280602002602001820160405280156200045057816020015b6200043c604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b8152602001906001900390816200040e5790505b50905060005b600554811015620005675760008181526004602090815260409182902082516060810190935280546001600160a01b0316835260018101805491928401916200049f90620010e0565b80601f0160208091040260200160405190810160405280929190818152602001828054620004cd90620010e0565b80156200051e5780601f10620004f2576101008083540402835291602001916200051e565b820191906000526020600020905b8154815290600101906020018083116200050057829003601f168201915b5050505050815260200160028201548152505082828151811062000546576200054662001116565b602002602001018190525080806200055e9062001142565b91505062000456565b50919050565b6000806200057a62000a97565b600254600154919250906200059a9034906001600160a01b031662000b82565b1015620005c85760405163b99e2ab760e01b8152600481018290523460248201526044015b60405180910390fd5b600089898989898989604051620005df9062000c98565b620005f197969594939291906200119b565b604051809103906000f0801580156200060e573d6000803e3d6000fd5b5090506000819050600160036000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600060055490506040518060600160405280836001600160a01b031681526020018b8152602001428152506004600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001019081620006d6919062001296565b506040919091015160029091015560058054906000620006f68362001142565b9091555050600080546040516001600160a01b039091169034908381818185875af1925050503d80600081146200074a576040519150601f19603f3d011682016040523d82523d6000602084013e6200074f565b606091505b505090508062000772576040516338822c1360e11b815260040160405180910390fd5b8c6001600160a01b0316836001600160a01b03167f570e843f430e9c07b135675740293a86d5c98eb4b737091ea2c5cb61ae9293bf8d8d604051620007b992919062001363565b60405180910390a350909b9a5050505050505050505050565b6000546001600160a01b03163314620007ff5760405162461bcd60e51b8152600401620005bf9062001395565b80600003620008205760405162a4671960e71b815260040160405180910390fd5b600280549082905560408051828152602081018490527f5de302eeb1c80d4fb0c0953b692353f09ddf431411b8eb2034d5e85769561912910160405180910390a15050565b6000546001600160a01b03163314620008925760405162461bcd60e51b8152600401620005bf9062001395565b6200089e600062000bc0565b565b620008ce604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b6005548210620009175760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401620005bf565b60008281526004602090815260409182902082516060810190935280546001600160a01b0316835260018101805491928401916200095590620010e0565b80601f01602080910402602001604051908101604052809291908181526020018280546200098390620010e0565b8015620009d45780601f10620009a857610100808354040283529160200191620009d4565b820191906000526020600020905b815481529060010190602001808311620009b657829003601f168201915b505050505081526020016002820154815250509050919050565b6000546001600160a01b0316331462000a1b5760405162461bcd60e51b8152600401620005bf9062001395565b6001600160a01b03811662000a43576040516307806b6560e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e69060200160405180910390a150565b600154600090819062000ab3906001600160a01b031662000c10565b905080600254670de0b6b3a764000062000ace9190620013ca565b62000ada9190620013e4565b91505090565b6000546001600160a01b0316331462000b0d5760405162461bcd60e51b8152600401620005bf9062001395565b6001600160a01b03811662000b745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620005bf565b62000b7f8162000bc0565b50565b60008062000b908362000c10565b90506000670de0b6b3a764000062000ba98684620013ca565b62000bb59190620013e4565b925050505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000c52573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c78919062001422565b505050915050806402540be40062000c91919062001477565b9392505050565b61394480620014ae83390190565b60006020828403121562000cb957600080fd5b5035919050565b6000815180845260005b8181101562000ce85760208185018101518683018201520162000cca565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038416815260606020820181905260009062000d2e9083018562000cc0565b9050826040830152949350505050565b80356001600160a01b038116811462000d5657600080fd5b919050565b60006020828403121562000d6e57600080fd5b62000c918262000d3e565b60018060a01b038151168252600060208201516060602085015262000da2606085018262000cc0565b604093840151949093019390935250919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101562000e0f57603f1988860301845262000dfc85835162000d79565b9450928501929085019060010162000ddd565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000e5e5762000e5e62000e1c565b604052919050565b600082601f83011262000e7857600080fd5b813567ffffffffffffffff81111562000e955762000e9562000e1c565b62000eaa601f8201601f191660200162000e32565b81815284602083860101111562000ec057600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111562000efa5762000efa62000e1c565b5060051b60200190565b600082601f83011262000f1657600080fd5b8135602062000f2f62000f298362000edd565b62000e32565b82815260059290921b8401810191818101908684111562000f4f57600080fd5b8286015b8481101562000f755762000f678162000d3e565b835291830191830162000f53565b509695505050505050565b600082601f83011262000f9257600080fd5b8135602062000fa562000f298362000edd565b82815260059290921b8401810191818101908684111562000fc557600080fd5b8286015b8481101562000f75578035835291830191830162000fc9565b600080600080600080600060e0888a03121562000ffe57600080fd5b620010098862000d3e565b9650620010196020890162000d3e565b9550604088013567ffffffffffffffff808211156200103757600080fd5b620010458b838c0162000e66565b965060608a01359150808211156200105c57600080fd5b6200106a8b838c0162000e66565b955060808a0135945060a08a01359150808211156200108857600080fd5b620010968b838c0162000f04565b935060c08a0135915080821115620010ad57600080fd5b50620010bc8a828b0162000f80565b91505092959891949750929550565b60208152600062000c91602083018462000d79565b600181811c90821680620010f557607f821691505b6020821081036200056757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016200115757620011576200112c565b5060010190565b600081518084526020808501945080840160005b83811015620011905781518752958201959082019060010162001172565b509495945050505050565b600060018060a01b03808a1683526020818a168185015260e06040850152620011c860e085018a62000cc0565b8481036060860152620011dc818a62000cc0565b6080860189905285810360a0870152875180825283890192509083019060005b818110156200121c578351861683529284019291840191600101620011fc565b505085810360c08701526200123281886200115e565b9d9c50505050505050505050505050565b601f8211156200129157600081815260208120601f850160051c810160208610156200126c5750805b601f850160051c820191505b818110156200128d5782815560010162001278565b5050505b505050565b815167ffffffffffffffff811115620012b357620012b362000e1c565b620012cb81620012c48454620010e0565b8462001243565b602080601f831160018114620013035760008415620012ea5750858301515b600019600386901b1c1916600185901b1785556200128d565b600085815260208120601f198616915b82811015620013345788860151825594840194600190910190840162001313565b5085821015620013535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600062001378604083018562000cc0565b82810360208401526200138c818562000cc0565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b808202811582820484141762000bba5762000bba6200112c565b6000826200140257634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff8116811462000d5657600080fd5b600080600080600060a086880312156200143b57600080fd5b620014468662001407565b94506020860151935060408601519250606086015191506200146b6080870162001407565b90509295509295909350565b80820260008212600160ff1b841416156200149657620014966200112c565b818105831482151762000bba5762000bba6200112c56fe60806040523480156200001157600080fd5b506040516200394438038062003944833981016040819052620000349162000733565b600180556200004560008862000352565b6001600160a01b0387166000818152600d60205260409020805460ff19166001179055600780546001600160a01b03191690911790556004620000898682620008ab565b506005620000988582620008ab565b5060028390556001600160a01b03861615620000d9576003805460ff19166001179055600680546001600160a01b0388166001600160a01b03199091161790555b8151156200034557815160198110620001055760405163104e7cef60e31b815260040160405180910390fd5b81518114620001275760405163586cb9e160e01b815260040160405180910390fd5b60005b8181101562000342576200017d8482815181106200014c576200014c62000977565b602002602001015184838151811062000169576200016962000977565b6020026020010151620003db60201b60201c565b60405180604001604052808483815181106200019d576200019d62000977565b602002602001015181526020018642620001b891906200098d565b815250600a6000868481518110620001d457620001d462000977565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155905050600c8482815181106200022a576200022a62000977565b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b0390931692909217909155600c546200027891906200098d565b600b600086848151811062000291576200029162000977565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550838181518110620002d257620002d262000977565b60200260200101516001600160a01b03167f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c384838151811062000319576200031962000977565b60200260200101516040516200033191815260200190565b60405180910390a26001016200012a565b50505b50505050505050620009af565b6200035e828262000511565b620003d7576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003963390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6703782dace9d9000081108015620003f6575060035460ff16155b156200042b5760405163c281dd3b60e01b8152600481018290526703782dace9d9000060248201526044015b60405180910390fd5b678ac7230489e800008110801562000445575060035460ff165b15620004765760405163c281dd3b60e01b815260048101829052678ac7230489e80000602482015260440162000422565b6001600160a01b0382166200049e5760405163094d784960e21b815260040160405180910390fd5b6001600160a01b0382166000908152600d602052604090205460ff1615620004d95760405163094d784960e21b815260040160405180910390fd5b6001600160a01b0382166000908152600a602052604090205415620003d757604051637fe8efbb60e01b815260040160405180910390fd5b6000828152602081815260408083206001600160a01b038516845290915290205460ff165b92915050565b80516001600160a01b03811681146200055457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200059a576200059a62000559565b604052919050565b600082601f830112620005b457600080fd5b81516001600160401b03811115620005d057620005d062000559565b6020620005e6601f8301601f191682016200056f565b8281528582848701011115620005fb57600080fd5b60005b838110156200061b578581018301518282018401528201620005fe565b506000928101909101919091529392505050565b60006001600160401b038211156200064b576200064b62000559565b5060051b60200190565b600082601f8301126200066757600080fd5b81516020620006806200067a836200062f565b6200056f565b82815260059290921b84018101918181019086841115620006a057600080fd5b8286015b84811015620006c657620006b8816200053c565b8352918301918301620006a4565b509695505050505050565b600082601f830112620006e357600080fd5b81516020620006f66200067a836200062f565b82815260059290921b840181019181810190868411156200071657600080fd5b8286015b84811015620006c657805183529183019183016200071a565b600080600080600080600060e0888a0312156200074f57600080fd5b6200075a886200053c565b96506200076a602089016200053c565b60408901519096506001600160401b03808211156200078857600080fd5b620007968b838c01620005a2565b965060608a0151915080821115620007ad57600080fd5b620007bb8b838c01620005a2565b955060808a0151945060a08a0151915080821115620007d957600080fd5b620007e78b838c0162000655565b935060c08a0151915080821115620007fe57600080fd5b506200080d8a828b01620006d1565b91505092959891949750929550565b600181811c908216806200083157607f821691505b6020821081036200085257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008a657600081815260208120601f850160051c81016020861015620008815750805b601f850160051c820191505b81811015620008a2578281556001016200088d565b5050505b505050565b81516001600160401b03811115620008c757620008c762000559565b620008df81620008d884546200081c565b8462000858565b602080601f831160018114620009175760008415620008fe5750858301515b600019600386901b1c1916600185901b178555620008a2565b600085815260208120601f198616915b82811015620009485788860151825594840194600190910190840162000927565b5085821015620009675787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b818103818111156200053657634e487b7160e01b600052601160045260246000fd5b612f8580620009bf6000396000f3fe6080604052600436106102125760003560e01c80636d6ca319116101185780639d76ea58116100a0578063a4adcb611161006f578063a4adcb611461068d578063a7839334146106ad578063a8397ddc146106cd578063af402532146106ed578063d547741f1461070d57600080fd5b80639d76ea58146105f35780639de1b23d1461062b578063a217fddf1461064b578063a46495ac1461066057600080fd5b806380c9b2f6116100e757806380c9b2f6146105535780638216d5061461057357806382c2aff7146105935780638c0a2d56146105b357806391d14854146105d357600080fd5b80636d6ca319146104c15780637284e416146104f257806375f12b21146105075780637c6f1b591461052657600080fd5b806329d36c461161019b57806336568abe1161016a57806336568abe14610402578063377c9815146104225780634cb404001461046b5780634e1ca1201461048b5780636190c9d5146104ab57600080fd5b806329d36c46146103955780632eb67f53146103b55780632f2ff15d146103cf5780633519a2f8146103ef57600080fd5b80630d12cc68116101e25780630d12cc68146102c7578063116e72db146102e75780632087ed5c14610307578063248a9ca31461032757806324d7806c1461036557600080fd5b806208359d1461021e57806301ffc9a71461024057806306fdde0314610275578063070092d41461029757600080fd5b3661021957005b600080fd5b34801561022a57600080fd5b5061023e6102393660046126e8565b61072d565b005b34801561024c57600080fd5b5061026061025b366004612721565b6107ff565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b5061028a610836565b60405161026c919061279b565b3480156102a357600080fd5b506102606102b23660046127ae565b60096020526000908152604090205460ff1681565b3480156102d357600080fd5b5061023e6102e23660046128a1565b6108c4565b3480156102f357600080fd5b5061023e6103023660046126e8565b610985565b34801561031357600080fd5b5061023e610322366004612963565b610ac7565b34801561033357600080fd5b50610357610342366004612963565b60009081526020819052604090206001015490565b60405190815260200161026c565b34801561037157600080fd5b506102606103803660046127ae565b600d6020526000908152604090205460ff1681565b3480156103a157600080fd5b5061023e6103b036600461297c565b610ccb565b3480156103c157600080fd5b506003546102609060ff1681565b3480156103db57600080fd5b5061023e6103ea3660046129a8565b610de3565b61023e6103fd366004612963565b610e0d565b34801561040e57600080fd5b5061023e61041d3660046129a8565b610eef565b34801561042e57600080fd5b5061045661043d3660046127ae565b600a602052600090815260409020805460019091015482565b6040805192835260208301919091520161026c565b34801561047757600080fd5b5061023e6104863660046129cd565b610f69565b34801561049757600080fd5b5061023e6104a636600461297c565b610fab565b3480156104b757600080fd5b5061035760025481565b3480156104cd57600080fd5b506104e16104dc36600461297c565b6110c1565b60405161026c9594939291906129ea565b3480156104fe57600080fd5b5061028a6111a3565b34801561051357600080fd5b5060035461026090610100900460ff1681565b34801561053257600080fd5b50610546610541366004612a20565b6111b0565b60405161026c9190612a95565b34801561055f57600080fd5b5061035761056e3660046127ae565b6112af565b34801561057f57600080fd5b5061023e61058e36600461297c565b611370565b34801561059f57600080fd5b5061023e6105ae36600461297c565b6114df565b3480156105bf57600080fd5b5061023e6105ce3660046127ae565b611625565b3480156105df57600080fd5b506102606105ee3660046129a8565b6116e3565b3480156105ff57600080fd5b50600654610613906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b34801561063757600080fd5b50600754610613906001600160a01b031681565b34801561065757600080fd5b50610357600081565b34801561066c57600080fd5b5061035761067b3660046127ae565b600b6020526000908152604090205481565b34801561069957600080fd5b5061023e6106a83660046127ae565b61170c565b3480156106b957600080fd5b506106136106c8366004612963565b6118e9565b3480156106d957600080fd5b5061023e6106e8366004612ae4565b611913565b3480156106f957600080fd5b5061023e6107083660046127ae565b611a11565b34801561071957600080fd5b5061023e6107283660046129a8565b611bb5565b6107386000336116e3565b61075557604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600a602052604081205483910361079e5760405163f4c8fba360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b038316600081815260096020908152604091829020805460ff191686151590811790915591519182527f70d2c92da609a3045e6b2a21e9d4cd5dc02f15a3830961912b03f5b236b78c8b91015b60405180910390a2505050565b60006001600160e01b03198216637965db0b60e01b148061083057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6004805461084390612b83565b80601f016020809104026020016040519081016040528092919081815260200182805461086f90612b83565b80156108bc5780601f10610891576101008083540402835291602001916108bc565b820191906000526020600020905b81548152906001019060200180831161089f57829003601f168201915b505050505081565b6108cf6000336116e3565b6108ec57604051634ca8886760e01b815260040160405180910390fd5b81516019811061090f5760405163104e7cef60e31b815260040160405180910390fd5b815181146109305760405163586cb9e160e01b815260040160405180910390fd5b60005b8181101561097f5761097784828151811061095057610950612bb7565b602002602001015184838151811061096a5761096a612bb7565b60200260200101516114df565b600101610933565b50505050565b6109906000336116e3565b6109ad57604051634ca8886760e01b815260040160405180910390fd5b8015610a42576001600160a01b0382166000908152600a6020526040902054156109ea5760405163094d784960e21b815260040160405180910390fd5b6109f5600083610de3565b6001600160a01b0382166000818152600d6020526040808220805460ff19166001179055517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e3399190a25050565b6007546001600160a01b0390811690831603610a7157604051634ca8886760e01b815260040160405180910390fd5b610a7c600083611bb5565b6001600160a01b0382166000818152600d6020526040808220805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f9190a25b5050565b336000818152600a60205260408120549003610b015760405163f4c8fba360e01b81526001600160a01b0382166004820152602401610795565b600260015403610b235760405162461bcd60e51b815260040161079590612bcd565b6002600155600354610100900460ff1615610b5157604051632e1aa8d760e01b815260040160405180910390fd5b336000908152600860205260409020548210610b8057604051632bb8b38560e11b815260040160405180910390fd5b336000908152600860205260408120805484908110610ba157610ba1612bb7565b906000526020600020906004020190508060020160019054906101000a900460ff1615610be157604051635a4a8a4360e11b815260040160405180910390fd5b3360009081526009602052604090205460ff168015610c055750600281015460ff16155b15610c2357604051632b811a4760e11b815260040160405180910390fd5b8054610c2e90611bda565b60028101805461ff001916610100179055805460405133917f0502837c293951f8cf960d168bcedcf3e4531ffd7010af47fe48bbff7917d9b491610c7a91878252602082015260400190565b60405180910390a2805460405133917f485f1bb6524c663555797e00171a10f341656e59b02d6b557a0a38ba7d5d975191610cba91906001860190612c04565b60405180910390a250506001805550565b610cd66000336116e3565b610cf357604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600860205260409020548110610d2b57604051632bb8b38560e11b815260040160405180910390fd5b6001600160a01b0382166000908152600860205260408120805483908110610d5557610d55612bb7565b906000526020600020906004020190508060020160019054906101000a900460ff1615610d9557604051635a4a8a4360e11b815260040160405180910390fd5b60028101805461ffff19166101001790556040516001600160a01b038416907f019d1297aa228eef7dd79b31640282cbe91fbc09dc0cbf5000ca5abf72805989906107f29085815260200190565b600082815260208190526040902060010154610dfe81611ddb565b610e088383611de5565b505050565b60035460ff16610e705734600003610e38576040516327738acf60e21b815260040160405180910390fd5b60405134815233907f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f9060200160405180910390a250565b80600003610e91576040516327738acf60e21b815260040160405180910390fd5b600654610ea9906001600160a01b0316333084611e69565b60065460405182815233916001600160a01b0316907fa17c2a1269d65f89b5c5688ce949fa4a7f59d8fcb9bbbac872d27a142b2b49e79060200160405180910390a35b50565b6001600160a01b0381163314610f5f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610795565b610ac38282611ed4565b610f746000336116e3565b610f9157604051634ca8886760e01b815260040160405180910390fd5b600380549115156101000261ff0019909216919091179055565b610fb66000336116e3565b610fd357604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b038216600090815260086020526040902054811061100b57604051632bb8b38560e11b815260040160405180910390fd5b6001600160a01b038216600090815260086020526040812080548390811061103557611035612bb7565b906000526020600020906004020190508060020160019054906101000a900460ff161561107557604051635a4a8a4360e11b815260040160405180910390fd5b60028101805460ff191660011790556040516001600160a01b038416907f6f856c863eba32b6aca7d24f96817572a1f48382957c3dc9e8d4741f38afd72e906107f29085815260200190565b600860205281600052604060002081815481106110dd57600080fd5b90600052602060002090600402016000915091505080600001549080600101805461110790612b83565b80601f016020809104026020016040519081016040528092919081815260200182805461113390612b83565b80156111805780601f1061115557610100808354040283529160200191611180565b820191906000526020600020905b81548152906001019060200180831161116357829003601f168201915b505050506002830154600390930154919260ff8082169361010090920416915085565b6005805461084390612b83565b60608160008167ffffffffffffffff8111156111ce576111ce6127cb565b60405190808252806020026020018201604052801561121357816020015b60408051808201909152600080825260208201528152602001906001900390816111ec5790505b50905060005b828110156112a657600086868381811061123557611235612bb7565b905060200201602081019061124a91906127ae565b6001600160a01b0381166000908152600a6020908152604091829020825180840190935280548352600101549082015284519192509084908490811061129257611292612bb7565b602090810291909101015250600101611219565b50949350505050565b6001600160a01b0381166000908152600a6020526040812054829082036112f45760405163f4c8fba360e01b81526001600160a01b0382166004820152602401610795565b6001600160a01b0383166000908152600a602090815260408083208151808301909252805482526001015491810182905291906113319042612cad565b9050600254811015611365576002548251600091906113509084612cc0565b61135a9190612cd7565b945061136a92505050565b505191505b50919050565b61137b6000336116e3565b61139857604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600a60205260408120548391036113dc5760405163f4c8fba360e01b81526001600160a01b0382166004820152602401610795565b6703782dace9d90000821080156113f6575060035460ff16155b156114255760405163c281dd3b60e01b8152600481018390526703782dace9d900006024820152604401610795565b678ac7230489e800008210801561143e575060035460ff165b1561146d5760405163c281dd3b60e01b815260048101839052678ac7230489e800006024820152604401610795565b6001600160a01b0383166000908152600a602052604090208281556002546114959042612cad565b60018201556040518381526001600160a01b038516907f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d5906020015b60405180910390a250505050565b6114ea6000336116e3565b61150757604051634ca8886760e01b815260040160405180910390fd5b600c5460191161152a5760405163104e7cef60e31b815260040160405180910390fd5b6115348282611f39565b6040518060400160405280828152602001600254426115539190612cad565b90526001600160a01b0383166000818152600a60209081526040822084518155930151600193840155600c80548085018255918190527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790910180546001600160a01b031916909217909155546115ca9190612cad565b6001600160a01b0383166000818152600b6020526040908190209290925590517f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c3906116199084815260200190565b60405180910390a25050565b6007546001600160a01b031633146116505760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166116775760405163b5aaecfd60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556116a190600090611ed4565b6116ac600082611de5565b6040516001600160a01b038216907fb8121b611a666c4d7c03b96ba9dbc315332dc3f1aa77a22c0a1c162e55c5c32b90600090a250565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6117176000336116e3565b61173457604051634ca8886760e01b815260040160405180910390fd5b6002600154036117565760405162461bcd60e51b815260040161079590612bcd565b600260015560006001600160a01b038216611822575047801561181c576007546040516000916001600160a01b03169083908381818185875af1925050503d80600081146117c0576040519150601f19603f3d011682016040523d82523d6000602084013e6117c5565b606091505b50509050806117e757604051637d6a86b760e11b815260040160405180910390fd5b6040518281527f217f10a82904d12e2798042bffcd3f5c3cab8f7ea5638a4c0b804a5d6487c8fa9060200160405180910390a1505b506118e2565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188a9190612cf9565b905080156118e0576007546118ac906001600160a01b03848116911683612062565b6040518181527f217f10a82904d12e2798042bffcd3f5c3cab8f7ea5638a4c0b804a5d6487c8fa9060200160405180910390a15b505b5060018055565b600c81815481106118f957600080fd5b6000918252602090912001546001600160a01b0316905081565b336000818152600a6020526040812054900361194d5760405163f4c8fba360e01b81526001600160a01b0382166004820152602401610795565b60026001540361196f5760405162461bcd60e51b815260040161079590612bcd565b6002600155600354610100900460ff161561199d57604051632e1aa8d760e01b815260040160405180910390fd5b3360009081526009602052604090205460ff16156119c4576119bf8383612092565b611a08565b6119cd83611bda565b336001600160a01b03167f485f1bb6524c663555797e00171a10f341656e59b02d6b557a0a38ba7d5d97518484604051610cba929190612d12565b50506001805550565b611a1c6000336116e3565b611a3957604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0381166000908152600a6020526040812054829103611a7d5760405163f4c8fba360e01b81526001600160a01b0382166004820152602401610795565b6001600160a01b0382166000908152600b6020526040812054600c8054919291611aa990600190612cad565b81548110611ab957611ab9612bb7565b6000918252602090912001546001600160a01b03908116915084168114611b285780600c8381548110611aee57611aee612bb7565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559183168152600b909152604090208290555b600c805480611b3957611b39612d2b565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b038616808352600a82526040808420848155600101849055600b835280842084905551928352917f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d591016114d1565b600082815260208190526040902060010154611bd081611ddb565b610e088383611ed4565b6000611be5336112af565b905081811015611c125760405163ba49c84f60e01b81526004810183905260248101829052604401610795565b336000908152600a60205260408120600181015460025491929091429190611c3a9083612cad565b905080831015611c48578092505b60035460ff16611cee574786811015611c7e57604051631508de4560e01b81526004810188905260248101829052604401610795565b604051600090339089908381818185875af1925050503d8060008114611cc0576040519150601f19603f3d011682016040523d82523d6000602084013e611cc5565b606091505b5050905080611ce757604051637d6a86b760e11b815260040160405180910390fd5b5050611da1565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5b9190612cf9565b905086811015611d8857604051631508de4560e01b81526004810188905260248101829052604401610795565b600654611d9f906001600160a01b03163389612062565b505b8486611dad8585612cad565b611db79190612cc0565b611dc19190612cd7565b611dcb9084612d41565b8460010181905550505050505050565b610eec813361226b565b611def82826116e3565b610ac3576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611e253390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6040516001600160a01b038085166024830152831660448201526064810182905261097f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526122cf565b611ede82826116e3565b15610ac3576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6703782dace9d9000081108015611f53575060035460ff16155b15611f825760405163c281dd3b60e01b8152600481018290526703782dace9d900006024820152604401610795565b678ac7230489e8000081108015611f9b575060035460ff165b15611fca5760405163c281dd3b60e01b815260048101829052678ac7230489e800006024820152604401610795565b6001600160a01b038216611ff15760405163094d784960e21b815260040160405180910390fd5b6001600160a01b0382166000908152600d602052604090205460ff161561202b5760405163094d784960e21b815260040160405180910390fd5b6001600160a01b0382166000908152600a602052604090205415610ac357604051637fe8efbb60e01b815260040160405180910390fd5b6040516001600160a01b038316602482015260448101829052610e0890849063a9059cbb60e01b90606401611e9d565b33600081815260086020526040812054815b8181101561210a576001600160a01b03841660009081526008602052604090208054829081106120d6576120d6612bb7565b906000526020600020906004020160020160019054906101000a900460ff16612102576001925061210a565b6001016120a4565b50811561212a5760405163ef97f13b60e01b815260040160405180910390fd5b6000612135336112af565b9050858110156121625760405163ba49c84f60e01b81526004810187905260248101829052604401610795565b336000908152600860209081526040808320815160a0810183528a81528084018a8152928101859052606081018590524260808201528154600181810184559286529390942084516004909402019283559051908201906121c39082612da2565b50604082810151600283018054606086015115156101000261ff00199315159390931661ffff199091161791909117905560809092015160039091015533600090815260086020529081205461221b90600190612cad565b9050336001600160a01b03167f0aed8180bd84f93fd8a307d9c534f2081366c2231daec597d51911c89fdae2a682898960405161225a93929190612e62565b60405180910390a250505050505050565b61227582826116e3565b610ac35761228d816001600160a01b031660146123a1565b6122988360206123a1565b6040516020016122a9929190612e8a565b60408051601f198184030181529082905262461bcd60e51b82526107959160040161279b565b6000612324826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125449092919063ffffffff16565b805190915015610e0857808060200190518101906123429190612eff565b610e085760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610795565b606060006123b0836002612cc0565b6123bb906002612d41565b67ffffffffffffffff8111156123d3576123d36127cb565b6040519080825280601f01601f1916602001820160405280156123fd576020820181803683370190505b509050600360fc1b8160008151811061241857612418612bb7565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061244757612447612bb7565b60200101906001600160f81b031916908160001a905350600061246b846002612cc0565b612476906001612d41565b90505b60018111156124ee576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124aa576124aa612bb7565b1a60f81b8282815181106124c0576124c0612bb7565b60200101906001600160f81b031916908160001a90535060049490941c936124e781612f1c565b9050612479565b50831561253d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610795565b9392505050565b6060612553848460008561255b565b949350505050565b6060824710156125bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610795565b6001600160a01b0385163b6126135760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610795565b600080866001600160a01b0316858760405161262f9190612f33565b60006040518083038185875af1925050503d806000811461266c576040519150601f19603f3d011682016040523d82523d6000602084013e612671565b606091505b509150915061268182828661268c565b979650505050505050565b6060831561269b57508161253d565b8251156126ab5782518084602001fd5b8160405162461bcd60e51b8152600401610795919061279b565b6001600160a01b0381168114610eec57600080fd5b8015158114610eec57600080fd5b600080604083850312156126fb57600080fd5b8235612706816126c5565b91506020830135612716816126da565b809150509250929050565b60006020828403121561273357600080fd5b81356001600160e01b03198116811461253d57600080fd5b60005b8381101561276657818101518382015260200161274e565b50506000910152565b6000815180845261278781602086016020860161274b565b601f01601f19169290920160200192915050565b60208152600061253d602083018461276f565b6000602082840312156127c057600080fd5b813561253d816126c5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561280a5761280a6127cb565b604052919050565b600067ffffffffffffffff82111561282c5761282c6127cb565b5060051b60200190565b600082601f83011261284757600080fd5b8135602061285c61285783612812565b6127e1565b82815260059290921b8401810191818101908684111561287b57600080fd5b8286015b84811015612896578035835291830191830161287f565b509695505050505050565b600080604083850312156128b457600080fd5b823567ffffffffffffffff808211156128cc57600080fd5b818501915085601f8301126128e057600080fd5b813560206128f061285783612812565b82815260059290921b8401810191818101908984111561290f57600080fd5b948201945b83861015612936578535612927816126c5565b82529482019490820190612914565b9650508601359250508082111561294c57600080fd5b5061295985828601612836565b9150509250929050565b60006020828403121561297557600080fd5b5035919050565b6000806040838503121561298f57600080fd5b823561299a816126c5565b946020939093013593505050565b600080604083850312156129bb57600080fd5b823591506020830135612716816126c5565b6000602082840312156129df57600080fd5b813561253d816126da565b85815260a060208201526000612a0360a083018761276f565b941515604083015250911515606083015260809091015292915050565b60008060208385031215612a3357600080fd5b823567ffffffffffffffff80821115612a4b57600080fd5b818501915085601f830112612a5f57600080fd5b813581811115612a6e57600080fd5b8660208260051b8501011115612a8357600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b82811015612ad757815180518552860151868501529284019290850190600101612ab2565b5091979650505050505050565b60008060408385031215612af757600080fd5b8235915060208084013567ffffffffffffffff80821115612b1757600080fd5b818601915086601f830112612b2b57600080fd5b813581811115612b3d57612b3d6127cb565b612b4f601f8201601f191685016127e1565b91508082528784828501011115612b6557600080fd5b80848401858401376000848284010152508093505050509250929050565b600181811c90821680612b9757607f821691505b60208210810361136a57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8281526000602060408184015260008454612c1e81612b83565b8060408701526060600180841660008114612c405760018114612c5a57612c88565b60ff1985168984015283151560051b890183019550612c88565b896000528660002060005b85811015612c805781548b8201860152908301908801612c65565b8a0184019650505b50939998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561083057610830612c97565b808202811582820484141761083057610830612c97565b600082612cf457634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612d0b57600080fd5b5051919050565b828152604060208201526000612553604083018461276f565b634e487b7160e01b600052603160045260246000fd5b8082018082111561083057610830612c97565b601f821115610e0857600081815260208120601f850160051c81016020861015612d7b5750805b601f850160051c820191505b81811015612d9a57828155600101612d87565b505050505050565b815167ffffffffffffffff811115612dbc57612dbc6127cb565b612dd081612dca8454612b83565b84612d54565b602080601f831160018114612e055760008415612ded5750858301515b600019600386901b1c1916600185901b178555612d9a565b600085815260208120601f198616915b82811015612e3457888601518255948401946001909101908401612e15565b5085821015612e525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b838152826020820152606060408201526000612e81606083018461276f565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612ec281601785016020880161274b565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612ef381602884016020880161274b565b01602801949350505050565b600060208284031215612f1157600080fd5b815161253d816126da565b600081612f2b57612f2b612c97565b506000190190565b60008251612f4581846020870161274b565b919091019291505056fea264697066735822122081ad378b26adf4c113a6692de85f849c3e5db835ecbebdd53629810ced547d7064736f6c63430008140033a26469706673582212207198d035b36f07f5b2286f81df3c12e7fb78c52fc7319560e697df36c1d5dd4864736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Factory contract for deploying new Cohort contracts with an updatable creation fee",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor sets the price feed address and initial creation fee",
        "params": {
          "_priceFeed": "Chainlink price feed address for ETH/USD"
        }
      },
      "createCohort(address,address,string,string,uint256,address[],uint256[])": {
        "details": "Creates a new Cohort contract",
        "params": {
          "_builders": "Array of builder addresses",
          "_caps": "Array of cap values for builders",
          "_cycle": "Cycle duration",
          "_description": "Description of the cohort",
          "_name": "Name of the cohort",
          "_primaryAdmin": "Address of the primary admin",
          "_tokenAddress": "Address of ERC20 token (zero address for ETH)"
        },
        "returns": {
          "_0": "Address of the newly created cohort"
        }
      },
      "getAllCohorts()": {
        "details": "Gets all created cohorts with their information",
        "returns": {
          "_0": "Array of CohortInfo structs"
        }
      },
      "getCohortByIndex(uint256)": {
        "details": "Gets cohort information by index",
        "params": {
          "_index": "Index of the cohort in the registry"
        },
        "returns": {
          "_0": "Cohort information"
        }
      },
      "getRequiredEthAmount()": {
        "details": "Calculates required ETH amount for creation fee based on current ETH price",
        "returns": {
          "_0": "Required ETH amount in wei"
        }
      },
      "getTotalCohorts()": {
        "details": "Gets the total number of created cohorts",
        "returns": {
          "_0": "Number of cohorts"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCreationFee(uint256)": {
        "details": "Updates the creation fee amount",
        "params": {
          "_newFeeUSD": "New fee amount in USD (scaled by 1e18)"
        }
      },
      "updatePriceFeed(address)": {
        "details": "Updates the price feed address",
        "params": {
          "_newPriceFeed": "New price feed address"
        }
      }
    },
    "title": "CohortFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 446,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3058,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 3060,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "creationFeeUSD",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3064,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "isCohort",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3069,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "cohortRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(CohortInfo)3055_storage)"
      },
      {
        "astId": 3071,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "totalCohorts",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(CohortInfo)3055_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CohortFactory.CohortInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CohortInfo)3055_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CohortInfo)3055_storage": {
        "encoding": "inplace",
        "label": "struct CohortFactory.CohortInfo",
        "members": [
          {
            "astId": 3050,
            "contract": "contracts/CohortFactory.sol:CohortFactory",
            "label": "cohortAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3052,
            "contract": "contracts/CohortFactory.sol:CohortFactory",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3054,
            "contract": "contracts/CohortFactory.sol:CohortFactory",
            "label": "creationTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
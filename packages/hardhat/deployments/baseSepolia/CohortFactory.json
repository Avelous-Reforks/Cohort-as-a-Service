{
  "address": "0x31581aC1754A51237d5F44B4f8ccaa296E98f403",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FailedToSendETH",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        }
      ],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceFeedInvalid",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "cohortAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "primaryAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "CohortCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPriceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREATION_FEE_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cohorts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primaryAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_cycle",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_creators",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        }
      ],
      "name": "createCohort",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCohorts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequiredEthAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCohorts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCohort",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPriceFeed",
          "type": "address"
        }
      ],
      "name": "updatePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x98a89e03b8a4558138a7fec33387adfc9b0c5094fd98b5b204561d8b48e4dbe9",
  "receipt": {
    "to": null,
    "from": "0x5F1b4cFfD8B7B3653197149bC046C493060B0bd7",
    "contractAddress": "0x31581aC1754A51237d5F44B4f8ccaa296E98f403",
    "transactionIndex": 18,
    "gasUsed": "3419145",
    "logsBloom": "0x
    "blockHash": "0x46b62ec521addae7cae821425bc69623ed28cc4f69844249309848c3ed44df15",
    "transactionHash": "0x98a89e03b8a4558138a7fec33387adfc9b0c5094fd98b5b204561d8b48e4dbe9",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 21627983,
        "transactionHash": "0x98a89e03b8a4558138a7fec33387adfc9b0c5094fd98b5b204561d8b48e4dbe9",
        "address": "0x31581aC1754A51237d5F44B4f8ccaa296E98f403",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f1b4cffd8b7b3653197149bc046c493060b0bd7"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x46b62ec521addae7cae821425bc69623ed28cc4f69844249309848c3ed44df15"
      }
    ],
    "blockNumber": 21627983,
    "cumulativeGasUsed": "5378972",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4aDC67696bA383F43DD60A9e78F2C97Fbbfc7cb1"
  ],
  "numDeployments": 1,
  "solcInputHash": "50a91902c2692be25987c98db29ae8d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedToSendETH\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeedInvalid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cohortAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primaryAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"CohortCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPriceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATION_FEE_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cohorts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primaryAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_creators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"}],\"name\":\"createCohort\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCohorts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCohorts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCohort\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPriceFeed\",\"type\":\"address\"}],\"name\":\"updatePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Factory contract for deploying new Cohort contracts with a creation fee\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor sets the price feed address for ETH/USD conversion\",\"params\":{\"_priceFeed\":\"Chainlink price feed address for ETH/USD\"}},\"createCohort(address,address,string,string,uint256,address[],uint256[])\":{\"details\":\"Creates a new Cohort contract\",\"params\":{\"_name\":\"Name of the cohort\",\"_primaryAdmin\":\"Address of the primary admin\",\"_tokenAddress\":\"Address of ERC20 token (zero address for ETH)\"},\"returns\":{\"_0\":\"Address of the newly created cohort\"}},\"getAllCohorts()\":{\"details\":\"Gets all created cohorts\",\"returns\":{\"_0\":\"Array of cohort addresses\"}},\"getRequiredEthAmount()\":{\"details\":\"Calculates required ETH amount for creation fee\",\"returns\":{\"_0\":\"Required ETH amount in wei\"}},\"getTotalCohorts()\":{\"details\":\"Gets the total number of created cohorts\",\"returns\":{\"_0\":\"Number of cohorts\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePriceFeed(address)\":{\"details\":\"Updates the price feed address\",\"params\":{\"_newPriceFeed\":\"New price feed address\"}}},\"title\":\"CohortFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CohortFactory.sol\":\"CohortFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Cohort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n//A smart contract for streaming Eth or ERC20 tokens to creators\\n//This is intended for research and development purposes only. Use this contract at your own risk and discretion.\\n//Pipoca\\n\\n// Custom errors\\nerror NoValueSent();\\nerror InsufficientFundsInContract(uint256 requested, uint256 available);\\nerror NoActiveFlowForCreator(address creator);\\nerror InsufficientInFlow(uint256 requested, uint256 available);\\nerror EtherSendingFailed();\\nerror LengthsMismatch();\\nerror InvalidCreatorAddress();\\nerror CreatorAlreadyExists();\\nerror ContractIsStopped();\\nerror MaxCreatorsReached();\\nerror AccessDenied();\\nerror InvalidTokenAddress();\\nerror NoFundsInContract();\\nerror ERC20TransferFailed();\\nerror ERC20SendingFailed(address token, address recipient);\\nerror ERC20FundsTransferFailed(address token, address to, uint256 amount);\\nerror BelowMinimumCap(uint256 provided, uint256 minimum);\\nerror NotAuthorized();\\nerror InvalidNewAdminAddress();\\n\\ncontract Cohort is AccessControl, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant MAXCREATORS = 25;\\n    uint256 constant MINIMUM_CAP = 0.25 ether;\\n    uint256 constant MINIMUM_ERC20_CAP = 10 * 10 ** 18;\\n\\n    // Cycle duration for the flow\\n    uint256 public cycle;\\n\\n    // ERC20 support\\n    bool public isERC20;\\n\\n    // Emergency mode variable\\n    bool public stopped;\\n\\n    // Cohort name\\n    string public name;\\n\\n    // Cohort description\\n    string public description;\\n\\n    // Token address for ERC20 support\\n    address public tokenAddress;\\n\\n    // Primary admin for remaining balances\\n    address public primaryAdmin;\\n\\n    // Modifier to check for admin permissions\\n    modifier onlyAdmin() {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AccessDenied();\\n        _;\\n    }\\n\\n    // Constructor to setup admin role and initial creators\\n    constructor(\\n        address _primaryAdmin,\\n        address _tokenAddress,\\n        string memory _name,\\n        string memory _description,\\n        uint256 _cycle,\\n        address[] memory _creators,\\n        uint256[] memory _caps\\n    ) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _primaryAdmin);\\n        isAdmin[_primaryAdmin] = true;\\n        primaryAdmin = _primaryAdmin;\\n        name = _name;\\n        description = _description;\\n        cycle = _cycle;\\n\\n        if (_tokenAddress != address(0)) {\\n            isERC20 = true;\\n            tokenAddress = _tokenAddress;\\n        }\\n\\n        if (_creators.length == 0) return;\\n\\n        uint256 cLength = _creators.length;\\n        if (_creators.length >= MAXCREATORS) revert MaxCreatorsReached();\\n        if (cLength != _caps.length) revert LengthsMismatch();\\n        for (uint256 i = 0; i < cLength; ) {\\n            validateCreatorInput(payable(_creators[i]), _caps[i]);\\n            flowingCreators[_creators[i]] = CreatorFlowInfo(_caps[i], block.timestamp - _cycle);\\n            activeCreators.push(_creators[i]);\\n            creatorIndex[_creators[i]] = activeCreators.length - 1;\\n            emit AddBuilder(_creators[i], _caps[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // Function to modify admin roles\\n    function modifyAdminRole(address adminAddress, bool shouldGrant) public onlyAdmin {\\n        if (shouldGrant) {\\n            if (flowingCreators[adminAddress].cap != 0) revert InvalidCreatorAddress();\\n            grantRole(DEFAULT_ADMIN_ROLE, adminAddress);\\n            isAdmin[adminAddress] = true;\\n            emit AdminAdded(adminAddress);\\n        } else {\\n            if (adminAddress == primaryAdmin) revert AccessDenied();\\n            revokeRole(DEFAULT_ADMIN_ROLE, adminAddress);\\n            isAdmin[adminAddress] = false;\\n            emit AdminRemoved(adminAddress);\\n        }\\n    }\\n\\n    // Struct to store information about creator's flow\\n    struct CreatorFlowInfo {\\n        uint256 cap; // Maximum amount of funds that can be withdrawn in a cycle\\n        uint256 last; // The timestamp of the last withdrawal\\n    }\\n\\n    // Function to transfer primary admin role\\n    function transferPrimaryAdmin(address newPrimaryAdmin) public {\\n        if (msg.sender != primaryAdmin) revert NotAuthorized();\\n        if (newPrimaryAdmin == address(0)) revert InvalidNewAdminAddress();\\n\\n        primaryAdmin = newPrimaryAdmin;\\n\\n        _revokeRole(DEFAULT_ADMIN_ROLE, primaryAdmin);\\n        _grantRole(DEFAULT_ADMIN_ROLE, newPrimaryAdmin);\\n\\n        emit PrimaryAdminTransferred(newPrimaryAdmin);\\n    }\\n\\n    // Mapping to store the flow info of each creator\\n    mapping(address => CreatorFlowInfo) public flowingCreators;\\n    // Mapping to store the index of each creator in the activeCreators array\\n    mapping(address => uint256) public creatorIndex;\\n    // Array to store the addresses of all active creators\\n    address[] public activeCreators;\\n    // Mapping to see if an address is admin\\n    mapping(address => bool) public isAdmin;\\n\\n    // Declare events to log various activities\\n    event FundsReceived(address indexed from, uint256 amount);\\n    event Withdraw(address indexed to, uint256 amount, string reason);\\n    event AddBuilder(address indexed to, uint256 amount);\\n    event UpdateBuilder(address indexed to, uint256 amount);\\n    event AdminAdded(address indexed to);\\n    event AdminRemoved(address indexed to);\\n    event AgreementDrained(uint256 amount);\\n    event PrimaryAdminTransferred(address indexed newAdmin);\\n    event ERC20FundsReceived(address indexed token, address indexed from, uint256 amount);\\n\\n    // Check if a flow for a creator is active\\n    modifier isFlowActive(address _creator) {\\n        if (flowingCreators[_creator].cap == 0) revert NoActiveFlowForCreator(_creator);\\n        _;\\n    }\\n\\n    // Check if the contract is stopped\\n    modifier stopInEmergency() {\\n        if (stopped) revert ContractIsStopped();\\n        _;\\n    }\\n\\n    // Fund contract\\n    function fundContract(uint256 _amount) public payable {\\n        if (!isERC20) {\\n            if (msg.value == 0) revert NoValueSent();\\n            emit FundsReceived(msg.sender, msg.value);\\n        } else {\\n            if (_amount == 0) revert NoValueSent();\\n\\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            emit ERC20FundsReceived(tokenAddress, msg.sender, _amount);\\n        }\\n    }\\n\\n    // Enable or disable emergency mode\\n    function emergencyMode(bool _enable) public onlyAdmin {\\n        stopped = _enable;\\n    }\\n\\n    // Get all creators' data.\\n    function allCreatorsData(address[] calldata _creators) public view returns (CreatorFlowInfo[] memory) {\\n        uint256 creatorLength = _creators.length;\\n        CreatorFlowInfo[] memory result = new CreatorFlowInfo[](creatorLength);\\n        for (uint256 i = 0; i < creatorLength; ) {\\n            address creatorAddress = _creators[i];\\n            result[i] = flowingCreators[creatorAddress];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // Get the available amount for a creator.\\n    function availableCreatorAmount(address _creator) public view isFlowActive(_creator) returns (uint256) {\\n        CreatorFlowInfo memory creatorFlow = flowingCreators[_creator];\\n        uint256 timePassed = block.timestamp - creatorFlow.last;\\n\\n        if (timePassed < cycle) {\\n            uint256 availableAmount = (timePassed * creatorFlow.cap) / cycle;\\n            return availableAmount;\\n        } else {\\n            return creatorFlow.cap;\\n        }\\n    }\\n\\n    // Add a new creator's flow. No more than 25 creators are allowed.\\n    function addCreatorFlow(address payable _creator, uint256 _cap) public onlyAdmin {\\n        // Check for maximum creators.\\n        if (activeCreators.length >= MAXCREATORS) revert MaxCreatorsReached();\\n\\n        validateCreatorInput(_creator, _cap);\\n        flowingCreators[_creator] = CreatorFlowInfo(_cap, block.timestamp - cycle);\\n        activeCreators.push(_creator);\\n        creatorIndex[_creator] = activeCreators.length - 1;\\n        emit AddBuilder(_creator, _cap);\\n    }\\n\\n    // Add a batch of creators.\\n    function addBatch(address[] memory _creators, uint256[] memory _caps) public onlyAdmin {\\n        uint256 cLength = _creators.length;\\n        if (_creators.length >= MAXCREATORS) revert MaxCreatorsReached();\\n        if (cLength != _caps.length) revert LengthsMismatch();\\n        for (uint256 i = 0; i < cLength; ) {\\n            addCreatorFlow(payable(_creators[i]), _caps[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // Validate the input for a creator\\n    function validateCreatorInput(address payable _creator, uint256 _cap) internal view {\\n        //check if minimum cap is met, eth mode and erc20 mode\\n        if (_cap < MINIMUM_CAP && !isERC20) revert BelowMinimumCap(_cap, MINIMUM_CAP);\\n        if (_cap < MINIMUM_ERC20_CAP && isERC20) revert BelowMinimumCap(_cap, MINIMUM_ERC20_CAP);\\n        if (_creator == address(0)) revert InvalidCreatorAddress();\\n        if (isAdmin[_creator]) revert InvalidCreatorAddress();\\n        if (flowingCreators[_creator].cap > 0) revert CreatorAlreadyExists();\\n    }\\n\\n    // Update a creator's flow cap\\n    function updateCreatorFlowCapCycle(\\n        address payable _creator,\\n        uint256 _newCap\\n    ) public onlyAdmin isFlowActive(_creator) {\\n        if (_newCap < MINIMUM_CAP && !isERC20) revert BelowMinimumCap(_newCap, MINIMUM_CAP);\\n        if (_newCap < MINIMUM_ERC20_CAP && isERC20) revert BelowMinimumCap(_newCap, MINIMUM_ERC20_CAP);\\n\\n        CreatorFlowInfo storage creatorFlow = flowingCreators[_creator];\\n\\n        creatorFlow.cap = _newCap;\\n\\n        creatorFlow.last = block.timestamp - (cycle);\\n\\n        emit UpdateBuilder(_creator, _newCap);\\n    }\\n\\n    // Remove a creator's flow\\n    function removeCreatorFlow(address _creator) public onlyAdmin isFlowActive(_creator) {\\n        uint256 creatorIndexToRemove = creatorIndex[_creator];\\n        address lastCreator = activeCreators[activeCreators.length - 1];\\n\\n        if (_creator != lastCreator) {\\n            activeCreators[creatorIndexToRemove] = lastCreator;\\n            creatorIndex[lastCreator] = creatorIndexToRemove;\\n        }\\n\\n        activeCreators.pop();\\n\\n        delete flowingCreators[_creator];\\n        delete creatorIndex[_creator];\\n\\n        emit UpdateBuilder(_creator, 0);\\n    }\\n\\n    function flowWithdraw(\\n        uint256 _amount,\\n        string memory _reason\\n    ) public isFlowActive(msg.sender) nonReentrant stopInEmergency {\\n        CreatorFlowInfo storage creatorFlow = flowingCreators[msg.sender];\\n\\n        uint256 totalAmountCanWithdraw = availableCreatorAmount(msg.sender);\\n        if (totalAmountCanWithdraw < _amount) {\\n            revert InsufficientInFlow(_amount, totalAmountCanWithdraw);\\n        }\\n\\n        uint256 creatorflowLast = creatorFlow.last;\\n        uint256 timestamp = block.timestamp;\\n        uint256 cappedLast = timestamp - cycle;\\n        if (creatorflowLast < cappedLast) {\\n            creatorflowLast = cappedLast;\\n        }\\n        if (!isERC20) {\\n            uint256 contractFunds = address(this).balance;\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            (bool sent, ) = msg.sender.call{ value: _amount }(\\\"\\\");\\n            if (!sent) revert EtherSendingFailed();\\n        } else {\\n            uint256 contractFunds = IERC20(tokenAddress).balanceOf(address(this));\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            IERC20(tokenAddress).safeTransfer(msg.sender, _amount);\\n        }\\n\\n        creatorFlow.last = creatorflowLast + (((timestamp - creatorflowLast) * _amount) / totalAmountCanWithdraw);\\n\\n        emit Withdraw(msg.sender, _amount, _reason);\\n    }\\n\\n    // Drain the agreement to the primary admin address\\n    function drainAgreement(address _token) public onlyAdmin nonReentrant {\\n        uint256 remainingBalance;\\n\\n        // Drain Ether\\n        if (_token == address(0)) {\\n            remainingBalance = address(this).balance;\\n            if (remainingBalance > 0) {\\n                (bool sent, ) = primaryAdmin.call{ value: remainingBalance }(\\\"\\\");\\n                if (!sent) revert EtherSendingFailed();\\n                emit AgreementDrained(remainingBalance);\\n            }\\n            return;\\n        }\\n\\n        // Drain ERC20 tokens\\n        remainingBalance = IERC20(_token).balanceOf(address(this));\\n        if (remainingBalance > 0) {\\n            IERC20(_token).safeTransfer(primaryAdmin, remainingBalance);\\n            emit AgreementDrained(remainingBalance);\\n        }\\n    }\\n\\n    // Fallback function to receive ether\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa353a6a237647bf07321c3b8ef536d2f509fd38df1d92bde246dcbb8c4f7ee28\",\"license\":\"MIT\"},\"contracts/CohortFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Cohort.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./Libraries/PriceConverter.sol\\\";\\n\\n/**\\n * @title CohortFactory\\n * @dev Factory contract for deploying new Cohort contracts with a creation fee\\n */\\ncontract CohortFactory is Ownable {\\n    using PriceConverter for uint256;\\n\\n    AggregatorV3Interface private priceFeed;\\n\\n    uint256 public constant CREATION_FEE_USD = 10 * 1e18; // 10 USD\\n\\n    mapping(address => bool) public isCohort;\\n\\n    address[] public cohorts;\\n\\n    event CohortCreated(address indexed cohortAddress, address indexed primaryAdmin, string name, string description);\\n    event PriceFeedUpdated(address newPriceFeed);\\n\\n    error InsufficientPayment(uint256 required, uint256 provided);\\n    error PriceFeedInvalid();\\n    error FailedToSendETH();\\n\\n    /**\\n     * @dev Constructor sets the price feed address for ETH/USD conversion\\n     * @param _priceFeed Chainlink price feed address for ETH/USD\\n     */\\n    constructor(address _priceFeed) {\\n        if (_priceFeed == address(0)) revert PriceFeedInvalid();\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    /**\\n     * @dev Updates the price feed address\\n     * @param _newPriceFeed New price feed address\\n     */\\n    function updatePriceFeed(address _newPriceFeed) external onlyOwner {\\n        if (_newPriceFeed == address(0)) revert PriceFeedInvalid();\\n        priceFeed = AggregatorV3Interface(_newPriceFeed);\\n        emit PriceFeedUpdated(_newPriceFeed);\\n    }\\n\\n    /**\\n     * @dev Calculates required ETH amount for creation fee\\n     * @return Required ETH amount in wei\\n     */\\n    function getRequiredEthAmount() public view returns (uint256) {\\n        uint256 ethPrice = PriceConverter.getPrice(priceFeed);\\n        return (CREATION_FEE_USD * 1e18) / ethPrice;\\n    }\\n\\n    /**\\n     * @dev Creates a new Cohort contract\\n     * @param _primaryAdmin Address of the primary admin\\n     * @param _tokenAddress Address of ERC20 token (zero address for ETH)\\n     * @param _name Name of the cohort\\n     * @return Address of the newly created cohort\\n     */\\n    function createCohort(\\n        address _primaryAdmin,\\n        address _tokenAddress,\\n        string memory _name,\\n        string memory _description,\\n        uint256 _cycle,\\n        address[] memory _creators,\\n        uint256[] memory _caps\\n    ) external payable returns (address) {\\n        uint256 requiredEth = getRequiredEthAmount();\\n\\n        if (msg.value.getConversionRate(priceFeed) < CREATION_FEE_USD) {\\n            revert InsufficientPayment(requiredEth, msg.value);\\n        }\\n\\n        Cohort newCohort = new Cohort(_primaryAdmin, _tokenAddress, _name, _description, _cycle, _creators, _caps);\\n\\n        address cohortAddress = address(newCohort);\\n        isCohort[cohortAddress] = true;\\n        cohorts.push(cohortAddress);\\n\\n        (bool sent, ) = owner().call{ value: msg.value }(\\\"\\\");\\n        if (!sent) revert FailedToSendETH();\\n\\n        emit CohortCreated(cohortAddress, _primaryAdmin, _name, _description);\\n        return cohortAddress;\\n    }\\n\\n    /**\\n     * @dev Gets all created cohorts\\n     * @return Array of cohort addresses\\n     */\\n    function getAllCohorts() external view returns (address[] memory) {\\n        return cohorts;\\n    }\\n\\n    /**\\n     * @dev Gets the total number of created cohorts\\n     * @return Number of cohorts\\n     */\\n    function getTotalCohorts() external view returns (uint256) {\\n        return cohorts.length;\\n    }\\n}\\n\",\"keccak256\":\"0xbb6d95f33f328963b42156d82ba8752c28cc838bc4699abd3da29ff344313314\",\"license\":\"MIT\"},\"contracts/Libraries/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    /**\\n     * @dev Gets the latest ETH/USD price from Chainlink\\n     * @return price Latest ETH/USD price with 18 decimals\\n     */\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (\\n            ,\\n            /* uint80 roundID */ int256 price /* uint256 startedAt */ /* uint256 timeStamp */ /* uint80 answeredInRound */,\\n            ,\\n            ,\\n\\n        ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n        // ETH in terms of USD\\n    }\\n\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xd1f1a46f67f5fcdc41caffe9a74bbde1663f4c669d5284119d106713cdf3f570\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051613d1d380380613d1d83398101604081905261002f916100d4565b61003833610084565b6001600160a01b03811661005f576040516307806b6560e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055610104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100e657600080fd5b81516001600160a01b03811681146100fd57600080fd5b9392505050565b613c0a806101136000396000f3fe608060405260043610620000a95760003560e01c806374ed78d0116200006c57806374ed78d01462000189578063858ab90814620001ae5780638da5cb5b14620001cc57806395877f7814620001ec5780639b8a969e1462000211578063f2fde38b146200022957600080fd5b8063114be58514620000ae5780634bdcda9214620000d35780634e73e3551462000118578063595a2dd3146200013f578063715018a6146200016f575b600080fd5b348015620000bb57600080fd5b506003545b6040519081526020015b60405180910390f35b348015620000e057600080fd5b5062000107620000f2366004620007e8565b60026020526000908152604090205460ff1681565b6040519015158152602001620000ca565b3480156200012557600080fd5b50620001306200024e565b604051620000ca91906200084c565b620001566200015036600462000a27565b620002b2565b6040516001600160a01b039091168152602001620000ca565b3480156200017c57600080fd5b5062000187620004a9565b005b3480156200019657600080fd5b5062000156620001a836600462000b10565b620004e4565b348015620001bb57600080fd5b50620000c0678ac7230489e8000081565b348015620001d957600080fd5b506000546001600160a01b031662000156565b348015620001f957600080fd5b50620001876200020b366004620007e8565b6200050f565b3480156200021e57600080fd5b50620000c0620005b8565b3480156200023657600080fd5b506200018762000248366004620007e8565b62000605565b60606003805480602002602001604051908101604052809291908181526020018280548015620002a857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000289575b5050505050905090565b600080620002bf620005b8565b600154909150678ac7230489e8000090620002e59034906001600160a01b0316620006a7565b1015620003135760405163b99e2ab760e01b8152600481018290523460248201526044015b60405180910390fd5b6000898989898989896040516200032a90620007bd565b6200033c979695949392919062000b72565b604051809103906000f08015801562000359573d6000803e3d6000fd5b506001600160a01b0381166000818152600260205260408120805460ff1916600190811790915560038054918201815582527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319169092179091559091508190620003d76000546001600160a01b031690565b6001600160a01b03163460405160006040518083038185875af1925050503d806000811462000423576040519150601f19603f3d011682016040523d82523d6000602084013e62000428565b606091505b50509050806200044b576040516338822c1360e11b815260040160405180910390fd5b8b6001600160a01b0316826001600160a01b03167f570e843f430e9c07b135675740293a86d5c98eb4b737091ea2c5cb61ae9293bf8c8c6040516200049292919062000c1a565b60405180910390a3509a9950505050505050505050565b6000546001600160a01b03163314620004d65760405162461bcd60e51b81526004016200030a9062000c4c565b620004e26000620006e5565b565b60038181548110620004f557600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146200053c5760405162461bcd60e51b81526004016200030a9062000c4c565b6001600160a01b03811662000564576040516307806b6560e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e69060200160405180910390a150565b6001546000908190620005d4906001600160a01b031662000735565b905080620005f3678ac7230489e80000670de0b6b3a764000062000c97565b620005ff919062000cb1565b91505090565b6000546001600160a01b03163314620006325760405162461bcd60e51b81526004016200030a9062000c4c565b6001600160a01b038116620006995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200030a565b620006a481620006e5565b50565b600080620006b58362000735565b90506000670de0b6b3a7640000620006ce868462000c97565b620006da919062000cb1565b925050505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000777573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200079d919062000cef565b505050915050806402540be400620007b6919062000d44565b9392505050565b612e5a8062000d7b83390190565b80356001600160a01b0381168114620007e357600080fd5b919050565b600060208284031215620007fb57600080fd5b620007b682620007cb565b600081518084526020808501945080840160005b83811015620008415781516001600160a01b0316875295820195908201906001016200081a565b509495945050505050565b602081526000620007b6602083018462000806565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620008a357620008a362000861565b604052919050565b600082601f830112620008bd57600080fd5b813567ffffffffffffffff811115620008da57620008da62000861565b620008ef601f8201601f191660200162000877565b8181528460208386010111156200090557600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156200093f576200093f62000861565b5060051b60200190565b600082601f8301126200095b57600080fd5b81356020620009746200096e8362000922565b62000877565b82815260059290921b840181019181810190868411156200099457600080fd5b8286015b84811015620009ba57620009ac81620007cb565b835291830191830162000998565b509695505050505050565b600082601f830112620009d757600080fd5b81356020620009ea6200096e8362000922565b82815260059290921b8401810191818101908684111562000a0a57600080fd5b8286015b84811015620009ba578035835291830191830162000a0e565b600080600080600080600060e0888a03121562000a4357600080fd5b62000a4e88620007cb565b965062000a5e60208901620007cb565b9550604088013567ffffffffffffffff8082111562000a7c57600080fd5b62000a8a8b838c01620008ab565b965060608a013591508082111562000aa157600080fd5b62000aaf8b838c01620008ab565b955060808a0135945060a08a013591508082111562000acd57600080fd5b62000adb8b838c0162000949565b935060c08a013591508082111562000af257600080fd5b5062000b018a828b01620009c5565b91505092959891949750929550565b60006020828403121562000b2357600080fd5b5035919050565b6000815180845260005b8181101562000b525760208185018101518683018201520162000b34565b506000602082860101526020601f19601f83011685010191505092915050565b600060018060a01b03808a1683526020818a168185015260e0604085015262000b9f60e085018a62000b2a565b9150838203606085015262000bb5828962000b2a565b915086608085015283820360a085015262000bd1828762000806565b84810360c0860152855180825282870193509082019060005b8181101562000c085784518352938301939183019160010162000bea565b50909c9b505050505050505050505050565b60408152600062000c2f604083018562000b2a565b828103602084015262000c43818562000b2a565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620006df57620006df62000c81565b60008262000ccf57634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff81168114620007e357600080fd5b600080600080600060a0868803121562000d0857600080fd5b62000d138662000cd4565b945060208601519350604086015192506060860151915062000d386080870162000cd4565b90509295509295909350565b80820260008212600160ff1b8414161562000d635762000d6362000c81565b8181058314821517620006df57620006df62000c8156fe60806040523480156200001157600080fd5b5060405162002e5a38038062002e5a833981016040819052620000349162000733565b600180556200004560008862000352565b6001600160a01b0387166000818152600b60205260409020805460ff19166001179055600780546001600160a01b03191690911790556004620000898682620008ab565b506005620000988582620008ab565b5060028390556001600160a01b03861615620000d9576003805460ff19166001179055600680546001600160a01b0388166001600160a01b03199091161790555b815115620003455781516019811062000105576040516315d558ed60e21b815260040160405180910390fd5b81518114620001275760405163586cb9e160e01b815260040160405180910390fd5b60005b8181101562000342576200017d8482815181106200014c576200014c62000977565b602002602001015184838151811062000169576200016962000977565b6020026020010151620003db60201b60201c565b60405180604001604052808483815181106200019d576200019d62000977565b602002602001015181526020018642620001b891906200098d565b81525060086000868481518110620001d457620001d462000977565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155905050600a8482815181106200022a576200022a62000977565b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b0390931692909217909155600a546200027891906200098d565b6009600086848151811062000291576200029162000977565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550838181518110620002d257620002d262000977565b60200260200101516001600160a01b03167f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c384838151811062000319576200031962000977565b60200260200101516040516200033191815260200190565b60405180910390a26001016200012a565b50505b50505050505050620009af565b6200035e828262000511565b620003d7576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003963390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6703782dace9d9000081108015620003f6575060035460ff16155b156200042b5760405163c281dd3b60e01b8152600481018290526703782dace9d9000060248201526044015b60405180910390fd5b678ac7230489e800008110801562000445575060035460ff165b15620004765760405163c281dd3b60e01b815260048101829052678ac7230489e80000602482015260440162000422565b6001600160a01b0382166200049e57604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b0382166000908152600b602052604090205460ff1615620004d957604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604090205415620003d75760405163186fceb160e21b815260040160405180910390fd5b6000828152602081815260408083206001600160a01b038516845290915290205460ff165b92915050565b80516001600160a01b03811681146200055457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200059a576200059a62000559565b604052919050565b600082601f830112620005b457600080fd5b81516001600160401b03811115620005d057620005d062000559565b6020620005e6601f8301601f191682016200056f565b8281528582848701011115620005fb57600080fd5b60005b838110156200061b578581018301518282018401528201620005fe565b506000928101909101919091529392505050565b60006001600160401b038211156200064b576200064b62000559565b5060051b60200190565b600082601f8301126200066757600080fd5b81516020620006806200067a836200062f565b6200056f565b82815260059290921b84018101918181019086841115620006a057600080fd5b8286015b84811015620006c657620006b8816200053c565b8352918301918301620006a4565b509695505050505050565b600082601f830112620006e357600080fd5b81516020620006f66200067a836200062f565b82815260059290921b840181019181810190868411156200071657600080fd5b8286015b84811015620006c657805183529183019183016200071a565b600080600080600080600060e0888a0312156200074f57600080fd5b6200075a886200053c565b96506200076a602089016200053c565b60408901519096506001600160401b03808211156200078857600080fd5b620007968b838c01620005a2565b965060608a0151915080821115620007ad57600080fd5b620007bb8b838c01620005a2565b955060808a0151945060a08a0151915080821115620007d957600080fd5b620007e78b838c0162000655565b935060c08a0151915080821115620007fe57600080fd5b506200080d8a828b01620006d1565b91505092959891949750929550565b600181811c908216806200083157607f821691505b6020821081036200085257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008a657600081815260208120601f850160051c81016020861015620008815750805b601f850160051c820191505b81811015620008a2578281556001016200088d565b5050505b505050565b81516001600160401b03811115620008c757620008c762000559565b620008df81620008d884546200081c565b8462000858565b602080601f831160018114620009175760008415620008fe5750858301515b600019600386901b1c1916600185901b178555620008a2565b600085815260208120601f198616915b82811015620009485788860151825594840194600190910190840162000927565b5085821015620009675787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b818103818111156200053657634e487b7160e01b600052601160045260246000fd5b61249b80620009bf6000396000f3fe6080604052600436106101d15760003560e01c80636c2acff3116100f757806397e5cc6c11610095578063a217fddf11610064578063a217fddf14610596578063b83cc0db146105ab578063beb12416146105cb578063d547741f146105eb57600080fd5b806397e5cc6c146104f15780639d76ea581461051e5780639de1b23d14610556578063a0b1f2121461057657600080fd5b806385caa917116100d157806385caa91714610471578063885d120f146104915780638c0a2d56146104b157806391d14854146104d157600080fd5b80636c2acff3146104105780637284e4161461043d57806375f12b211461045257600080fd5b80632eb67f531161016f5780634cb404001161013e5780634cb40400146103715780634d62f7ec1461039157806359b6aa71146103b15780636190c9d5146103fa57600080fd5b80632eb67f53146103045780632f2ff15d1461031e5780633519a2f81461033e57806336568abe1461035157600080fd5b80630d12cc68116101ab5780630d12cc6814610256578063116e72db14610276578063248a9ca31461029657806324d7806c146102d457600080fd5b806301ffc9a7146101dd57806302bf8dd91461021257806306fdde031461023457600080fd5b366101d857005b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611e11565b61060b565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b5061023261022d366004611e50565b610642565b005b34801561024057600080fd5b50610249610788565b6040516102099190611ecc565b34801561026257600080fd5b50610232610271366004611fb5565b610816565b34801561028257600080fd5b50610232610291366004612085565b6108d7565b3480156102a257600080fd5b506102c66102b13660046120be565b60009081526020819052604090206001015490565b604051908152602001610209565b3480156102e057600080fd5b506101fd6102ef3660046120d7565b600b6020526000908152604090205460ff1681565b34801561031057600080fd5b506003546101fd9060ff1681565b34801561032a57600080fd5b506102326103393660046120f4565b610a19565b61023261034c3660046120be565b610a43565b34801561035d57600080fd5b5061023261036c3660046120f4565b610b25565b34801561037d57600080fd5b5061023261038c366004612119565b610ba4565b34801561039d57600080fd5b506102c66103ac3660046120d7565b610be6565b3480156103bd57600080fd5b506103e56103cc3660046120d7565b6008602052600090815260409020805460019091015482565b60408051928352602083019190915201610209565b34801561040657600080fd5b506102c660025481565b34801561041c57600080fd5b5061043061042b366004612136565b610ca7565b60405161020991906121ab565b34801561044957600080fd5b50610249610da6565b34801561045e57600080fd5b506003546101fd90610100900460ff1681565b34801561047d57600080fd5b5061023261048c3660046120d7565b610db3565b34801561049d57600080fd5b506102326104ac366004611e50565b610fc0565b3480156104bd57600080fd5b506102326104cc3660046120d7565b61112f565b3480156104dd57600080fd5b506101fd6104ec3660046120f4565b6111ed565b3480156104fd57600080fd5b506102c661050c3660046120d7565b60096020526000908152604090205481565b34801561052a57600080fd5b5060065461053e906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b34801561056257600080fd5b5060075461053e906001600160a01b031681565b34801561058257600080fd5b506102326105913660046121fa565b611216565b3480156105a257600080fd5b506102c6600081565b3480156105b757600080fd5b5061053e6105c63660046120be565b61150d565b3480156105d757600080fd5b506102326105e63660046120d7565b611537565b3480156105f757600080fd5b506102326106063660046120f4565b6116db565b60006001600160e01b03198216637965db0b60e01b148061063c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61064d6000336111ed565b61066a57604051634ca8886760e01b815260040160405180910390fd5b600a5460191161068d576040516315d558ed60e21b815260040160405180910390fd5b6106978282611700565b6040518060400160405280828152602001600254426106b691906122af565b90526001600160a01b0383166000818152600860209081526040822084518155930151600193840155600a80548085018255918190527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890910180546001600160a01b0319169092179091555461072d91906122af565b6001600160a01b038316600081815260096020526040908190209290925590517f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c39061077c9084815260200190565b60405180910390a25050565b60048054610795906122c2565b80601f01602080910402602001604051908101604052809291908181526020018280546107c1906122c2565b801561080e5780601f106107e35761010080835404028352916020019161080e565b820191906000526020600020905b8154815290600101906020018083116107f157829003601f168201915b505050505081565b6108216000336111ed565b61083e57604051634ca8886760e01b815260040160405180910390fd5b815160198110610861576040516315d558ed60e21b815260040160405180910390fd5b815181146108825760405163586cb9e160e01b815260040160405180910390fd5b60005b818110156108d1576108c98482815181106108a2576108a26122f6565b60200260200101518483815181106108bc576108bc6122f6565b6020026020010151610642565b600101610885565b50505050565b6108e26000336111ed565b6108ff57604051634ca8886760e01b815260040160405180910390fd5b8015610994576001600160a01b0382166000908152600860205260409020541561093c57604051632953f2b160e11b815260040160405180910390fd5b610947600083610a19565b6001600160a01b0382166000818152600b6020526040808220805460ff19166001179055517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e3399190a25050565b6007546001600160a01b03908116908316036109c357604051634ca8886760e01b815260040160405180910390fd5b6109ce6000836116db565b6001600160a01b0382166000818152600b6020526040808220805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f9190a25b5050565b600082815260208190526040902060010154610a3481611829565b610a3e8383611833565b505050565b60035460ff16610aa65734600003610a6e576040516327738acf60e21b815260040160405180910390fd5b60405134815233907f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f9060200160405180910390a250565b80600003610ac7576040516327738acf60e21b815260040160405180910390fd5b600654610adf906001600160a01b03163330846118b7565b60065460405182815233916001600160a01b0316907fa17c2a1269d65f89b5c5688ce949fa4a7f59d8fcb9bbbac872d27a142b2b49e79060200160405180910390a35b50565b6001600160a01b0381163314610b9a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610a158282611922565b610baf6000336111ed565b610bcc57604051634ca8886760e01b815260040160405180910390fd5b600380549115156101000261ff0019909216919091179055565b6001600160a01b03811660009081526008602052604081205482908203610c2b5760405163122273e360e11b81526001600160a01b0382166004820152602401610b91565b6001600160a01b0383166000908152600860209081526040808320815180830190925280548252600101549181018290529190610c6890426122af565b9050600254811015610c9c57600254825160009190610c87908461230c565b610c919190612323565b9450610ca192505050565b505191505b50919050565b60608160008167ffffffffffffffff811115610cc557610cc5611edf565b604051908082528060200260200182016040528015610d0a57816020015b6040805180820190915260008082526020820152815260200190600190039081610ce35790505b50905060005b82811015610d9d576000868683818110610d2c57610d2c6122f6565b9050602002016020810190610d4191906120d7565b6001600160a01b0381166000908152600860209081526040918290208251808401909352805483526001015490820152845191925090849084908110610d8957610d896122f6565b602090810291909101015250600101610d10565b50949350505050565b60058054610795906122c2565b610dbe6000336111ed565b610ddb57604051634ca8886760e01b815260040160405180910390fd5b600260015403610e2d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b600260015560006001600160a01b038216610ef95750478015610ef3576007546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610e97576040519150601f19603f3d011682016040523d82523d6000602084013e610e9c565b606091505b5050905080610ebe57604051637d6a86b760e11b815260040160405180910390fd5b6040518281527f8319bfd6f3fd889380af4226ddf22592aecc5ed1c024aacf7b33909259243beb9060200160405180910390a1505b50610fb9565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610f3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f619190612345565b90508015610fb757600754610f83906001600160a01b03848116911683611987565b6040518181527f8319bfd6f3fd889380af4226ddf22592aecc5ed1c024aacf7b33909259243beb9060200160405180910390a15b505b5060018055565b610fcb6000336111ed565b610fe857604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604081205483910361102c5760405163122273e360e11b81526001600160a01b0382166004820152602401610b91565b6703782dace9d9000082108015611046575060035460ff16155b156110755760405163c281dd3b60e01b8152600481018390526703782dace9d900006024820152604401610b91565b678ac7230489e800008210801561108e575060035460ff165b156110bd5760405163c281dd3b60e01b815260048101839052678ac7230489e800006024820152604401610b91565b6001600160a01b03831660009081526008602052604090208281556002546110e590426122af565b60018201556040518381526001600160a01b038516907f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d5906020015b60405180910390a250505050565b6007546001600160a01b0316331461115a5760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166111815760405163b5aaecfd60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556111ab90600090611922565b6111b6600082611833565b6040516001600160a01b038216907fb8121b611a666c4d7c03b96ba9dbc315332dc3f1aa77a22c0a1c162e55c5c32b90600090a250565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3360008181526008602052604081205490036112505760405163122273e360e11b81526001600160a01b0382166004820152602401610b91565b6002600154036112a25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b6002600155600354610100900460ff16156112d057604051632e1aa8d760e01b815260040160405180910390fd5b336000818152600860205260408120916112e990610be6565b90508481101561131657604051638088bb1160e01b81526004810186905260248101829052604401610b91565b6001820154600254429060009061132d90836122af565b90508083101561133b578092505b60035460ff166113e157478881101561137157604051631508de4560e01b8152600481018a905260248101829052604401610b91565b60405160009033908b908381818185875af1925050503d80600081146113b3576040519150601f19603f3d011682016040523d82523d6000602084013e6113b8565b606091505b50509050806113da57604051637d6a86b760e11b815260040160405180910390fd5b5050611494565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561142a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144e9190612345565b90508881101561147b57604051631508de4560e01b8152600481018a905260248101829052604401610b91565b600654611492906001600160a01b0316338b611987565b505b83886114a085856122af565b6114aa919061230c565b6114b49190612323565b6114be908461235e565b600186015560405133907f485f1bb6524c663555797e00171a10f341656e59b02d6b557a0a38ba7d5d9751906114f7908b908b90612371565b60405180910390a2505060018055505050505050565b600a818154811061151d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6115426000336111ed565b61155f57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0381166000908152600860205260408120548291036115a35760405163122273e360e11b81526001600160a01b0382166004820152602401610b91565b6001600160a01b038216600090815260096020526040812054600a80549192916115cf906001906122af565b815481106115df576115df6122f6565b6000918252602090912001546001600160a01b0390811691508416811461164e5780600a8381548110611614576116146122f6565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526009909152604090208290555b600a80548061165f5761165f61238a565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b0386168083526008825260408084208481556001018490556009835280842084905551928352917f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d59101611121565b6000828152602081905260409020600101546116f681611829565b610a3e8383611922565b6703782dace9d900008110801561171a575060035460ff16155b156117495760405163c281dd3b60e01b8152600481018290526703782dace9d900006024820152604401610b91565b678ac7230489e8000081108015611762575060035460ff165b156117915760405163c281dd3b60e01b815260048101829052678ac7230489e800006024820152604401610b91565b6001600160a01b0382166117b857604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b0382166000908152600b602052604090205460ff16156117f257604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604090205415610a155760405163186fceb160e21b815260040160405180910390fd5b610b2281336119b7565b61183d82826111ed565b610a15576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556118733390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6040516001600160a01b03808516602483015283166044820152606481018290526108d19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a1b565b61192c82826111ed565b15610a15576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b038316602482015260448101829052610a3e90849063a9059cbb60e01b906064016118eb565b6119c182826111ed565b610a15576119d9816001600160a01b03166014611aed565b6119e4836020611aed565b6040516020016119f59291906123a0565b60408051601f198184030181529082905262461bcd60e51b8252610b9191600401611ecc565b6000611a70826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c909092919063ffffffff16565b805190915015610a3e5780806020019051810190611a8e9190612415565b610a3e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b91565b60606000611afc83600261230c565b611b0790600261235e565b67ffffffffffffffff811115611b1f57611b1f611edf565b6040519080825280601f01601f191660200182016040528015611b49576020820181803683370190505b509050600360fc1b81600081518110611b6457611b646122f6565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b9357611b936122f6565b60200101906001600160f81b031916908160001a9053506000611bb784600261230c565b611bc290600161235e565b90505b6001811115611c3a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611bf657611bf66122f6565b1a60f81b828281518110611c0c57611c0c6122f6565b60200101906001600160f81b031916908160001a90535060049490941c93611c3381612432565b9050611bc5565b508315611c895760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b91565b9392505050565b6060611c9f8484600085611ca7565b949350505050565b606082471015611d085760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b91565b6001600160a01b0385163b611d5f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b91565b600080866001600160a01b03168587604051611d7b9190612449565b60006040518083038185875af1925050503d8060008114611db8576040519150601f19603f3d011682016040523d82523d6000602084013e611dbd565b606091505b5091509150611dcd828286611dd8565b979650505050505050565b60608315611de7575081611c89565b825115611df75782518084602001fd5b8160405162461bcd60e51b8152600401610b919190611ecc565b600060208284031215611e2357600080fd5b81356001600160e01b031981168114611c8957600080fd5b6001600160a01b0381168114610b2257600080fd5b60008060408385031215611e6357600080fd5b8235611e6e81611e3b565b946020939093013593505050565b60005b83811015611e97578181015183820152602001611e7f565b50506000910152565b60008151808452611eb8816020860160208601611e7c565b601f01601f19169290920160200192915050565b602081526000611c896020830184611ea0565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f1e57611f1e611edf565b604052919050565b600067ffffffffffffffff821115611f4057611f40611edf565b5060051b60200190565b600082601f830112611f5b57600080fd5b81356020611f70611f6b83611f26565b611ef5565b82815260059290921b84018101918181019086841115611f8f57600080fd5b8286015b84811015611faa5780358352918301918301611f93565b509695505050505050565b60008060408385031215611fc857600080fd5b823567ffffffffffffffff80821115611fe057600080fd5b818501915085601f830112611ff457600080fd5b81356020612004611f6b83611f26565b82815260059290921b8401810191818101908984111561202357600080fd5b948201945b8386101561204a57853561203b81611e3b565b82529482019490820190612028565b9650508601359250508082111561206057600080fd5b5061206d85828601611f4a565b9150509250929050565b8015158114610b2257600080fd5b6000806040838503121561209857600080fd5b82356120a381611e3b565b915060208301356120b381612077565b809150509250929050565b6000602082840312156120d057600080fd5b5035919050565b6000602082840312156120e957600080fd5b8135611c8981611e3b565b6000806040838503121561210757600080fd5b8235915060208301356120b381611e3b565b60006020828403121561212b57600080fd5b8135611c8981612077565b6000806020838503121561214957600080fd5b823567ffffffffffffffff8082111561216157600080fd5b818501915085601f83011261217557600080fd5b81358181111561218457600080fd5b8660208260051b850101111561219957600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b828110156121ed578151805185528601518685015292840192908501906001016121c8565b5091979650505050505050565b6000806040838503121561220d57600080fd5b8235915060208084013567ffffffffffffffff8082111561222d57600080fd5b818601915086601f83011261224157600080fd5b81358181111561225357612253611edf565b612265601f8201601f19168501611ef5565b9150808252878482850101111561227b57600080fd5b80848401858401376000848284010152508093505050509250929050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561063c5761063c612299565b600181811c908216806122d657607f821691505b602082108103610ca157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761063c5761063c612299565b60008261234057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561235757600080fd5b5051919050565b8082018082111561063c5761063c612299565b828152604060208201526000611c9f6040830184611ea0565b634e487b7160e01b600052603160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123d8816017850160208801611e7c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612409816028840160208801611e7c565b01602801949350505050565b60006020828403121561242757600080fd5b8151611c8981612077565b60008161244157612441612299565b506000190190565b6000825161245b818460208701611e7c565b919091019291505056fea2646970667358221220917d5d8debc2a50f4aeaef956f9de02fd3ba3b7ddc23588d20521618b751d3c964736f6c63430008140033a264697066735822122080e246c8ae1a19801c21e5c2e65a9d7c5edc90a1f2fe8490289feb6a6a7c640564736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610620000a95760003560e01c806374ed78d0116200006c57806374ed78d01462000189578063858ab90814620001ae5780638da5cb5b14620001cc57806395877f7814620001ec5780639b8a969e1462000211578063f2fde38b146200022957600080fd5b8063114be58514620000ae5780634bdcda9214620000d35780634e73e3551462000118578063595a2dd3146200013f578063715018a6146200016f575b600080fd5b348015620000bb57600080fd5b506003545b6040519081526020015b60405180910390f35b348015620000e057600080fd5b5062000107620000f2366004620007e8565b60026020526000908152604090205460ff1681565b6040519015158152602001620000ca565b3480156200012557600080fd5b50620001306200024e565b604051620000ca91906200084c565b620001566200015036600462000a27565b620002b2565b6040516001600160a01b039091168152602001620000ca565b3480156200017c57600080fd5b5062000187620004a9565b005b3480156200019657600080fd5b5062000156620001a836600462000b10565b620004e4565b348015620001bb57600080fd5b50620000c0678ac7230489e8000081565b348015620001d957600080fd5b506000546001600160a01b031662000156565b348015620001f957600080fd5b50620001876200020b366004620007e8565b6200050f565b3480156200021e57600080fd5b50620000c0620005b8565b3480156200023657600080fd5b506200018762000248366004620007e8565b62000605565b60606003805480602002602001604051908101604052809291908181526020018280548015620002a857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000289575b5050505050905090565b600080620002bf620005b8565b600154909150678ac7230489e8000090620002e59034906001600160a01b0316620006a7565b1015620003135760405163b99e2ab760e01b8152600481018290523460248201526044015b60405180910390fd5b6000898989898989896040516200032a90620007bd565b6200033c979695949392919062000b72565b604051809103906000f08015801562000359573d6000803e3d6000fd5b506001600160a01b0381166000818152600260205260408120805460ff1916600190811790915560038054918201815582527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319169092179091559091508190620003d76000546001600160a01b031690565b6001600160a01b03163460405160006040518083038185875af1925050503d806000811462000423576040519150601f19603f3d011682016040523d82523d6000602084013e62000428565b606091505b50509050806200044b576040516338822c1360e11b815260040160405180910390fd5b8b6001600160a01b0316826001600160a01b03167f570e843f430e9c07b135675740293a86d5c98eb4b737091ea2c5cb61ae9293bf8c8c6040516200049292919062000c1a565b60405180910390a3509a9950505050505050505050565b6000546001600160a01b03163314620004d65760405162461bcd60e51b81526004016200030a9062000c4c565b620004e26000620006e5565b565b60038181548110620004f557600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146200053c5760405162461bcd60e51b81526004016200030a9062000c4c565b6001600160a01b03811662000564576040516307806b6560e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e69060200160405180910390a150565b6001546000908190620005d4906001600160a01b031662000735565b905080620005f3678ac7230489e80000670de0b6b3a764000062000c97565b620005ff919062000cb1565b91505090565b6000546001600160a01b03163314620006325760405162461bcd60e51b81526004016200030a9062000c4c565b6001600160a01b038116620006995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200030a565b620006a481620006e5565b50565b600080620006b58362000735565b90506000670de0b6b3a7640000620006ce868462000c97565b620006da919062000cb1565b925050505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000777573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200079d919062000cef565b505050915050806402540be400620007b6919062000d44565b9392505050565b612e5a8062000d7b83390190565b80356001600160a01b0381168114620007e357600080fd5b919050565b600060208284031215620007fb57600080fd5b620007b682620007cb565b600081518084526020808501945080840160005b83811015620008415781516001600160a01b0316875295820195908201906001016200081a565b509495945050505050565b602081526000620007b6602083018462000806565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620008a357620008a362000861565b604052919050565b600082601f830112620008bd57600080fd5b813567ffffffffffffffff811115620008da57620008da62000861565b620008ef601f8201601f191660200162000877565b8181528460208386010111156200090557600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156200093f576200093f62000861565b5060051b60200190565b600082601f8301126200095b57600080fd5b81356020620009746200096e8362000922565b62000877565b82815260059290921b840181019181810190868411156200099457600080fd5b8286015b84811015620009ba57620009ac81620007cb565b835291830191830162000998565b509695505050505050565b600082601f830112620009d757600080fd5b81356020620009ea6200096e8362000922565b82815260059290921b8401810191818101908684111562000a0a57600080fd5b8286015b84811015620009ba578035835291830191830162000a0e565b600080600080600080600060e0888a03121562000a4357600080fd5b62000a4e88620007cb565b965062000a5e60208901620007cb565b9550604088013567ffffffffffffffff8082111562000a7c57600080fd5b62000a8a8b838c01620008ab565b965060608a013591508082111562000aa157600080fd5b62000aaf8b838c01620008ab565b955060808a0135945060a08a013591508082111562000acd57600080fd5b62000adb8b838c0162000949565b935060c08a013591508082111562000af257600080fd5b5062000b018a828b01620009c5565b91505092959891949750929550565b60006020828403121562000b2357600080fd5b5035919050565b6000815180845260005b8181101562000b525760208185018101518683018201520162000b34565b506000602082860101526020601f19601f83011685010191505092915050565b600060018060a01b03808a1683526020818a168185015260e0604085015262000b9f60e085018a62000b2a565b9150838203606085015262000bb5828962000b2a565b915086608085015283820360a085015262000bd1828762000806565b84810360c0860152855180825282870193509082019060005b8181101562000c085784518352938301939183019160010162000bea565b50909c9b505050505050505050505050565b60408152600062000c2f604083018562000b2a565b828103602084015262000c43818562000b2a565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620006df57620006df62000c81565b60008262000ccf57634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff81168114620007e357600080fd5b600080600080600060a0868803121562000d0857600080fd5b62000d138662000cd4565b945060208601519350604086015192506060860151915062000d386080870162000cd4565b90509295509295909350565b80820260008212600160ff1b8414161562000d635762000d6362000c81565b8181058314821517620006df57620006df62000c8156fe60806040523480156200001157600080fd5b5060405162002e5a38038062002e5a833981016040819052620000349162000733565b600180556200004560008862000352565b6001600160a01b0387166000818152600b60205260409020805460ff19166001179055600780546001600160a01b03191690911790556004620000898682620008ab565b506005620000988582620008ab565b5060028390556001600160a01b03861615620000d9576003805460ff19166001179055600680546001600160a01b0388166001600160a01b03199091161790555b815115620003455781516019811062000105576040516315d558ed60e21b815260040160405180910390fd5b81518114620001275760405163586cb9e160e01b815260040160405180910390fd5b60005b8181101562000342576200017d8482815181106200014c576200014c62000977565b602002602001015184838151811062000169576200016962000977565b6020026020010151620003db60201b60201c565b60405180604001604052808483815181106200019d576200019d62000977565b602002602001015181526020018642620001b891906200098d565b81525060086000868481518110620001d457620001d462000977565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155905050600a8482815181106200022a576200022a62000977565b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b0390931692909217909155600a546200027891906200098d565b6009600086848151811062000291576200029162000977565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550838181518110620002d257620002d262000977565b60200260200101516001600160a01b03167f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c384838151811062000319576200031962000977565b60200260200101516040516200033191815260200190565b60405180910390a26001016200012a565b50505b50505050505050620009af565b6200035e828262000511565b620003d7576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003963390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6703782dace9d9000081108015620003f6575060035460ff16155b156200042b5760405163c281dd3b60e01b8152600481018290526703782dace9d9000060248201526044015b60405180910390fd5b678ac7230489e800008110801562000445575060035460ff165b15620004765760405163c281dd3b60e01b815260048101829052678ac7230489e80000602482015260440162000422565b6001600160a01b0382166200049e57604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b0382166000908152600b602052604090205460ff1615620004d957604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604090205415620003d75760405163186fceb160e21b815260040160405180910390fd5b6000828152602081815260408083206001600160a01b038516845290915290205460ff165b92915050565b80516001600160a01b03811681146200055457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200059a576200059a62000559565b604052919050565b600082601f830112620005b457600080fd5b81516001600160401b03811115620005d057620005d062000559565b6020620005e6601f8301601f191682016200056f565b8281528582848701011115620005fb57600080fd5b60005b838110156200061b578581018301518282018401528201620005fe565b506000928101909101919091529392505050565b60006001600160401b038211156200064b576200064b62000559565b5060051b60200190565b600082601f8301126200066757600080fd5b81516020620006806200067a836200062f565b6200056f565b82815260059290921b84018101918181019086841115620006a057600080fd5b8286015b84811015620006c657620006b8816200053c565b8352918301918301620006a4565b509695505050505050565b600082601f830112620006e357600080fd5b81516020620006f66200067a836200062f565b82815260059290921b840181019181810190868411156200071657600080fd5b8286015b84811015620006c657805183529183019183016200071a565b600080600080600080600060e0888a0312156200074f57600080fd5b6200075a886200053c565b96506200076a602089016200053c565b60408901519096506001600160401b03808211156200078857600080fd5b620007968b838c01620005a2565b965060608a0151915080821115620007ad57600080fd5b620007bb8b838c01620005a2565b955060808a0151945060a08a0151915080821115620007d957600080fd5b620007e78b838c0162000655565b935060c08a0151915080821115620007fe57600080fd5b506200080d8a828b01620006d1565b91505092959891949750929550565b600181811c908216806200083157607f821691505b6020821081036200085257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008a657600081815260208120601f850160051c81016020861015620008815750805b601f850160051c820191505b81811015620008a2578281556001016200088d565b5050505b505050565b81516001600160401b03811115620008c757620008c762000559565b620008df81620008d884546200081c565b8462000858565b602080601f831160018114620009175760008415620008fe5750858301515b600019600386901b1c1916600185901b178555620008a2565b600085815260208120601f198616915b82811015620009485788860151825594840194600190910190840162000927565b5085821015620009675787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b818103818111156200053657634e487b7160e01b600052601160045260246000fd5b61249b80620009bf6000396000f3fe6080604052600436106101d15760003560e01c80636c2acff3116100f757806397e5cc6c11610095578063a217fddf11610064578063a217fddf14610596578063b83cc0db146105ab578063beb12416146105cb578063d547741f146105eb57600080fd5b806397e5cc6c146104f15780639d76ea581461051e5780639de1b23d14610556578063a0b1f2121461057657600080fd5b806385caa917116100d157806385caa91714610471578063885d120f146104915780638c0a2d56146104b157806391d14854146104d157600080fd5b80636c2acff3146104105780637284e4161461043d57806375f12b211461045257600080fd5b80632eb67f531161016f5780634cb404001161013e5780634cb40400146103715780634d62f7ec1461039157806359b6aa71146103b15780636190c9d5146103fa57600080fd5b80632eb67f53146103045780632f2ff15d1461031e5780633519a2f81461033e57806336568abe1461035157600080fd5b80630d12cc68116101ab5780630d12cc6814610256578063116e72db14610276578063248a9ca31461029657806324d7806c146102d457600080fd5b806301ffc9a7146101dd57806302bf8dd91461021257806306fdde031461023457600080fd5b366101d857005b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611e11565b61060b565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b5061023261022d366004611e50565b610642565b005b34801561024057600080fd5b50610249610788565b6040516102099190611ecc565b34801561026257600080fd5b50610232610271366004611fb5565b610816565b34801561028257600080fd5b50610232610291366004612085565b6108d7565b3480156102a257600080fd5b506102c66102b13660046120be565b60009081526020819052604090206001015490565b604051908152602001610209565b3480156102e057600080fd5b506101fd6102ef3660046120d7565b600b6020526000908152604090205460ff1681565b34801561031057600080fd5b506003546101fd9060ff1681565b34801561032a57600080fd5b506102326103393660046120f4565b610a19565b61023261034c3660046120be565b610a43565b34801561035d57600080fd5b5061023261036c3660046120f4565b610b25565b34801561037d57600080fd5b5061023261038c366004612119565b610ba4565b34801561039d57600080fd5b506102c66103ac3660046120d7565b610be6565b3480156103bd57600080fd5b506103e56103cc3660046120d7565b6008602052600090815260409020805460019091015482565b60408051928352602083019190915201610209565b34801561040657600080fd5b506102c660025481565b34801561041c57600080fd5b5061043061042b366004612136565b610ca7565b60405161020991906121ab565b34801561044957600080fd5b50610249610da6565b34801561045e57600080fd5b506003546101fd90610100900460ff1681565b34801561047d57600080fd5b5061023261048c3660046120d7565b610db3565b34801561049d57600080fd5b506102326104ac366004611e50565b610fc0565b3480156104bd57600080fd5b506102326104cc3660046120d7565b61112f565b3480156104dd57600080fd5b506101fd6104ec3660046120f4565b6111ed565b3480156104fd57600080fd5b506102c661050c3660046120d7565b60096020526000908152604090205481565b34801561052a57600080fd5b5060065461053e906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b34801561056257600080fd5b5060075461053e906001600160a01b031681565b34801561058257600080fd5b506102326105913660046121fa565b611216565b3480156105a257600080fd5b506102c6600081565b3480156105b757600080fd5b5061053e6105c63660046120be565b61150d565b3480156105d757600080fd5b506102326105e63660046120d7565b611537565b3480156105f757600080fd5b506102326106063660046120f4565b6116db565b60006001600160e01b03198216637965db0b60e01b148061063c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61064d6000336111ed565b61066a57604051634ca8886760e01b815260040160405180910390fd5b600a5460191161068d576040516315d558ed60e21b815260040160405180910390fd5b6106978282611700565b6040518060400160405280828152602001600254426106b691906122af565b90526001600160a01b0383166000818152600860209081526040822084518155930151600193840155600a80548085018255918190527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890910180546001600160a01b0319169092179091555461072d91906122af565b6001600160a01b038316600081815260096020526040908190209290925590517f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c39061077c9084815260200190565b60405180910390a25050565b60048054610795906122c2565b80601f01602080910402602001604051908101604052809291908181526020018280546107c1906122c2565b801561080e5780601f106107e35761010080835404028352916020019161080e565b820191906000526020600020905b8154815290600101906020018083116107f157829003601f168201915b505050505081565b6108216000336111ed565b61083e57604051634ca8886760e01b815260040160405180910390fd5b815160198110610861576040516315d558ed60e21b815260040160405180910390fd5b815181146108825760405163586cb9e160e01b815260040160405180910390fd5b60005b818110156108d1576108c98482815181106108a2576108a26122f6565b60200260200101518483815181106108bc576108bc6122f6565b6020026020010151610642565b600101610885565b50505050565b6108e26000336111ed565b6108ff57604051634ca8886760e01b815260040160405180910390fd5b8015610994576001600160a01b0382166000908152600860205260409020541561093c57604051632953f2b160e11b815260040160405180910390fd5b610947600083610a19565b6001600160a01b0382166000818152600b6020526040808220805460ff19166001179055517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e3399190a25050565b6007546001600160a01b03908116908316036109c357604051634ca8886760e01b815260040160405180910390fd5b6109ce6000836116db565b6001600160a01b0382166000818152600b6020526040808220805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f9190a25b5050565b600082815260208190526040902060010154610a3481611829565b610a3e8383611833565b505050565b60035460ff16610aa65734600003610a6e576040516327738acf60e21b815260040160405180910390fd5b60405134815233907f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f9060200160405180910390a250565b80600003610ac7576040516327738acf60e21b815260040160405180910390fd5b600654610adf906001600160a01b03163330846118b7565b60065460405182815233916001600160a01b0316907fa17c2a1269d65f89b5c5688ce949fa4a7f59d8fcb9bbbac872d27a142b2b49e79060200160405180910390a35b50565b6001600160a01b0381163314610b9a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610a158282611922565b610baf6000336111ed565b610bcc57604051634ca8886760e01b815260040160405180910390fd5b600380549115156101000261ff0019909216919091179055565b6001600160a01b03811660009081526008602052604081205482908203610c2b5760405163122273e360e11b81526001600160a01b0382166004820152602401610b91565b6001600160a01b0383166000908152600860209081526040808320815180830190925280548252600101549181018290529190610c6890426122af565b9050600254811015610c9c57600254825160009190610c87908461230c565b610c919190612323565b9450610ca192505050565b505191505b50919050565b60608160008167ffffffffffffffff811115610cc557610cc5611edf565b604051908082528060200260200182016040528015610d0a57816020015b6040805180820190915260008082526020820152815260200190600190039081610ce35790505b50905060005b82811015610d9d576000868683818110610d2c57610d2c6122f6565b9050602002016020810190610d4191906120d7565b6001600160a01b0381166000908152600860209081526040918290208251808401909352805483526001015490820152845191925090849084908110610d8957610d896122f6565b602090810291909101015250600101610d10565b50949350505050565b60058054610795906122c2565b610dbe6000336111ed565b610ddb57604051634ca8886760e01b815260040160405180910390fd5b600260015403610e2d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b600260015560006001600160a01b038216610ef95750478015610ef3576007546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610e97576040519150601f19603f3d011682016040523d82523d6000602084013e610e9c565b606091505b5050905080610ebe57604051637d6a86b760e11b815260040160405180910390fd5b6040518281527f8319bfd6f3fd889380af4226ddf22592aecc5ed1c024aacf7b33909259243beb9060200160405180910390a1505b50610fb9565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610f3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f619190612345565b90508015610fb757600754610f83906001600160a01b03848116911683611987565b6040518181527f8319bfd6f3fd889380af4226ddf22592aecc5ed1c024aacf7b33909259243beb9060200160405180910390a15b505b5060018055565b610fcb6000336111ed565b610fe857604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604081205483910361102c5760405163122273e360e11b81526001600160a01b0382166004820152602401610b91565b6703782dace9d9000082108015611046575060035460ff16155b156110755760405163c281dd3b60e01b8152600481018390526703782dace9d900006024820152604401610b91565b678ac7230489e800008210801561108e575060035460ff165b156110bd5760405163c281dd3b60e01b815260048101839052678ac7230489e800006024820152604401610b91565b6001600160a01b03831660009081526008602052604090208281556002546110e590426122af565b60018201556040518381526001600160a01b038516907f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d5906020015b60405180910390a250505050565b6007546001600160a01b0316331461115a5760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166111815760405163b5aaecfd60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556111ab90600090611922565b6111b6600082611833565b6040516001600160a01b038216907fb8121b611a666c4d7c03b96ba9dbc315332dc3f1aa77a22c0a1c162e55c5c32b90600090a250565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3360008181526008602052604081205490036112505760405163122273e360e11b81526001600160a01b0382166004820152602401610b91565b6002600154036112a25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b6002600155600354610100900460ff16156112d057604051632e1aa8d760e01b815260040160405180910390fd5b336000818152600860205260408120916112e990610be6565b90508481101561131657604051638088bb1160e01b81526004810186905260248101829052604401610b91565b6001820154600254429060009061132d90836122af565b90508083101561133b578092505b60035460ff166113e157478881101561137157604051631508de4560e01b8152600481018a905260248101829052604401610b91565b60405160009033908b908381818185875af1925050503d80600081146113b3576040519150601f19603f3d011682016040523d82523d6000602084013e6113b8565b606091505b50509050806113da57604051637d6a86b760e11b815260040160405180910390fd5b5050611494565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561142a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144e9190612345565b90508881101561147b57604051631508de4560e01b8152600481018a905260248101829052604401610b91565b600654611492906001600160a01b0316338b611987565b505b83886114a085856122af565b6114aa919061230c565b6114b49190612323565b6114be908461235e565b600186015560405133907f485f1bb6524c663555797e00171a10f341656e59b02d6b557a0a38ba7d5d9751906114f7908b908b90612371565b60405180910390a2505060018055505050505050565b600a818154811061151d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6115426000336111ed565b61155f57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0381166000908152600860205260408120548291036115a35760405163122273e360e11b81526001600160a01b0382166004820152602401610b91565b6001600160a01b038216600090815260096020526040812054600a80549192916115cf906001906122af565b815481106115df576115df6122f6565b6000918252602090912001546001600160a01b0390811691508416811461164e5780600a8381548110611614576116146122f6565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526009909152604090208290555b600a80548061165f5761165f61238a565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b0386168083526008825260408084208481556001018490556009835280842084905551928352917f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d59101611121565b6000828152602081905260409020600101546116f681611829565b610a3e8383611922565b6703782dace9d900008110801561171a575060035460ff16155b156117495760405163c281dd3b60e01b8152600481018290526703782dace9d900006024820152604401610b91565b678ac7230489e8000081108015611762575060035460ff165b156117915760405163c281dd3b60e01b815260048101829052678ac7230489e800006024820152604401610b91565b6001600160a01b0382166117b857604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b0382166000908152600b602052604090205460ff16156117f257604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604090205415610a155760405163186fceb160e21b815260040160405180910390fd5b610b2281336119b7565b61183d82826111ed565b610a15576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556118733390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6040516001600160a01b03808516602483015283166044820152606481018290526108d19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a1b565b61192c82826111ed565b15610a15576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b038316602482015260448101829052610a3e90849063a9059cbb60e01b906064016118eb565b6119c182826111ed565b610a15576119d9816001600160a01b03166014611aed565b6119e4836020611aed565b6040516020016119f59291906123a0565b60408051601f198184030181529082905262461bcd60e51b8252610b9191600401611ecc565b6000611a70826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c909092919063ffffffff16565b805190915015610a3e5780806020019051810190611a8e9190612415565b610a3e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b91565b60606000611afc83600261230c565b611b0790600261235e565b67ffffffffffffffff811115611b1f57611b1f611edf565b6040519080825280601f01601f191660200182016040528015611b49576020820181803683370190505b509050600360fc1b81600081518110611b6457611b646122f6565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b9357611b936122f6565b60200101906001600160f81b031916908160001a9053506000611bb784600261230c565b611bc290600161235e565b90505b6001811115611c3a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611bf657611bf66122f6565b1a60f81b828281518110611c0c57611c0c6122f6565b60200101906001600160f81b031916908160001a90535060049490941c93611c3381612432565b9050611bc5565b508315611c895760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b91565b9392505050565b6060611c9f8484600085611ca7565b949350505050565b606082471015611d085760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b91565b6001600160a01b0385163b611d5f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b91565b600080866001600160a01b03168587604051611d7b9190612449565b60006040518083038185875af1925050503d8060008114611db8576040519150601f19603f3d011682016040523d82523d6000602084013e611dbd565b606091505b5091509150611dcd828286611dd8565b979650505050505050565b60608315611de7575081611c89565b825115611df75782518084602001fd5b8160405162461bcd60e51b8152600401610b919190611ecc565b600060208284031215611e2357600080fd5b81356001600160e01b031981168114611c8957600080fd5b6001600160a01b0381168114610b2257600080fd5b60008060408385031215611e6357600080fd5b8235611e6e81611e3b565b946020939093013593505050565b60005b83811015611e97578181015183820152602001611e7f565b50506000910152565b60008151808452611eb8816020860160208601611e7c565b601f01601f19169290920160200192915050565b602081526000611c896020830184611ea0565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f1e57611f1e611edf565b604052919050565b600067ffffffffffffffff821115611f4057611f40611edf565b5060051b60200190565b600082601f830112611f5b57600080fd5b81356020611f70611f6b83611f26565b611ef5565b82815260059290921b84018101918181019086841115611f8f57600080fd5b8286015b84811015611faa5780358352918301918301611f93565b509695505050505050565b60008060408385031215611fc857600080fd5b823567ffffffffffffffff80821115611fe057600080fd5b818501915085601f830112611ff457600080fd5b81356020612004611f6b83611f26565b82815260059290921b8401810191818101908984111561202357600080fd5b948201945b8386101561204a57853561203b81611e3b565b82529482019490820190612028565b9650508601359250508082111561206057600080fd5b5061206d85828601611f4a565b9150509250929050565b8015158114610b2257600080fd5b6000806040838503121561209857600080fd5b82356120a381611e3b565b915060208301356120b381612077565b809150509250929050565b6000602082840312156120d057600080fd5b5035919050565b6000602082840312156120e957600080fd5b8135611c8981611e3b565b6000806040838503121561210757600080fd5b8235915060208301356120b381611e3b565b60006020828403121561212b57600080fd5b8135611c8981612077565b6000806020838503121561214957600080fd5b823567ffffffffffffffff8082111561216157600080fd5b818501915085601f83011261217557600080fd5b81358181111561218457600080fd5b8660208260051b850101111561219957600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b828110156121ed578151805185528601518685015292840192908501906001016121c8565b5091979650505050505050565b6000806040838503121561220d57600080fd5b8235915060208084013567ffffffffffffffff8082111561222d57600080fd5b818601915086601f83011261224157600080fd5b81358181111561225357612253611edf565b612265601f8201601f19168501611ef5565b9150808252878482850101111561227b57600080fd5b80848401858401376000848284010152508093505050509250929050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561063c5761063c612299565b600181811c908216806122d657607f821691505b602082108103610ca157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761063c5761063c612299565b60008261234057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561235757600080fd5b5051919050565b8082018082111561063c5761063c612299565b828152604060208201526000611c9f6040830184611ea0565b634e487b7160e01b600052603160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123d8816017850160208801611e7c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612409816028840160208801611e7c565b01602801949350505050565b60006020828403121561242757600080fd5b8151611c8981612077565b60008161244157612441612299565b506000190190565b6000825161245b818460208701611e7c565b919091019291505056fea2646970667358221220917d5d8debc2a50f4aeaef956f9de02fd3ba3b7ddc23588d20521618b751d3c964736f6c63430008140033a264697066735822122080e246c8ae1a19801c21e5c2e65a9d7c5edc90a1f2fe8490289feb6a6a7c640564736f6c63430008140033",
  "devdoc": {
    "details": "Factory contract for deploying new Cohort contracts with a creation fee",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor sets the price feed address for ETH/USD conversion",
        "params": {
          "_priceFeed": "Chainlink price feed address for ETH/USD"
        }
      },
      "createCohort(address,address,string,string,uint256,address[],uint256[])": {
        "details": "Creates a new Cohort contract",
        "params": {
          "_name": "Name of the cohort",
          "_primaryAdmin": "Address of the primary admin",
          "_tokenAddress": "Address of ERC20 token (zero address for ETH)"
        },
        "returns": {
          "_0": "Address of the newly created cohort"
        }
      },
      "getAllCohorts()": {
        "details": "Gets all created cohorts",
        "returns": {
          "_0": "Array of cohort addresses"
        }
      },
      "getRequiredEthAmount()": {
        "details": "Calculates required ETH amount for creation fee",
        "returns": {
          "_0": "Required ETH amount in wei"
        }
      },
      "getTotalCohorts()": {
        "details": "Gets the total number of created cohorts",
        "returns": {
          "_0": "Number of cohorts"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePriceFeed(address)": {
        "details": "Updates the price feed address",
        "params": {
          "_newPriceFeed": "New price feed address"
        }
      }
    },
    "title": "CohortFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 446,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2648,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 2657,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "isCohort",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2660,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "cohorts",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
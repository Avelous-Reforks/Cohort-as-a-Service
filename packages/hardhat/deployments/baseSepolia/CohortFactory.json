{
  "address": "0xc216d687B2Ca8c97c1840B4f4C209a15322CE59f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FailedToSendETH",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        }
      ],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceFeedInvalid",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "cohortAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "primaryAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "CohortCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPriceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREATION_FEE_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cohorts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primaryAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "createCohort",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCohorts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequiredEthAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCohorts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCohort",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPriceFeed",
          "type": "address"
        }
      ],
      "name": "updatePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x790444136bb0bc12e4ddb2829c7730735e998b5077ad4210b20b6f278aedd5f4",
  "receipt": {
    "to": null,
    "from": "0x5F1b4cFfD8B7B3653197149bC046C493060B0bd7",
    "contractAddress": "0xc216d687B2Ca8c97c1840B4f4C209a15322CE59f",
    "transactionIndex": 28,
    "gasUsed": "2699440",
    "logsBloom": "0x
    "blockHash": "0xb182b6fc22de0950bd5c5d11d2ff9a4996e121cee99711e91fce424deb8d4844",
    "transactionHash": "0x790444136bb0bc12e4ddb2829c7730735e998b5077ad4210b20b6f278aedd5f4",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 21452403,
        "transactionHash": "0x790444136bb0bc12e4ddb2829c7730735e998b5077ad4210b20b6f278aedd5f4",
        "address": "0xc216d687B2Ca8c97c1840B4f4C209a15322CE59f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f1b4cffd8b7b3653197149bc046c493060b0bd7"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0xb182b6fc22de0950bd5c5d11d2ff9a4996e121cee99711e91fce424deb8d4844"
      }
    ],
    "blockNumber": 21452403,
    "cumulativeGasUsed": "6573570",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4aDC67696bA383F43DD60A9e78F2C97Fbbfc7cb1"
  ],
  "numDeployments": 6,
  "solcInputHash": "02671123a5af61869675defb31a74054",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedToSendETH\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeedInvalid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cohortAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primaryAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"CohortCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPriceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATION_FEE_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cohorts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primaryAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"createCohort\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCohorts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCohorts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCohort\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPriceFeed\",\"type\":\"address\"}],\"name\":\"updatePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Factory contract for deploying new Cohort contracts with a creation fee\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor sets the price feed address for ETH/USD conversion\",\"params\":{\"_priceFeed\":\"Chainlink price feed address for ETH/USD\"}},\"createCohort(address,address,string,string)\":{\"details\":\"Creates a new Cohort contract\",\"params\":{\"_name\":\"Name of the cohort\",\"_primaryAdmin\":\"Address of the primary admin\",\"_tokenAddress\":\"Address of ERC20 token (zero address for ETH)\"},\"returns\":{\"_0\":\"Address of the newly created cohort\"}},\"getAllCohorts()\":{\"details\":\"Gets all created cohorts\",\"returns\":{\"_0\":\"Array of cohort addresses\"}},\"getRequiredEthAmount()\":{\"details\":\"Calculates required ETH amount for creation fee\",\"returns\":{\"_0\":\"Required ETH amount in wei\"}},\"getTotalCohorts()\":{\"details\":\"Gets the total number of created cohorts\",\"returns\":{\"_0\":\"Number of cohorts\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePriceFeed(address)\":{\"details\":\"Updates the price feed address\",\"params\":{\"_newPriceFeed\":\"New price feed address\"}}},\"title\":\"CohortFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CohortFactory.sol\":\"CohortFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Cohort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n//A smart contract for streaming Eth or ERC20 tokens to creators\\n//This is intended for research and development purposes only. Use this contract at your own risk and discretion.\\n//Pipoca\\n\\n// Custom errors\\nerror NoValueSent();\\nerror InsufficientFundsInContract(uint256 requested, uint256 available);\\nerror NoActiveFlowForCreator(address creator);\\nerror InsufficientInFlow(uint256 requested, uint256 available);\\nerror EtherSendingFailed();\\nerror LengthsMismatch();\\nerror InvalidCreatorAddress();\\nerror CreatorAlreadyExists();\\nerror ContractIsStopped();\\nerror MaxCreatorsReached();\\nerror AccessDenied();\\nerror InvalidTokenAddress();\\nerror NoFundsInContract();\\nerror ERC20TransferFailed();\\nerror ERC20SendingFailed(address token, address recipient);\\nerror ERC20FundsTransferFailed(address token, address to, uint256 amount);\\nerror BelowMinimumCap(uint256 provided, uint256 minimum);\\nerror NotAuthorized();\\nerror InvalidNewAdminAddress();\\n\\ncontract Cohort is AccessControl, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Fixed cycle, max creators and minimum cap\\n    uint256 constant CYCLE = 30 days;\\n    uint256 constant MAXCREATORS = 25;\\n    uint256 constant MINIMUM_CAP = 0.25 ether;\\n    uint256 constant MINIMUM_ERC20_CAP = 10 * 10 ** 18;\\n\\n    // ERC20 support\\n    bool public isERC20;\\n\\n    // Emergency mode variable\\n    bool public stopped;\\n\\n    // Cohort name\\n    string public name;\\n\\n    // Cohort description\\n    string public description;\\n\\n    // Token address for ERC20 support\\n    address public tokenAddress;\\n\\n    // Primary admin for remaining balances\\n    address public primaryAdmin;\\n\\n    // Modifier to check for admin permissions\\n    modifier onlyAdmin() {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AccessDenied();\\n        _;\\n    }\\n\\n    // Constructor to setup admin role and initial creators\\n    constructor(address _primaryAdmin, address _tokenAddress, string memory _name, string memory _description) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _primaryAdmin);\\n        isAdmin[_primaryAdmin] = true;\\n        primaryAdmin = _primaryAdmin;\\n        name = _name;\\n        description = _description;\\n\\n        if (_tokenAddress != address(0)) {\\n            isERC20 = true;\\n            tokenAddress = _tokenAddress;\\n        }\\n    }\\n\\n    // Function to modify admin roles\\n    function modifyAdminRole(address adminAddress, bool shouldGrant) public onlyAdmin {\\n        if (shouldGrant) {\\n            if (flowingCreators[adminAddress].cap != 0) revert InvalidCreatorAddress();\\n            grantRole(DEFAULT_ADMIN_ROLE, adminAddress);\\n            isAdmin[adminAddress] = true;\\n            emit AdminAdded(adminAddress);\\n        } else {\\n            if (adminAddress == primaryAdmin) revert AccessDenied();\\n            revokeRole(DEFAULT_ADMIN_ROLE, adminAddress);\\n            isAdmin[adminAddress] = false;\\n            emit AdminRemoved(adminAddress);\\n        }\\n    }\\n\\n    // Struct to store information about creator's flow\\n    struct CreatorFlowInfo {\\n        uint256 cap; // Maximum amount of funds that can be withdrawn in a cycle\\n        uint256 last; // The timestamp of the last withdrawal\\n    }\\n\\n    // Function to transfer primary admin role\\n    function transferPrimaryAdmin(address newPrimaryAdmin) public {\\n        if (msg.sender != primaryAdmin) revert NotAuthorized();\\n        if (newPrimaryAdmin == address(0)) revert InvalidNewAdminAddress();\\n\\n        primaryAdmin = newPrimaryAdmin;\\n\\n        _revokeRole(DEFAULT_ADMIN_ROLE, primaryAdmin);\\n        _grantRole(DEFAULT_ADMIN_ROLE, newPrimaryAdmin);\\n\\n        emit PrimaryAdminTransferred(newPrimaryAdmin);\\n    }\\n\\n    // Mapping to store the flow info of each creator\\n    mapping(address => CreatorFlowInfo) public flowingCreators;\\n    // Mapping to store the index of each creator in the activeCreators array\\n    mapping(address => uint256) public creatorIndex;\\n    // Array to store the addresses of all active creators\\n    address[] public activeCreators;\\n    // Mapping to see if an address is admin\\n    mapping(address => bool) public isAdmin;\\n\\n    // Declare events to log various activities\\n    event FundsReceived(address indexed from, uint256 amount);\\n    event Withdraw(address indexed to, uint256 amount, string reason);\\n    event AddBuilder(address indexed to, uint256 amount);\\n    event UpdateBuilder(address indexed to, uint256 amount);\\n    event AdminAdded(address indexed to);\\n    event AdminRemoved(address indexed to);\\n    event AgreementDrained(uint256 amount);\\n    event PrimaryAdminTransferred(address indexed newAdmin);\\n    event ERC20FundsReceived(address indexed token, address indexed from, uint256 amount);\\n\\n    // Check if a flow for a creator is active\\n    modifier isFlowActive(address _creator) {\\n        if (flowingCreators[_creator].cap == 0) revert NoActiveFlowForCreator(_creator);\\n        _;\\n    }\\n\\n    // Check if the contract is stopped\\n    modifier stopInEmergency() {\\n        if (stopped) revert ContractIsStopped();\\n        _;\\n    }\\n\\n    // Fund contract\\n    function fundContract(uint256 _amount) public payable {\\n        if (!isERC20) {\\n            if (msg.value == 0) revert NoValueSent();\\n            emit FundsReceived(msg.sender, msg.value);\\n        } else {\\n            if (_amount == 0) revert NoValueSent();\\n\\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            emit ERC20FundsReceived(tokenAddress, msg.sender, _amount);\\n        }\\n    }\\n\\n    // Enable or disable emergency mode\\n    function emergencyMode(bool _enable) public onlyAdmin {\\n        stopped = _enable;\\n    }\\n\\n    // Get all creators' data.\\n    function allCreatorsData(address[] calldata _creators) public view returns (CreatorFlowInfo[] memory) {\\n        uint256 creatorLength = _creators.length;\\n        CreatorFlowInfo[] memory result = new CreatorFlowInfo[](creatorLength);\\n        for (uint256 i = 0; i < creatorLength; ) {\\n            address creatorAddress = _creators[i];\\n            result[i] = flowingCreators[creatorAddress];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // Get the available amount for a creator.\\n    function availableCreatorAmount(address _creator) public view isFlowActive(_creator) returns (uint256) {\\n        CreatorFlowInfo memory creatorFlow = flowingCreators[_creator];\\n        uint256 timePassed = block.timestamp - creatorFlow.last;\\n\\n        if (timePassed < CYCLE) {\\n            uint256 availableAmount = (timePassed * creatorFlow.cap) / CYCLE;\\n            return availableAmount;\\n        } else {\\n            return creatorFlow.cap;\\n        }\\n    }\\n\\n    // Add a new creator's flow. No more than 25 creators are allowed.\\n    function addCreatorFlow(address payable _creator, uint256 _cap) public onlyAdmin {\\n        // Check for maximum creators.\\n        if (activeCreators.length >= MAXCREATORS) revert MaxCreatorsReached();\\n\\n        validateCreatorInput(_creator, _cap);\\n        flowingCreators[_creator] = CreatorFlowInfo(_cap, block.timestamp - CYCLE);\\n        activeCreators.push(_creator);\\n        creatorIndex[_creator] = activeCreators.length - 1;\\n        emit AddBuilder(_creator, _cap);\\n    }\\n\\n    // Add a batch of creators.\\n    function addBatch(address[] memory _creators, uint256[] memory _caps) public onlyAdmin {\\n        uint256 cLength = _creators.length;\\n        if (_creators.length >= MAXCREATORS) revert MaxCreatorsReached();\\n        if (cLength != _caps.length) revert LengthsMismatch();\\n        for (uint256 i = 0; i < cLength; ) {\\n            addCreatorFlow(payable(_creators[i]), _caps[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // Validate the input for a creator\\n    function validateCreatorInput(address payable _creator, uint256 _cap) internal view {\\n        //check if minimum cap is met, eth mode and erc20 mode\\n        if (_cap < MINIMUM_CAP && !isERC20) revert BelowMinimumCap(_cap, MINIMUM_CAP);\\n        if (_cap < MINIMUM_ERC20_CAP && isERC20) revert BelowMinimumCap(_cap, MINIMUM_ERC20_CAP);\\n        if (_creator == address(0)) revert InvalidCreatorAddress();\\n        if (isAdmin[_creator]) revert InvalidCreatorAddress();\\n        if (flowingCreators[_creator].cap > 0) revert CreatorAlreadyExists();\\n    }\\n\\n    // Update a creator's flow cap\\n    function updateCreatorFlowCapCycle(\\n        address payable _creator,\\n        uint256 _newCap\\n    ) public onlyAdmin isFlowActive(_creator) {\\n        if (_newCap < MINIMUM_CAP && !isERC20) revert BelowMinimumCap(_newCap, MINIMUM_CAP);\\n        if (_newCap < MINIMUM_ERC20_CAP && isERC20) revert BelowMinimumCap(_newCap, MINIMUM_ERC20_CAP);\\n\\n        CreatorFlowInfo storage creatorFlow = flowingCreators[_creator];\\n\\n        creatorFlow.cap = _newCap;\\n\\n        creatorFlow.last = block.timestamp - (CYCLE);\\n\\n        emit UpdateBuilder(_creator, _newCap);\\n    }\\n\\n    // Remove a creator's flow\\n    function removeCreatorFlow(address _creator) public onlyAdmin isFlowActive(_creator) {\\n        uint256 creatorIndexToRemove = creatorIndex[_creator];\\n        address lastCreator = activeCreators[activeCreators.length - 1];\\n\\n        if (_creator != lastCreator) {\\n            activeCreators[creatorIndexToRemove] = lastCreator;\\n            creatorIndex[lastCreator] = creatorIndexToRemove;\\n        }\\n\\n        activeCreators.pop();\\n\\n        delete flowingCreators[_creator];\\n        delete creatorIndex[_creator];\\n\\n        emit UpdateBuilder(_creator, 0);\\n    }\\n\\n    function flowWithdraw(\\n        uint256 _amount,\\n        string memory _reason\\n    ) public isFlowActive(msg.sender) nonReentrant stopInEmergency {\\n        CreatorFlowInfo storage creatorFlow = flowingCreators[msg.sender];\\n\\n        uint256 totalAmountCanWithdraw = availableCreatorAmount(msg.sender);\\n        if (totalAmountCanWithdraw < _amount) {\\n            revert InsufficientInFlow(_amount, totalAmountCanWithdraw);\\n        }\\n\\n        uint256 creatorflowLast = creatorFlow.last;\\n        uint256 timestamp = block.timestamp;\\n        uint256 cappedLast = timestamp - CYCLE;\\n        if (creatorflowLast < cappedLast) {\\n            creatorflowLast = cappedLast;\\n        }\\n        if (!isERC20) {\\n            uint256 contractFunds = address(this).balance;\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            (bool sent, ) = msg.sender.call{ value: _amount }(\\\"\\\");\\n            if (!sent) revert EtherSendingFailed();\\n        } else {\\n            uint256 contractFunds = IERC20(tokenAddress).balanceOf(address(this));\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            IERC20(tokenAddress).safeTransfer(msg.sender, _amount);\\n        }\\n\\n        creatorFlow.last = creatorflowLast + (((timestamp - creatorflowLast) * _amount) / totalAmountCanWithdraw);\\n\\n        emit Withdraw(msg.sender, _amount, _reason);\\n    }\\n\\n    // Drain the agreement to the primary admin address\\n    function drainAgreement(address _token) public onlyAdmin nonReentrant {\\n        uint256 remainingBalance;\\n\\n        // Drain Ether\\n        if (_token == address(0)) {\\n            remainingBalance = address(this).balance;\\n            if (remainingBalance > 0) {\\n                (bool sent, ) = primaryAdmin.call{ value: remainingBalance }(\\\"\\\");\\n                if (!sent) revert EtherSendingFailed();\\n                emit AgreementDrained(remainingBalance);\\n            }\\n            return;\\n        }\\n\\n        // Drain ERC20 tokens\\n        remainingBalance = IERC20(_token).balanceOf(address(this));\\n        if (remainingBalance > 0) {\\n            IERC20(_token).safeTransfer(primaryAdmin, remainingBalance);\\n            emit AgreementDrained(remainingBalance);\\n        }\\n    }\\n\\n    \\n\\n    // Fallback function to receive ether\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xfc896c3af8c92469165a1e2e6bc0dd6e9d67a1ad226bff0af6f4b2b7171ff1fd\",\"license\":\"MIT\"},\"contracts/CohortFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Cohort.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./Libraries/PriceConverter.sol\\\";\\n\\n/**\\n * @title CohortFactory\\n * @dev Factory contract for deploying new Cohort contracts with a creation fee\\n */\\ncontract CohortFactory is Ownable {\\n    using PriceConverter for uint256;\\n\\n    AggregatorV3Interface private priceFeed;\\n\\n    uint256 public constant CREATION_FEE_USD = 10 * 1e18; // 10 USD\\n\\n    mapping(address => bool) public isCohort;\\n\\n    address[] public cohorts;\\n\\n    event CohortCreated(address indexed cohortAddress, address indexed primaryAdmin, string name, string description);\\n    event PriceFeedUpdated(address newPriceFeed);\\n\\n    error InsufficientPayment(uint256 required, uint256 provided);\\n    error PriceFeedInvalid();\\n    error FailedToSendETH();\\n\\n    /**\\n     * @dev Constructor sets the price feed address for ETH/USD conversion\\n     * @param _priceFeed Chainlink price feed address for ETH/USD\\n     */\\n    constructor(address _priceFeed) Ownable(msg.sender) {\\n        if (_priceFeed == address(0)) revert PriceFeedInvalid();\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    /**\\n     * @dev Updates the price feed address\\n     * @param _newPriceFeed New price feed address\\n     */\\n    function updatePriceFeed(address _newPriceFeed) external onlyOwner {\\n        if (_newPriceFeed == address(0)) revert PriceFeedInvalid();\\n        priceFeed = AggregatorV3Interface(_newPriceFeed);\\n        emit PriceFeedUpdated(_newPriceFeed);\\n    }\\n\\n    /**\\n     * @dev Calculates required ETH amount for creation fee\\n     * @return Required ETH amount in wei\\n     */\\n    function getRequiredEthAmount() public view returns (uint256) {\\n        uint256 ethPrice = PriceConverter.getPrice(priceFeed);\\n        return (CREATION_FEE_USD * 1e18) / ethPrice;\\n    }\\n\\n    /**\\n     * @dev Creates a new Cohort contract\\n     * @param _primaryAdmin Address of the primary admin\\n     * @param _tokenAddress Address of ERC20 token (zero address for ETH)\\n     * @param _name Name of the cohort\\n     * @return Address of the newly created cohort\\n     */\\n    function createCohort(\\n        address _primaryAdmin,\\n        address _tokenAddress,\\n        string memory _name,\\n        string memory _description\\n    ) external payable returns (address) {\\n        uint256 requiredEth = getRequiredEthAmount();\\n\\n        if (msg.value.getConversionRate(priceFeed) < CREATION_FEE_USD) {\\n            revert InsufficientPayment(requiredEth, msg.value);\\n        }\\n\\n        Cohort newCohort = new Cohort(_primaryAdmin, _tokenAddress, _name, _description);\\n\\n        address cohortAddress = address(newCohort);\\n        isCohort[cohortAddress] = true;\\n        cohorts.push(cohortAddress);\\n\\n        (bool sent, ) = owner().call{ value: msg.value }(\\\"\\\");\\n        if (!sent) revert FailedToSendETH();\\n\\n        emit CohortCreated(cohortAddress, _primaryAdmin, _name, _description);\\n        return cohortAddress;\\n    }\\n\\n    /**\\n     * @dev Gets all created cohorts\\n     * @return Array of cohort addresses\\n     */\\n    function getAllCohorts() external view returns (address[] memory) {\\n        return cohorts;\\n    }\\n\\n    /**\\n     * @dev Gets the total number of created cohorts\\n     * @return Number of cohorts\\n     */\\n    function getTotalCohorts() external view returns (uint256) {\\n        return cohorts.length;\\n    }\\n}\\n\",\"keccak256\":\"0xe4fd03d933a889eb49ee017dbda6e9c0b05435e0108b1547563381c53ab6e885\",\"license\":\"MIT\"},\"contracts/Libraries/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    /**\\n     * @dev Gets the latest ETH/USD price from Chainlink\\n     * @return price Latest ETH/USD price with 18 decimals\\n     */\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (\\n            ,\\n            /* uint80 roundID */ int256 price /* uint256 startedAt */ /* uint256 timeStamp */ /* uint80 answeredInRound */,\\n            ,\\n            ,\\n\\n        ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n        // ETH in terms of USD\\n    }\\n\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xd1f1a46f67f5fcdc41caffe9a74bbde1663f4c669d5284119d106713cdf3f570\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161303838038061303883398101604081905261002f916100fb565b338061005557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005e816100ab565b506001600160a01b038116610086576040516307806b6560e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b039290921691909117905561012b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561010d57600080fd5b81516001600160a01b038116811461012457600080fd5b9392505050565b612efe8061013a6000396000f3fe608060405260043610620000a95760003560e01c806374ed78d0116200006c57806374ed78d01462000189578063858ab90814620001ae5780638da5cb5b14620001cc57806395877f7814620001ec5780639b8a969e1462000211578063f2fde38b146200022957600080fd5b8063114be58514620000ae5780634bdcda9214620000d35780634e73e35514620001185780636abd4251146200013f578063715018a6146200016f575b600080fd5b348015620000bb57600080fd5b506003545b6040519081526020015b60405180910390f35b348015620000e057600080fd5b5062000107620000f23660046200076a565b60026020526000908152604090205460ff1681565b6040519015158152602001620000ca565b3480156200012557600080fd5b50620001306200024e565b604051620000ca919062000788565b620001566200015036600462000882565b620002b2565b6040516001600160a01b039091168152602001620000ca565b3480156200017c57600080fd5b5062000187620004a0565b005b3480156200019657600080fd5b5062000156620001a836600462000912565b620004b8565b348015620001bb57600080fd5b50620000c0678ac7230489e8000081565b348015620001d957600080fd5b506000546001600160a01b031662000156565b348015620001f957600080fd5b50620001876200020b3660046200076a565b620004e3565b3480156200021e57600080fd5b50620000c062000569565b3480156200023657600080fd5b5062000187620002483660046200076a565b620005b6565b60606003805480602002602001604051908101604052809291908181526020018280548015620002a857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000289575b5050505050905090565b600080620002bf62000569565b600154909150678ac7230489e8000090620002e59034906001600160a01b0316620005fa565b1015620003135760405163b99e2ab760e01b8152600481018290523460248201526044015b60405180910390fd5b60008686868660405162000327906200073f565b62000336949392919062000974565b604051809103906000f08015801562000353573d6000803e3d6000fd5b506001600160a01b0381166000818152600260205260408120805460ff1916600190811790915560038054918201815582527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319169092179091559091508190620003d16000546001600160a01b031690565b6001600160a01b03163460405160006040518083038185875af1925050503d80600081146200041d576040519150601f19603f3d011682016040523d82523d6000602084013e62000422565b606091505b505090508062000445576040516338822c1360e11b815260040160405180910390fd5b886001600160a01b0316826001600160a01b03167f570e843f430e9c07b135675740293a86d5c98eb4b737091ea2c5cb61ae9293bf89896040516200048c929190620009c1565b60405180910390a350979650505050505050565b620004aa62000638565b620004b6600062000667565b565b60038181548110620004c957600080fd5b6000918252602090912001546001600160a01b0316905081565b620004ed62000638565b6001600160a01b03811662000515576040516307806b6560e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e69060200160405180910390a150565b600154600090819062000585906001600160a01b0316620006b7565b905080620005a4678ac7230489e80000670de0b6b3a764000062000a09565b620005b0919062000a23565b91505090565b620005c062000638565b6001600160a01b038116620005ec57604051631e4fbdf760e01b8152600060048201526024016200030a565b620005f78162000667565b50565b6000806200060883620006b7565b90506000670de0b6b3a764000062000621868462000a09565b6200062d919062000a23565b925050505b92915050565b6000546001600160a01b03163314620004b65760405163118cdaa760e01b81523360048201526024016200030a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015620006f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200071f919062000a61565b505050915050806402540be40062000738919062000ab6565b9392505050565b6123dc8062000aed83390190565b80356001600160a01b03811681146200076557600080fd5b919050565b6000602082840312156200077d57600080fd5b62000738826200074d565b6020808252825182820181905260009190848201906040850190845b81811015620007cb5783516001600160a01b031683529284019291840191600101620007a4565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620007ff57600080fd5b813567ffffffffffffffff808211156200081d576200081d620007d7565b604051601f8301601f19908116603f01168101908282118183101715620008485762000848620007d7565b816040528381528660208588010111156200086257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156200089957600080fd5b620008a4856200074d565b9350620008b4602086016200074d565b9250604085013567ffffffffffffffff80821115620008d257600080fd5b620008e088838901620007ed565b93506060870135915080821115620008f757600080fd5b506200090687828801620007ed565b91505092959194509250565b6000602082840312156200092557600080fd5b5035919050565b6000815180845260005b81811015620009545760208185018101518683018201520162000936565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03858116825284166020820152608060408201819052600090620009a2908301856200092c565b8281036060840152620009b681856200092c565b979650505050505050565b604081526000620009d660408301856200092c565b8281036020840152620009ea81856200092c565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620006325762000632620009f3565b60008262000a4157634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff811681146200076557600080fd5b600080600080600060a0868803121562000a7a57600080fd5b62000a858662000a46565b945060208601519350604086015192506060860151915062000aaa6080870162000a46565b90509295509295909350565b80820260008212600160ff1b8414161562000ad55762000ad5620009f3565b8181058314821517620006325762000632620009f356fe60806040523480156200001157600080fd5b50604051620023dc380380620023dc833981016040819052620000349162000270565b6001805562000045600085620000df565b506001600160a01b0384166000818152600a60205260409020805460ff19166001179055600680546001600160a01b031916909117905560036200008a83826200038f565b5060046200009982826200038f565b506001600160a01b03831615620000d5576002805460ff19166001179055600580546001600160a01b0385166001600160a01b03199091161790555b505050506200045b565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1662000184576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556200013b3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000188565b5060005b92915050565b80516001600160a01b0381168114620001a657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001d357600080fd5b81516001600160401b0380821115620001f057620001f0620001ab565b604051601f8301601f19908116603f011681019082821181831017156200021b576200021b620001ab565b816040528381526020925086838588010111156200023857600080fd5b600091505b838210156200025c57858201830151818301840152908201906200023d565b600093810190920192909252949350505050565b600080600080608085870312156200028757600080fd5b62000292856200018e565b9350620002a2602086016200018e565b60408601519093506001600160401b0380821115620002c057600080fd5b620002ce88838901620001c1565b93506060870151915080821115620002e557600080fd5b50620002f487828801620001c1565b91505092959194509250565b600181811c908216806200031557607f821691505b6020821081036200033657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200038a57600081815260208120601f850160051c81016020861015620003655750805b601f850160051c820191505b81811015620003865782815560010162000371565b5050505b505050565b81516001600160401b03811115620003ab57620003ab620001ab565b620003c381620003bc845462000300565b846200033c565b602080601f831160018114620003fb5760008415620003e25750858301515b600019600386901b1c1916600185901b17855562000386565b600085815260208120601f198616915b828110156200042c578886015182559484019460019091019084016200040b565b50858210156200044b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611f71806200046b6000396000f3fe6080604052600436106101c65760003560e01c80636c2acff3116100f757806397e5cc6c11610095578063a217fddf11610064578063a217fddf14610575578063b83cc0db1461058a578063beb12416146105aa578063d547741f146105ca57600080fd5b806397e5cc6c146104d05780639d76ea58146104fd5780639de1b23d14610535578063a0b1f2121461055557600080fd5b806385caa917116100d157806385caa91714610450578063885d120f146104705780638c0a2d561461049057806391d14854146104b057600080fd5b80636c2acff3146103ef5780637284e4161461041c57806375f12b211461043157600080fd5b80632eb67f531161016457806336568abe1161013e57806336568abe146103465780634cb40400146103665780634d62f7ec1461038657806359b6aa71146103a657600080fd5b80632eb67f53146102f95780632f2ff15d146103135780633519a2f81461033357600080fd5b80630d12cc68116101a05780630d12cc681461024b578063116e72db1461026b578063248a9ca31461028b57806324d7806c146102c957600080fd5b806301ffc9a7146101d257806302bf8dd91461020757806306fdde031461022957600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506101f26101ed36600461199b565b6105ea565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b506102276102223660046119e1565b610621565b005b34801561023557600080fd5b5061023e610768565b6040516101fe9190611a53565b34801561025757600080fd5b50610227610266366004611b3c565b6107f6565b34801561027757600080fd5b50610227610286366004611c13565b6108b7565b34801561029757600080fd5b506102bb6102a6366004611c48565b60009081526020819052604090206001015490565b6040519081526020016101fe565b3480156102d557600080fd5b506101f26102e4366004611c61565b600a6020526000908152604090205460ff1681565b34801561030557600080fd5b506002546101f29060ff1681565b34801561031f57600080fd5b5061022761032e366004611c7e565b6109f9565b610227610341366004611c48565b610a1e565b34801561035257600080fd5b50610227610361366004611c7e565b610b00565b34801561037257600080fd5b50610227610381366004611cae565b610b38565b34801561039257600080fd5b506102bb6103a1366004611c61565b610b7a565b3480156103b257600080fd5b506103da6103c1366004611c61565b6007602052600090815260409020805460019091015482565b604080519283526020830191909152016101fe565b3480156103fb57600080fd5b5061040f61040a366004611cc9565b610c42565b6040516101fe9190611d3e565b34801561042857600080fd5b5061023e610d41565b34801561043d57600080fd5b506002546101f290610100900460ff1681565b34801561045c57600080fd5b5061022761046b366004611c61565b610d4e565b34801561047c57600080fd5b5061022761048b3660046119e1565b610f0e565b34801561049c57600080fd5b506102276104ab366004611c61565b61107d565b3480156104bc57600080fd5b506101f26104cb366004611c7e565b61113d565b3480156104dc57600080fd5b506102bb6104eb366004611c61565b60086020526000908152604090205481565b34801561050957600080fd5b5060055461051d906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b34801561054157600080fd5b5060065461051d906001600160a01b031681565b34801561056157600080fd5b50610227610570366004611d8d565b611166565b34801561058157600080fd5b506102bb600081565b34801561059657600080fd5b5061051d6105a5366004611c48565b61140c565b3480156105b657600080fd5b506102276105c5366004611c61565b611436565b3480156105d657600080fd5b506102276105e5366004611c7e565b6115da565b60006001600160e01b03198216637965db0b60e01b148061061b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61062c60003361113d565b61064957604051634ca8886760e01b815260040160405180910390fd5b60095460191161066c576040516315d558ed60e21b815260040160405180910390fd5b61067682826115ff565b604051806040016040528082815260200162278d00426106969190611e42565b90526001600160a01b0383166000818152600760209081526040822084518155930151600193840155600980548085018255918190527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90910180546001600160a01b0319169092179091555461070d9190611e42565b6001600160a01b038316600081815260086020526040908190209290925590517f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c39061075c9084815260200190565b60405180910390a25050565b6003805461077590611e55565b80601f01602080910402602001604051908101604052809291908181526020018280546107a190611e55565b80156107ee5780601f106107c3576101008083540402835291602001916107ee565b820191906000526020600020905b8154815290600101906020018083116107d157829003601f168201915b505050505081565b61080160003361113d565b61081e57604051634ca8886760e01b815260040160405180910390fd5b815160198110610841576040516315d558ed60e21b815260040160405180910390fd5b815181146108625760405163586cb9e160e01b815260040160405180910390fd5b60005b818110156108b1576108a984828151811061088257610882611e89565b602002602001015184838151811061089c5761089c611e89565b6020026020010151610621565b600101610865565b50505050565b6108c260003361113d565b6108df57604051634ca8886760e01b815260040160405180910390fd5b8015610974576001600160a01b0382166000908152600760205260409020541561091c57604051632953f2b160e11b815260040160405180910390fd5b6109276000836109f9565b6001600160a01b0382166000818152600a6020526040808220805460ff19166001179055517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e3399190a25050565b6006546001600160a01b03908116908316036109a357604051634ca8886760e01b815260040160405180910390fd5b6109ae6000836115da565b6001600160a01b0382166000818152600a6020526040808220805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f9190a25b5050565b600082815260208190526040902060010154610a1481611728565b6108b18383611732565b60025460ff16610a815734600003610a49576040516327738acf60e21b815260040160405180910390fd5b60405134815233907f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f9060200160405180910390a250565b80600003610aa2576040516327738acf60e21b815260040160405180910390fd5b600554610aba906001600160a01b03163330846117c4565b60055460405182815233916001600160a01b0316907fa17c2a1269d65f89b5c5688ce949fa4a7f59d8fcb9bbbac872d27a142b2b49e79060200160405180910390a35b50565b6001600160a01b0381163314610b295760405163334bd91960e11b815260040160405180910390fd5b610b33828261182b565b505050565b610b4360003361113d565b610b6057604051634ca8886760e01b815260040160405180910390fd5b600280549115156101000261ff0019909216919091179055565b6001600160a01b03811660009081526007602052604081205482908203610bc45760405163122273e360e11b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b0383166000908152600760209081526040808320815180830190925280548252600101549181018290529190610c019042611e42565b905062278d00811015610c3757815160009062278d0090610c229084611e9f565b610c2c9190611eb6565b9450610c3c92505050565b505191505b50919050565b60608160008167ffffffffffffffff811115610c6057610c60611a66565b604051908082528060200260200182016040528015610ca557816020015b6040805180820190915260008082526020820152815260200190600190039081610c7e5790505b50905060005b82811015610d38576000868683818110610cc757610cc7611e89565b9050602002016020810190610cdc9190611c61565b6001600160a01b0381166000908152600760209081526040918290208251808401909352805483526001015490820152845191925090849084908110610d2457610d24611e89565b602090810291909101015250600101610cab565b50949350505050565b6004805461077590611e55565b610d5960003361113d565b610d7657604051634ca8886760e01b815260040160405180910390fd5b610d7e611896565b60006001600160a01b038216610e455750478015610e3f576006546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610de3576040519150601f19603f3d011682016040523d82523d6000602084013e610de8565b606091505b5050905080610e0a57604051637d6a86b760e11b815260040160405180910390fd5b6040518281527f8319bfd6f3fd889380af4226ddf22592aecc5ed1c024aacf7b33909259243beb9060200160405180910390a1505b50610f05565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ead9190611ed8565b90508015610f0357600654610ecf906001600160a01b038481169116836118c0565b6040518181527f8319bfd6f3fd889380af4226ddf22592aecc5ed1c024aacf7b33909259243beb9060200160405180910390a15b505b610afd60018055565b610f1960003361113d565b610f3657604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b038216600090815260076020526040812054839103610f7a5760405163122273e360e11b81526001600160a01b0382166004820152602401610bbb565b6703782dace9d9000082108015610f94575060025460ff16155b15610fc35760405163c281dd3b60e01b8152600481018390526703782dace9d900006024820152604401610bbb565b678ac7230489e8000082108015610fdc575060025460ff165b1561100b5760405163c281dd3b60e01b815260048101839052678ac7230489e800006024820152604401610bbb565b6001600160a01b038316600090815260076020526040902082815561103362278d0042611e42565b60018201556040518381526001600160a01b038516907f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d5906020015b60405180910390a250505050565b6006546001600160a01b031633146110a85760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166110cf5760405163b5aaecfd60e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0383169081179091556110f99060009061182b565b50611105600082611732565b506040516001600160a01b038216907fb8121b611a666c4d7c03b96ba9dbc315332dc3f1aa77a22c0a1c162e55c5c32b90600090a250565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3360008181526007602052604081205490036111a05760405163122273e360e11b81526001600160a01b0382166004820152602401610bbb565b6111a8611896565b600254610100900460ff16156111d157604051632e1aa8d760e01b815260040160405180910390fd5b336000818152600760205260408120916111ea90610b7a565b90508481101561121757604051638088bb1160e01b81526004810186905260248101829052604401610bbb565b600182015442600061122c62278d0083611e42565b90508083101561123a578092505b60025460ff166112e057478881101561127057604051631508de4560e01b8152600481018a905260248101829052604401610bbb565b60405160009033908b908381818185875af1925050503d80600081146112b2576040519150601f19603f3d011682016040523d82523d6000602084013e6112b7565b606091505b50509050806112d957604051637d6a86b760e11b815260040160405180910390fd5b5050611393565b6005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134d9190611ed8565b90508881101561137a57604051631508de4560e01b8152600481018a905260248101829052604401610bbb565b600554611391906001600160a01b0316338b6118c0565b505b838861139f8585611e42565b6113a99190611e9f565b6113b39190611eb6565b6113bd9084611ef1565b600186015560405133907f485f1bb6524c663555797e00171a10f341656e59b02d6b557a0a38ba7d5d9751906113f6908b908b90611f04565b60405180910390a25050505050610b3360018055565b6009818154811061141c57600080fd5b6000918252602090912001546001600160a01b0316905081565b61144160003361113d565b61145e57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0381166000908152600760205260408120548291036114a25760405163122273e360e11b81526001600160a01b0382166004820152602401610bbb565b6001600160a01b038216600090815260086020526040812054600980549192916114ce90600190611e42565b815481106114de576114de611e89565b6000918252602090912001546001600160a01b0390811691508416811461154d57806009838154811061151357611513611e89565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526008909152604090208290555b600980548061155e5761155e611f25565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b0386168083526007825260408084208481556001018490556008835280842084905551928352917f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d5910161106f565b6000828152602081905260409020600101546115f581611728565b6108b1838361182b565b6703782dace9d9000081108015611619575060025460ff16155b156116485760405163c281dd3b60e01b8152600481018290526703782dace9d900006024820152604401610bbb565b678ac7230489e8000081108015611661575060025460ff165b156116905760405163c281dd3b60e01b815260048101829052678ac7230489e800006024820152604401610bbb565b6001600160a01b0382166116b757604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b0382166000908152600a602052604090205460ff16156116f157604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b038216600090815260076020526040902054156109f55760405163186fceb160e21b815260040160405180910390fd5b610afd81336118f1565b600061173e838361113d565b6117bc576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556117743390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161061b565b50600061061b565b6040516001600160a01b0384811660248301528381166044830152606482018390526108b19186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061192a565b6000611837838361113d565b156117bc576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161061b565b6002600154036118b957604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b03838116602483015260448201839052610b3391859182169063a9059cbb906064016117f9565b6118fb828261113d565b6109f55760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610bbb565b600080602060008451602086016000885af18061194d576040513d6000823e3d81fd5b50506000513d91508115611965578060011415611972565b6001600160a01b0384163b155b156108b157604051635274afe760e01b81526001600160a01b0385166004820152602401610bbb565b6000602082840312156119ad57600080fd5b81356001600160e01b0319811681146119c557600080fd5b9392505050565b6001600160a01b0381168114610afd57600080fd5b600080604083850312156119f457600080fd5b82356119ff816119cc565b946020939093013593505050565b6000815180845260005b81811015611a3357602081850181015186830182015201611a17565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006119c56020830184611a0d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611aa557611aa5611a66565b604052919050565b600067ffffffffffffffff821115611ac757611ac7611a66565b5060051b60200190565b600082601f830112611ae257600080fd5b81356020611af7611af283611aad565b611a7c565b82815260059290921b84018101918181019086841115611b1657600080fd5b8286015b84811015611b315780358352918301918301611b1a565b509695505050505050565b60008060408385031215611b4f57600080fd5b823567ffffffffffffffff80821115611b6757600080fd5b818501915085601f830112611b7b57600080fd5b81356020611b8b611af283611aad565b82815260059290921b84018101918181019089841115611baa57600080fd5b948201945b83861015611bd1578535611bc2816119cc565b82529482019490820190611baf565b96505086013592505080821115611be757600080fd5b50611bf485828601611ad1565b9150509250929050565b80358015158114611c0e57600080fd5b919050565b60008060408385031215611c2657600080fd5b8235611c31816119cc565b9150611c3f60208401611bfe565b90509250929050565b600060208284031215611c5a57600080fd5b5035919050565b600060208284031215611c7357600080fd5b81356119c5816119cc565b60008060408385031215611c9157600080fd5b823591506020830135611ca3816119cc565b809150509250929050565b600060208284031215611cc057600080fd5b6119c582611bfe565b60008060208385031215611cdc57600080fd5b823567ffffffffffffffff80821115611cf457600080fd5b818501915085601f830112611d0857600080fd5b813581811115611d1757600080fd5b8660208260051b8501011115611d2c57600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b82811015611d8057815180518552860151868501529284019290850190600101611d5b565b5091979650505050505050565b60008060408385031215611da057600080fd5b8235915060208084013567ffffffffffffffff80821115611dc057600080fd5b818601915086601f830112611dd457600080fd5b813581811115611de657611de6611a66565b611df8601f8201601f19168501611a7c565b91508082528784828501011115611e0e57600080fd5b80848401858401376000848284010152508093505050509250929050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561061b5761061b611e2c565b600181811c90821680611e6957607f821691505b602082108103610c3c57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761061b5761061b611e2c565b600082611ed357634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611eea57600080fd5b5051919050565b8082018082111561061b5761061b611e2c565b828152604060208201526000611f1d6040830184611a0d565b949350505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220962cfe1ce7a319df722406f5bc86ea45499c4c41549365f0b502d4c741cda6a564736f6c63430008140033a26469706673582212206c4c4820b89b2658f2c4e857de05f50980dba16b7b286c1a6646c4c7a52a382664736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610620000a95760003560e01c806374ed78d0116200006c57806374ed78d01462000189578063858ab90814620001ae5780638da5cb5b14620001cc57806395877f7814620001ec5780639b8a969e1462000211578063f2fde38b146200022957600080fd5b8063114be58514620000ae5780634bdcda9214620000d35780634e73e35514620001185780636abd4251146200013f578063715018a6146200016f575b600080fd5b348015620000bb57600080fd5b506003545b6040519081526020015b60405180910390f35b348015620000e057600080fd5b5062000107620000f23660046200076a565b60026020526000908152604090205460ff1681565b6040519015158152602001620000ca565b3480156200012557600080fd5b50620001306200024e565b604051620000ca919062000788565b620001566200015036600462000882565b620002b2565b6040516001600160a01b039091168152602001620000ca565b3480156200017c57600080fd5b5062000187620004a0565b005b3480156200019657600080fd5b5062000156620001a836600462000912565b620004b8565b348015620001bb57600080fd5b50620000c0678ac7230489e8000081565b348015620001d957600080fd5b506000546001600160a01b031662000156565b348015620001f957600080fd5b50620001876200020b3660046200076a565b620004e3565b3480156200021e57600080fd5b50620000c062000569565b3480156200023657600080fd5b5062000187620002483660046200076a565b620005b6565b60606003805480602002602001604051908101604052809291908181526020018280548015620002a857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000289575b5050505050905090565b600080620002bf62000569565b600154909150678ac7230489e8000090620002e59034906001600160a01b0316620005fa565b1015620003135760405163b99e2ab760e01b8152600481018290523460248201526044015b60405180910390fd5b60008686868660405162000327906200073f565b62000336949392919062000974565b604051809103906000f08015801562000353573d6000803e3d6000fd5b506001600160a01b0381166000818152600260205260408120805460ff1916600190811790915560038054918201815582527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319169092179091559091508190620003d16000546001600160a01b031690565b6001600160a01b03163460405160006040518083038185875af1925050503d80600081146200041d576040519150601f19603f3d011682016040523d82523d6000602084013e62000422565b606091505b505090508062000445576040516338822c1360e11b815260040160405180910390fd5b886001600160a01b0316826001600160a01b03167f570e843f430e9c07b135675740293a86d5c98eb4b737091ea2c5cb61ae9293bf89896040516200048c929190620009c1565b60405180910390a350979650505050505050565b620004aa62000638565b620004b6600062000667565b565b60038181548110620004c957600080fd5b6000918252602090912001546001600160a01b0316905081565b620004ed62000638565b6001600160a01b03811662000515576040516307806b6560e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e69060200160405180910390a150565b600154600090819062000585906001600160a01b0316620006b7565b905080620005a4678ac7230489e80000670de0b6b3a764000062000a09565b620005b0919062000a23565b91505090565b620005c062000638565b6001600160a01b038116620005ec57604051631e4fbdf760e01b8152600060048201526024016200030a565b620005f78162000667565b50565b6000806200060883620006b7565b90506000670de0b6b3a764000062000621868462000a09565b6200062d919062000a23565b925050505b92915050565b6000546001600160a01b03163314620004b65760405163118cdaa760e01b81523360048201526024016200030a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015620006f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200071f919062000a61565b505050915050806402540be40062000738919062000ab6565b9392505050565b6123dc8062000aed83390190565b80356001600160a01b03811681146200076557600080fd5b919050565b6000602082840312156200077d57600080fd5b62000738826200074d565b6020808252825182820181905260009190848201906040850190845b81811015620007cb5783516001600160a01b031683529284019291840191600101620007a4565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620007ff57600080fd5b813567ffffffffffffffff808211156200081d576200081d620007d7565b604051601f8301601f19908116603f01168101908282118183101715620008485762000848620007d7565b816040528381528660208588010111156200086257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156200089957600080fd5b620008a4856200074d565b9350620008b4602086016200074d565b9250604085013567ffffffffffffffff80821115620008d257600080fd5b620008e088838901620007ed565b93506060870135915080821115620008f757600080fd5b506200090687828801620007ed565b91505092959194509250565b6000602082840312156200092557600080fd5b5035919050565b6000815180845260005b81811015620009545760208185018101518683018201520162000936565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03858116825284166020820152608060408201819052600090620009a2908301856200092c565b8281036060840152620009b681856200092c565b979650505050505050565b604081526000620009d660408301856200092c565b8281036020840152620009ea81856200092c565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620006325762000632620009f3565b60008262000a4157634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff811681146200076557600080fd5b600080600080600060a0868803121562000a7a57600080fd5b62000a858662000a46565b945060208601519350604086015192506060860151915062000aaa6080870162000a46565b90509295509295909350565b80820260008212600160ff1b8414161562000ad55762000ad5620009f3565b8181058314821517620006325762000632620009f356fe60806040523480156200001157600080fd5b50604051620023dc380380620023dc833981016040819052620000349162000270565b6001805562000045600085620000df565b506001600160a01b0384166000818152600a60205260409020805460ff19166001179055600680546001600160a01b031916909117905560036200008a83826200038f565b5060046200009982826200038f565b506001600160a01b03831615620000d5576002805460ff19166001179055600580546001600160a01b0385166001600160a01b03199091161790555b505050506200045b565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1662000184576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556200013b3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000188565b5060005b92915050565b80516001600160a01b0381168114620001a657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001d357600080fd5b81516001600160401b0380821115620001f057620001f0620001ab565b604051601f8301601f19908116603f011681019082821181831017156200021b576200021b620001ab565b816040528381526020925086838588010111156200023857600080fd5b600091505b838210156200025c57858201830151818301840152908201906200023d565b600093810190920192909252949350505050565b600080600080608085870312156200028757600080fd5b62000292856200018e565b9350620002a2602086016200018e565b60408601519093506001600160401b0380821115620002c057600080fd5b620002ce88838901620001c1565b93506060870151915080821115620002e557600080fd5b50620002f487828801620001c1565b91505092959194509250565b600181811c908216806200031557607f821691505b6020821081036200033657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200038a57600081815260208120601f850160051c81016020861015620003655750805b601f850160051c820191505b81811015620003865782815560010162000371565b5050505b505050565b81516001600160401b03811115620003ab57620003ab620001ab565b620003c381620003bc845462000300565b846200033c565b602080601f831160018114620003fb5760008415620003e25750858301515b600019600386901b1c1916600185901b17855562000386565b600085815260208120601f198616915b828110156200042c578886015182559484019460019091019084016200040b565b50858210156200044b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611f71806200046b6000396000f3fe6080604052600436106101c65760003560e01c80636c2acff3116100f757806397e5cc6c11610095578063a217fddf11610064578063a217fddf14610575578063b83cc0db1461058a578063beb12416146105aa578063d547741f146105ca57600080fd5b806397e5cc6c146104d05780639d76ea58146104fd5780639de1b23d14610535578063a0b1f2121461055557600080fd5b806385caa917116100d157806385caa91714610450578063885d120f146104705780638c0a2d561461049057806391d14854146104b057600080fd5b80636c2acff3146103ef5780637284e4161461041c57806375f12b211461043157600080fd5b80632eb67f531161016457806336568abe1161013e57806336568abe146103465780634cb40400146103665780634d62f7ec1461038657806359b6aa71146103a657600080fd5b80632eb67f53146102f95780632f2ff15d146103135780633519a2f81461033357600080fd5b80630d12cc68116101a05780630d12cc681461024b578063116e72db1461026b578063248a9ca31461028b57806324d7806c146102c957600080fd5b806301ffc9a7146101d257806302bf8dd91461020757806306fdde031461022957600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506101f26101ed36600461199b565b6105ea565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b506102276102223660046119e1565b610621565b005b34801561023557600080fd5b5061023e610768565b6040516101fe9190611a53565b34801561025757600080fd5b50610227610266366004611b3c565b6107f6565b34801561027757600080fd5b50610227610286366004611c13565b6108b7565b34801561029757600080fd5b506102bb6102a6366004611c48565b60009081526020819052604090206001015490565b6040519081526020016101fe565b3480156102d557600080fd5b506101f26102e4366004611c61565b600a6020526000908152604090205460ff1681565b34801561030557600080fd5b506002546101f29060ff1681565b34801561031f57600080fd5b5061022761032e366004611c7e565b6109f9565b610227610341366004611c48565b610a1e565b34801561035257600080fd5b50610227610361366004611c7e565b610b00565b34801561037257600080fd5b50610227610381366004611cae565b610b38565b34801561039257600080fd5b506102bb6103a1366004611c61565b610b7a565b3480156103b257600080fd5b506103da6103c1366004611c61565b6007602052600090815260409020805460019091015482565b604080519283526020830191909152016101fe565b3480156103fb57600080fd5b5061040f61040a366004611cc9565b610c42565b6040516101fe9190611d3e565b34801561042857600080fd5b5061023e610d41565b34801561043d57600080fd5b506002546101f290610100900460ff1681565b34801561045c57600080fd5b5061022761046b366004611c61565b610d4e565b34801561047c57600080fd5b5061022761048b3660046119e1565b610f0e565b34801561049c57600080fd5b506102276104ab366004611c61565b61107d565b3480156104bc57600080fd5b506101f26104cb366004611c7e565b61113d565b3480156104dc57600080fd5b506102bb6104eb366004611c61565b60086020526000908152604090205481565b34801561050957600080fd5b5060055461051d906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b34801561054157600080fd5b5060065461051d906001600160a01b031681565b34801561056157600080fd5b50610227610570366004611d8d565b611166565b34801561058157600080fd5b506102bb600081565b34801561059657600080fd5b5061051d6105a5366004611c48565b61140c565b3480156105b657600080fd5b506102276105c5366004611c61565b611436565b3480156105d657600080fd5b506102276105e5366004611c7e565b6115da565b60006001600160e01b03198216637965db0b60e01b148061061b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61062c60003361113d565b61064957604051634ca8886760e01b815260040160405180910390fd5b60095460191161066c576040516315d558ed60e21b815260040160405180910390fd5b61067682826115ff565b604051806040016040528082815260200162278d00426106969190611e42565b90526001600160a01b0383166000818152600760209081526040822084518155930151600193840155600980548085018255918190527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90910180546001600160a01b0319169092179091555461070d9190611e42565b6001600160a01b038316600081815260086020526040908190209290925590517f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c39061075c9084815260200190565b60405180910390a25050565b6003805461077590611e55565b80601f01602080910402602001604051908101604052809291908181526020018280546107a190611e55565b80156107ee5780601f106107c3576101008083540402835291602001916107ee565b820191906000526020600020905b8154815290600101906020018083116107d157829003601f168201915b505050505081565b61080160003361113d565b61081e57604051634ca8886760e01b815260040160405180910390fd5b815160198110610841576040516315d558ed60e21b815260040160405180910390fd5b815181146108625760405163586cb9e160e01b815260040160405180910390fd5b60005b818110156108b1576108a984828151811061088257610882611e89565b602002602001015184838151811061089c5761089c611e89565b6020026020010151610621565b600101610865565b50505050565b6108c260003361113d565b6108df57604051634ca8886760e01b815260040160405180910390fd5b8015610974576001600160a01b0382166000908152600760205260409020541561091c57604051632953f2b160e11b815260040160405180910390fd5b6109276000836109f9565b6001600160a01b0382166000818152600a6020526040808220805460ff19166001179055517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e3399190a25050565b6006546001600160a01b03908116908316036109a357604051634ca8886760e01b815260040160405180910390fd5b6109ae6000836115da565b6001600160a01b0382166000818152600a6020526040808220805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f9190a25b5050565b600082815260208190526040902060010154610a1481611728565b6108b18383611732565b60025460ff16610a815734600003610a49576040516327738acf60e21b815260040160405180910390fd5b60405134815233907f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f9060200160405180910390a250565b80600003610aa2576040516327738acf60e21b815260040160405180910390fd5b600554610aba906001600160a01b03163330846117c4565b60055460405182815233916001600160a01b0316907fa17c2a1269d65f89b5c5688ce949fa4a7f59d8fcb9bbbac872d27a142b2b49e79060200160405180910390a35b50565b6001600160a01b0381163314610b295760405163334bd91960e11b815260040160405180910390fd5b610b33828261182b565b505050565b610b4360003361113d565b610b6057604051634ca8886760e01b815260040160405180910390fd5b600280549115156101000261ff0019909216919091179055565b6001600160a01b03811660009081526007602052604081205482908203610bc45760405163122273e360e11b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b0383166000908152600760209081526040808320815180830190925280548252600101549181018290529190610c019042611e42565b905062278d00811015610c3757815160009062278d0090610c229084611e9f565b610c2c9190611eb6565b9450610c3c92505050565b505191505b50919050565b60608160008167ffffffffffffffff811115610c6057610c60611a66565b604051908082528060200260200182016040528015610ca557816020015b6040805180820190915260008082526020820152815260200190600190039081610c7e5790505b50905060005b82811015610d38576000868683818110610cc757610cc7611e89565b9050602002016020810190610cdc9190611c61565b6001600160a01b0381166000908152600760209081526040918290208251808401909352805483526001015490820152845191925090849084908110610d2457610d24611e89565b602090810291909101015250600101610cab565b50949350505050565b6004805461077590611e55565b610d5960003361113d565b610d7657604051634ca8886760e01b815260040160405180910390fd5b610d7e611896565b60006001600160a01b038216610e455750478015610e3f576006546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610de3576040519150601f19603f3d011682016040523d82523d6000602084013e610de8565b606091505b5050905080610e0a57604051637d6a86b760e11b815260040160405180910390fd5b6040518281527f8319bfd6f3fd889380af4226ddf22592aecc5ed1c024aacf7b33909259243beb9060200160405180910390a1505b50610f05565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ead9190611ed8565b90508015610f0357600654610ecf906001600160a01b038481169116836118c0565b6040518181527f8319bfd6f3fd889380af4226ddf22592aecc5ed1c024aacf7b33909259243beb9060200160405180910390a15b505b610afd60018055565b610f1960003361113d565b610f3657604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b038216600090815260076020526040812054839103610f7a5760405163122273e360e11b81526001600160a01b0382166004820152602401610bbb565b6703782dace9d9000082108015610f94575060025460ff16155b15610fc35760405163c281dd3b60e01b8152600481018390526703782dace9d900006024820152604401610bbb565b678ac7230489e8000082108015610fdc575060025460ff165b1561100b5760405163c281dd3b60e01b815260048101839052678ac7230489e800006024820152604401610bbb565b6001600160a01b038316600090815260076020526040902082815561103362278d0042611e42565b60018201556040518381526001600160a01b038516907f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d5906020015b60405180910390a250505050565b6006546001600160a01b031633146110a85760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166110cf5760405163b5aaecfd60e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0383169081179091556110f99060009061182b565b50611105600082611732565b506040516001600160a01b038216907fb8121b611a666c4d7c03b96ba9dbc315332dc3f1aa77a22c0a1c162e55c5c32b90600090a250565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3360008181526007602052604081205490036111a05760405163122273e360e11b81526001600160a01b0382166004820152602401610bbb565b6111a8611896565b600254610100900460ff16156111d157604051632e1aa8d760e01b815260040160405180910390fd5b336000818152600760205260408120916111ea90610b7a565b90508481101561121757604051638088bb1160e01b81526004810186905260248101829052604401610bbb565b600182015442600061122c62278d0083611e42565b90508083101561123a578092505b60025460ff166112e057478881101561127057604051631508de4560e01b8152600481018a905260248101829052604401610bbb565b60405160009033908b908381818185875af1925050503d80600081146112b2576040519150601f19603f3d011682016040523d82523d6000602084013e6112b7565b606091505b50509050806112d957604051637d6a86b760e11b815260040160405180910390fd5b5050611393565b6005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134d9190611ed8565b90508881101561137a57604051631508de4560e01b8152600481018a905260248101829052604401610bbb565b600554611391906001600160a01b0316338b6118c0565b505b838861139f8585611e42565b6113a99190611e9f565b6113b39190611eb6565b6113bd9084611ef1565b600186015560405133907f485f1bb6524c663555797e00171a10f341656e59b02d6b557a0a38ba7d5d9751906113f6908b908b90611f04565b60405180910390a25050505050610b3360018055565b6009818154811061141c57600080fd5b6000918252602090912001546001600160a01b0316905081565b61144160003361113d565b61145e57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0381166000908152600760205260408120548291036114a25760405163122273e360e11b81526001600160a01b0382166004820152602401610bbb565b6001600160a01b038216600090815260086020526040812054600980549192916114ce90600190611e42565b815481106114de576114de611e89565b6000918252602090912001546001600160a01b0390811691508416811461154d57806009838154811061151357611513611e89565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526008909152604090208290555b600980548061155e5761155e611f25565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b0386168083526007825260408084208481556001018490556008835280842084905551928352917f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d5910161106f565b6000828152602081905260409020600101546115f581611728565b6108b1838361182b565b6703782dace9d9000081108015611619575060025460ff16155b156116485760405163c281dd3b60e01b8152600481018290526703782dace9d900006024820152604401610bbb565b678ac7230489e8000081108015611661575060025460ff165b156116905760405163c281dd3b60e01b815260048101829052678ac7230489e800006024820152604401610bbb565b6001600160a01b0382166116b757604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b0382166000908152600a602052604090205460ff16156116f157604051632953f2b160e11b815260040160405180910390fd5b6001600160a01b038216600090815260076020526040902054156109f55760405163186fceb160e21b815260040160405180910390fd5b610afd81336118f1565b600061173e838361113d565b6117bc576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556117743390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161061b565b50600061061b565b6040516001600160a01b0384811660248301528381166044830152606482018390526108b19186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061192a565b6000611837838361113d565b156117bc576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161061b565b6002600154036118b957604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b03838116602483015260448201839052610b3391859182169063a9059cbb906064016117f9565b6118fb828261113d565b6109f55760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610bbb565b600080602060008451602086016000885af18061194d576040513d6000823e3d81fd5b50506000513d91508115611965578060011415611972565b6001600160a01b0384163b155b156108b157604051635274afe760e01b81526001600160a01b0385166004820152602401610bbb565b6000602082840312156119ad57600080fd5b81356001600160e01b0319811681146119c557600080fd5b9392505050565b6001600160a01b0381168114610afd57600080fd5b600080604083850312156119f457600080fd5b82356119ff816119cc565b946020939093013593505050565b6000815180845260005b81811015611a3357602081850181015186830182015201611a17565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006119c56020830184611a0d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611aa557611aa5611a66565b604052919050565b600067ffffffffffffffff821115611ac757611ac7611a66565b5060051b60200190565b600082601f830112611ae257600080fd5b81356020611af7611af283611aad565b611a7c565b82815260059290921b84018101918181019086841115611b1657600080fd5b8286015b84811015611b315780358352918301918301611b1a565b509695505050505050565b60008060408385031215611b4f57600080fd5b823567ffffffffffffffff80821115611b6757600080fd5b818501915085601f830112611b7b57600080fd5b81356020611b8b611af283611aad565b82815260059290921b84018101918181019089841115611baa57600080fd5b948201945b83861015611bd1578535611bc2816119cc565b82529482019490820190611baf565b96505086013592505080821115611be757600080fd5b50611bf485828601611ad1565b9150509250929050565b80358015158114611c0e57600080fd5b919050565b60008060408385031215611c2657600080fd5b8235611c31816119cc565b9150611c3f60208401611bfe565b90509250929050565b600060208284031215611c5a57600080fd5b5035919050565b600060208284031215611c7357600080fd5b81356119c5816119cc565b60008060408385031215611c9157600080fd5b823591506020830135611ca3816119cc565b809150509250929050565b600060208284031215611cc057600080fd5b6119c582611bfe565b60008060208385031215611cdc57600080fd5b823567ffffffffffffffff80821115611cf457600080fd5b818501915085601f830112611d0857600080fd5b813581811115611d1757600080fd5b8660208260051b8501011115611d2c57600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b82811015611d8057815180518552860151868501529284019290850190600101611d5b565b5091979650505050505050565b60008060408385031215611da057600080fd5b8235915060208084013567ffffffffffffffff80821115611dc057600080fd5b818601915086601f830112611dd457600080fd5b813581811115611de657611de6611a66565b611df8601f8201601f19168501611a7c565b91508082528784828501011115611e0e57600080fd5b80848401858401376000848284010152508093505050509250929050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561061b5761061b611e2c565b600181811c90821680611e6957607f821691505b602082108103610c3c57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761061b5761061b611e2c565b600082611ed357634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611eea57600080fd5b5051919050565b8082018082111561061b5761061b611e2c565b828152604060208201526000611f1d6040830184611a0d565b949350505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220962cfe1ce7a319df722406f5bc86ea45499c4c41549365f0b502d4c741cda6a564736f6c63430008140033a26469706673582212206c4c4820b89b2658f2c4e857de05f50980dba16b7b286c1a6646c4c7a52a382664736f6c63430008140033",
  "devdoc": {
    "details": "Factory contract for deploying new Cohort contracts with a creation fee",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor sets the price feed address for ETH/USD conversion",
        "params": {
          "_priceFeed": "Chainlink price feed address for ETH/USD"
        }
      },
      "createCohort(address,address,string,string)": {
        "details": "Creates a new Cohort contract",
        "params": {
          "_name": "Name of the cohort",
          "_primaryAdmin": "Address of the primary admin",
          "_tokenAddress": "Address of ERC20 token (zero address for ETH)"
        },
        "returns": {
          "_0": "Address of the newly created cohort"
        }
      },
      "getAllCohorts()": {
        "details": "Gets all created cohorts",
        "returns": {
          "_0": "Array of cohort addresses"
        }
      },
      "getRequiredEthAmount()": {
        "details": "Calculates required ETH amount for creation fee",
        "returns": {
          "_0": "Required ETH amount in wei"
        }
      },
      "getTotalCohorts()": {
        "details": "Gets the total number of created cohorts",
        "returns": {
          "_0": "Number of cohorts"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePriceFeed(address)": {
        "details": "Updates the price feed address",
        "params": {
          "_newPriceFeed": "New price feed address"
        }
      }
    },
    "title": "CohortFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 433,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2384,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 2393,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "isCohort",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2396,
        "contract": "contracts/CohortFactory.sol:CohortFactory",
        "label": "cohorts",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
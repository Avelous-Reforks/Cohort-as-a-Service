{
  "address": "0x8E2Cac0A056a0e50FDCBff70fDaA528b1E468b56",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primaryAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_cycle",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_builders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_requiresApproval",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyWithdrawnOneTime",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimum",
          "type": "uint256"
        }
      ],
      "name": "BelowMinimumCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BuilderAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EtherSendingFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlocked",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFundsInContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlocked",
          "type": "uint256"
        }
      ],
      "name": "InsufficientInStream",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBuilderAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNewAdminAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthsMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxBuildersReached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "providedLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLength",
          "type": "uint256"
        }
      ],
      "name": "MaxNameLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "builder",
          "type": "address"
        }
      ],
      "name": "NoActiveStreamForBuilder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoValueSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingWithdrawRequestExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawRequestAlreadyCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawRequestNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawRequestNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddBuilder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "AdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "AdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "requiresApproval",
          "type": "bool"
        }
      ],
      "name": "ApprovalRequirementChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ContractDrained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "name": "ContractLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20FundsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "PrimaryAdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UpdateBuilder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "WithdrawRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeBuilders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_builders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        }
      ],
      "name": "addBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "addBuilderStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_builders",
          "type": "address[]"
        }
      ],
      "name": "allBuildersData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "last",
              "type": "uint256"
            }
          ],
          "internalType": "struct Cohort.BuilderStreamInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "approveWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "builderIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cycle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "drainContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fundContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isERC20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isONETIME",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shouldGrant",
          "type": "bool"
        }
      ],
      "name": "modifyAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "rejectWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        }
      ],
      "name": "removeBuilderStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requireApprovalForWithdrawals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "requiresApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_requiresApproval",
          "type": "bool"
        }
      ],
      "name": "setBuilderApprovalRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        }
      ],
      "name": "streamWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "streamingBuilders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "last",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "toggleContractApprovalRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "toggleLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPrimaryAdmin",
          "type": "address"
        }
      ],
      "name": "transferPrimaryAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        }
      ],
      "name": "unlockedBuilderAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newCap",
          "type": "uint256"
        }
      ],
      "name": "updateBuilderStreamCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x49bca2001746c0ec3c48ce4322b859d8735fe47e53f28effa5d5d931dbe153a4",
  "receipt": {
    "to": null,
    "from": "0x5F1b4cFfD8B7B3653197149bC046C493060B0bd7",
    "contractAddress": "0x8E2Cac0A056a0e50FDCBff70fDaA528b1E468b56",
    "transactionIndex": 18,
    "gasUsed": "3109462",
    "logsBloom": "0x00000004000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004020000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000010001000000000010000000000000000000000000000010000000000000000000100000000000020000000000000000400000001000000000002000000000000000000000000000000",
    "blockHash": "0x606b1c85e561b4d21d322cb0a06011ddd670f14c2a548ed1082ae152474e8331",
    "transactionHash": "0x49bca2001746c0ec3c48ce4322b859d8735fe47e53f28effa5d5d931dbe153a4",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 23529555,
        "transactionHash": "0x49bca2001746c0ec3c48ce4322b859d8735fe47e53f28effa5d5d931dbe153a4",
        "address": "0x8E2Cac0A056a0e50FDCBff70fDaA528b1E468b56",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a8df02c5607100eb108b5c39dcdd8c2ae44185df",
          "0x0000000000000000000000005f1b4cffd8b7b3653197149bc046c493060b0bd7"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0x606b1c85e561b4d21d322cb0a06011ddd670f14c2a548ed1082ae152474e8331"
      }
    ],
    "blockNumber": 23529555,
    "cumulativeGasUsed": "7575423",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa8DF02c5607100Eb108B5C39dCdD8c2aE44185Df",
    "0x0000000000000000000000000000000000000000",
    "Cohort",
    "Cohort contract",
    2592000,
    [],
    [],
    false
  ],
  "numDeployments": 16,
  "solcInputHash": "6b9a86c1412d007f896592f35ce845c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primaryAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_builders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_requiresApproval\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyWithdrawnOneTime\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"BelowMinimumCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuilderAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EtherSendingFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"}],\"name\":\"InsufficientFundsInContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"}],\"name\":\"InsufficientInStream\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBuilderAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNewAdminAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxBuildersReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLength\",\"type\":\"uint256\"}],\"name\":\"MaxNameLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"}],\"name\":\"NoActiveStreamForBuilder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoValueSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingWithdrawRequestExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawRequestAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawRequestNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawRequestNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddBuilder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"requiresApproval\",\"type\":\"bool\"}],\"name\":\"ApprovalRequirementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContractDrained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"ContractLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"PrimaryAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateBuilder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"WithdrawApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"WithdrawRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"WithdrawRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeBuilders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_builders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"}],\"name\":\"addBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"addBuilderStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_builders\",\"type\":\"address[]\"}],\"name\":\"allBuildersData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"}],\"internalType\":\"struct Cohort.BuilderStreamInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"approveWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"builderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"drainContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isONETIME\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldGrant\",\"type\":\"bool\"}],\"name\":\"modifyAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"rejectWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"}],\"name\":\"removeBuilderStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireApprovalForWithdrawals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requiresApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_requiresApproval\",\"type\":\"bool\"}],\"name\":\"setBuilderApprovalRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"streamWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"streamingBuilders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"toggleContractApprovalRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"toggleLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPrimaryAdmin\",\"type\":\"address\"}],\"name\":\"transferPrimaryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"}],\"name\":\"unlockedBuilderAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"updateBuilderStreamCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Cohort.sol\":\"Cohort\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Cohort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n//A smart contract for streaming Eth or ERC20 tokens to builders\\n\\n// Custom errors\\nerror NoValueSent();\\nerror InsufficientFundsInContract(uint256 requested, uint256 unlocked);\\nerror NoActiveStreamForBuilder(address builder);\\nerror InsufficientInStream(uint256 requested, uint256 unlocked);\\nerror EtherSendingFailed();\\nerror LengthsMismatch();\\nerror InvalidBuilderAddress();\\nerror BuilderAlreadyExists();\\nerror ContractIsLocked();\\nerror MaxBuildersReached();\\nerror AccessDenied();\\nerror InvalidTokenAddress();\\nerror NoFundsInContract();\\nerror ERC20TransferFailed();\\nerror ERC20SendingFailed(address token, address recipient);\\nerror ERC20FundsTransferFailed(address token, address to, uint256 amount);\\nerror BelowMinimumCap(uint256 provided, uint256 minimum);\\nerror NotAuthorized();\\nerror InvalidNewAdminAddress();\\nerror MaxNameLength(uint256 providedLength, uint256 maxLength);\\n\\nerror NoWithdrawRequest();\\nerror WithdrawRequestNotApproved();\\nerror WithdrawRequestAlreadyCompleted();\\nerror WithdrawRequestNotFound();\\nerror PendingWithdrawRequestExists();\\n\\nerror AlreadyWithdrawnOneTime();\\n\\ncontract Cohort is AccessControl, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant MAXCREATORS = 25;\\n    uint256 constant MINIMUM_CAP = 0.00001 ether;\\n    uint256 constant MINIMUM_ERC20_CAP = 1 * 10 ** 6;\\n    uint256 constant MAX_NAME_LENGTH = 40;\\n\\n    // Cycle duration for the stream\\n    uint256 public cycle;\\n\\n    // ERC20 support\\n    bool public isERC20;\\n\\n    // One time withdraw stream\\n    bool public isONETIME;\\n\\n    // Cohort lock control\\n    bool public locked;\\n\\n    // Cohort approval requirement\\n    bool public requireApprovalForWithdrawals;\\n\\n    // Cohort name\\n    string public name;\\n\\n    // Cohort description\\n    string public description;\\n\\n    // Token address for ERC20 support\\n    address public tokenAddress;\\n\\n    // Primary admin for remaining balances\\n    address public primaryAdmin;\\n\\n    // Constructor to setup admin role and initial builders\\n    constructor(\\n        address _primaryAdmin,\\n        address _tokenAddress,\\n        string memory _name,\\n        string memory _description,\\n        uint256 _cycle,\\n        address[] memory _builders,\\n        uint256[] memory _caps,\\n        bool _requiresApproval\\n    ) {\\n        if (bytes(_name).length > MAX_NAME_LENGTH) revert MaxNameLength(bytes(_name).length, MAX_NAME_LENGTH);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _primaryAdmin);\\n        isAdmin[_primaryAdmin] = true;\\n        primaryAdmin = _primaryAdmin;\\n        name = _name;\\n        description = _description;\\n        cycle = _cycle;\\n        requireApprovalForWithdrawals = _requiresApproval;\\n\\n        if (_tokenAddress != address(0)) {\\n            isERC20 = true;\\n            tokenAddress = _tokenAddress;\\n        }\\n\\n        if (_cycle == 0) {\\n            isONETIME = true;\\n        }\\n\\n        if (_builders.length == 0) return;\\n\\n        uint256 cLength = _builders.length;\\n        if (_builders.length >= MAXCREATORS) revert MaxBuildersReached();\\n        if (cLength != _caps.length) revert LengthsMismatch();\\n        for (uint256 i = 0; i < cLength; ) {\\n            validateBuilderInput(payable(_builders[i]), _caps[i]);\\n\\n            if (cycle == 0) {\\n                streamingBuilders[_builders[i]] = BuilderStreamInfo(_caps[i], type(uint256).max);\\n            } else {\\n                streamingBuilders[_builders[i]] = BuilderStreamInfo(_caps[i], block.timestamp - _cycle);\\n            }\\n\\n            activeBuilders.push(_builders[i]);\\n            builderIndex[_builders[i]] = activeBuilders.length - 1;\\n            emit AddBuilder(_builders[i], _caps[i]);\\n\\n            if (_requiresApproval) {\\n                requiresApproval[_builders[i]] = true;\\n                emit ApprovalRequirementChanged(_builders[i], true);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // Function to modify admin roles\\n    function modifyAdminRole(address adminAddress, bool shouldGrant) public onlyAdmin {\\n        if (shouldGrant) {\\n            if (streamingBuilders[adminAddress].cap != 0) revert InvalidBuilderAddress();\\n            grantRole(DEFAULT_ADMIN_ROLE, adminAddress);\\n            isAdmin[adminAddress] = true;\\n            emit AdminAdded(adminAddress);\\n        } else {\\n            if (adminAddress == primaryAdmin) revert AccessDenied();\\n            revokeRole(DEFAULT_ADMIN_ROLE, adminAddress);\\n            isAdmin[adminAddress] = false;\\n            emit AdminRemoved(adminAddress);\\n        }\\n    }\\n\\n    // Struct to store information about builder's stream\\n    struct BuilderStreamInfo {\\n        uint256 cap; // Maximum amount of funds that can be withdrawn in a cycle\\n        uint256 last; // The timestamp of the last withdrawal\\n    }\\n\\n    // Function to transfer primary admin role\\n    function transferPrimaryAdmin(address newPrimaryAdmin) public {\\n        if (msg.sender != primaryAdmin) revert NotAuthorized();\\n        if (newPrimaryAdmin == address(0)) revert InvalidNewAdminAddress();\\n\\n        primaryAdmin = newPrimaryAdmin;\\n\\n        _revokeRole(DEFAULT_ADMIN_ROLE, primaryAdmin);\\n        _grantRole(DEFAULT_ADMIN_ROLE, newPrimaryAdmin);\\n\\n        emit PrimaryAdminTransferred(newPrimaryAdmin);\\n    }\\n\\n    // Withdrawal request structure\\n    struct WithdrawRequest {\\n        uint256 amount;\\n        string reason;\\n        bool approved;\\n        bool completed;\\n        uint256 requestTime;\\n    }\\n\\n    // Mapping to store withdrawal requests for each builder\\n    mapping(address => WithdrawRequest[]) public withdrawRequests;\\n\\n    // Mapping to track whether specific builders require approval\\n    mapping(address => bool) public requiresApproval;\\n\\n    // Modifier to check for admin permissions\\n    modifier onlyAdmin() {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AccessDenied();\\n        _;\\n    }\\n\\n    // Mapping to store the stream info of each builder\\n    mapping(address => BuilderStreamInfo) public streamingBuilders;\\n    // Mapping to store the index of each builder in the activeBuilders array\\n    mapping(address => uint256) public builderIndex;\\n    // Array to store the addresses of all active builders\\n    address[] public activeBuilders;\\n    // Mapping to see if an address is admin\\n    mapping(address => bool) public isAdmin;\\n\\n    // Declare events to log various activities\\n    event FundsReceived(address indexed from, uint256 amount);\\n    event Withdraw(address indexed to, uint256 amount, string reason);\\n    event AddBuilder(address indexed to, uint256 amount);\\n    event UpdateBuilder(address indexed to, uint256 amount);\\n\\n    event AdminAdded(address indexed to);\\n    event AdminRemoved(address indexed to);\\n    event ContractDrained(uint256 amount);\\n    event PrimaryAdminTransferred(address indexed newAdmin);\\n    event ERC20FundsReceived(address indexed token, address indexed from, uint256 amount);\\n\\n    event ContractLocked(bool locked);\\n\\n    // Withdrawal request events\\n    event WithdrawRequested(address indexed builder, uint256 requestId, uint256 amount, string reason);\\n    event WithdrawApproved(address indexed builder, uint256 requestId);\\n    event WithdrawRejected(address indexed builder, uint256 requestId);\\n    event WithdrawCompleted(address indexed builder, uint256 requestId, uint256 amount);\\n    event ApprovalRequirementChanged(address indexed builder, bool requiresApproval);\\n\\n    // Check if a stream for a builder is active\\n    modifier isStreamActive(address _builder) {\\n        if (streamingBuilders[_builder].cap == 0) revert NoActiveStreamForBuilder(_builder);\\n        _;\\n    }\\n\\n    // Check if the contract is locked\\n    modifier isCohortLocked() {\\n        if (locked) revert ContractIsLocked();\\n        _;\\n    }\\n\\n    // Modifier to check if builder has no pending withdrawal requests\\n    modifier noPendingRequests(address _builder) {\\n        bool hasPending = false;\\n        uint256 requestCount = withdrawRequests[_builder].length;\\n\\n        for (uint256 i = 0; i < requestCount; ) {\\n            if (!withdrawRequests[_builder][i].completed) {\\n                hasPending = true;\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (hasPending) revert PendingWithdrawRequestExists();\\n        _;\\n    }\\n\\n    // Fund contract\\n    function fundContract(uint256 _amount) public payable {\\n        if (!isERC20) {\\n            if (msg.value == 0) revert NoValueSent();\\n            emit FundsReceived(msg.sender, msg.value);\\n        } else {\\n            if (_amount == 0) revert NoValueSent();\\n\\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            emit ERC20FundsReceived(tokenAddress, msg.sender, _amount);\\n        }\\n    }\\n\\n    // Lock or unlock the contract\\n    function toggleLock(bool _enable) public onlyAdmin {\\n        locked = _enable;\\n        emit ContractLocked(_enable);\\n    }\\n\\n    // Get all builders' data.\\n    function allBuildersData(address[] calldata _builders) public view returns (BuilderStreamInfo[] memory) {\\n        uint256 builderLength = _builders.length;\\n        BuilderStreamInfo[] memory result = new BuilderStreamInfo[](builderLength);\\n        for (uint256 i = 0; i < builderLength; ) {\\n            address builderAddress = _builders[i];\\n            result[i] = streamingBuilders[builderAddress];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // Get the unlocked amount for a builder.\\n    function unlockedBuilderAmount(address _builder) public view isStreamActive(_builder) returns (uint256) {\\n        BuilderStreamInfo memory builderStream = streamingBuilders[_builder];\\n\\n        if (isONETIME) {\\n            if (builderStream.last == type(uint256).max) {\\n                return builderStream.cap;\\n            } else {\\n                return 0;\\n            }\\n        }\\n\\n        uint256 timePassed = block.timestamp - builderStream.last;\\n\\n        if (timePassed < cycle) {\\n            uint256 unlockedAmount = (timePassed * builderStream.cap) / cycle;\\n            return unlockedAmount;\\n        } else {\\n            return builderStream.cap;\\n        }\\n    }\\n\\n    // Add a new builder's stream. No more than 25 builders are allowed.\\n    function addBuilderStream(address payable _builder, uint256 _cap) public onlyAdmin {\\n        // Check for maximum builders.\\n        if (activeBuilders.length >= MAXCREATORS) revert MaxBuildersReached();\\n\\n        validateBuilderInput(_builder, _cap);\\n\\n        if (isONETIME) {\\n            streamingBuilders[_builder] = BuilderStreamInfo(_cap, type(uint256).max);\\n        } else {\\n            streamingBuilders[_builder] = BuilderStreamInfo(_cap, block.timestamp - cycle);\\n        }\\n\\n        activeBuilders.push(_builder);\\n        builderIndex[_builder] = activeBuilders.length - 1;\\n\\n        if (requireApprovalForWithdrawals) {\\n            requiresApproval[_builder] = true;\\n            emit ApprovalRequirementChanged(_builder, true);\\n        }\\n        emit AddBuilder(_builder, _cap);\\n    }\\n\\n    // Add a batch of builders.\\n    function addBatch(address[] memory _builders, uint256[] memory _caps) public onlyAdmin {\\n        uint256 cLength = _builders.length;\\n        if (_builders.length >= MAXCREATORS) revert MaxBuildersReached();\\n        if (cLength != _caps.length) revert LengthsMismatch();\\n        for (uint256 i = 0; i < cLength; ) {\\n            addBuilderStream(payable(_builders[i]), _caps[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // Validate the input for a builder\\n    function validateBuilderInput(address payable _builder, uint256 _cap) internal view {\\n        //check if minimum cap is met, eth mode and erc20 mode\\n        if (_cap < MINIMUM_CAP && !isERC20) revert BelowMinimumCap(_cap, MINIMUM_CAP);\\n        if (_cap < MINIMUM_ERC20_CAP && isERC20) revert BelowMinimumCap(_cap, MINIMUM_ERC20_CAP);\\n        if (_builder == address(0)) revert InvalidBuilderAddress();\\n        if (isAdmin[_builder]) revert InvalidBuilderAddress();\\n        if (streamingBuilders[_builder].cap > 0) revert BuilderAlreadyExists();\\n    }\\n\\n    // Update a builder's stream cap\\n    function updateBuilderStreamCap(\\n        address payable _builder,\\n        uint256 _newCap\\n    ) public onlyAdmin isStreamActive(_builder) {\\n        if (_newCap < MINIMUM_CAP && !isERC20) revert BelowMinimumCap(_newCap, MINIMUM_CAP);\\n        if (_newCap < MINIMUM_ERC20_CAP && isERC20) revert BelowMinimumCap(_newCap, MINIMUM_ERC20_CAP);\\n\\n        BuilderStreamInfo storage builderStream = streamingBuilders[_builder];\\n\\n        builderStream.cap = _newCap;\\n\\n        builderStream.last = block.timestamp - (cycle);\\n\\n        emit UpdateBuilder(_builder, _newCap);\\n    }\\n\\n    // Remove a builder's stream\\n    function removeBuilderStream(address _builder) public onlyAdmin isStreamActive(_builder) {\\n        uint256 builderIndexToRemove = builderIndex[_builder];\\n        address lastBuilder = activeBuilders[activeBuilders.length - 1];\\n\\n        if (_builder != lastBuilder) {\\n            activeBuilders[builderIndexToRemove] = lastBuilder;\\n            builderIndex[lastBuilder] = builderIndexToRemove;\\n        }\\n\\n        activeBuilders.pop();\\n\\n        delete streamingBuilders[_builder];\\n        delete builderIndex[_builder];\\n\\n        emit UpdateBuilder(_builder, 0);\\n    }\\n\\n    // Set whether a builder requires approval for withdrawals\\n    function setBuilderApprovalRequirement(\\n        address _builder,\\n        bool _requiresApproval\\n    ) public onlyAdmin isStreamActive(_builder) {\\n        requiresApproval[_builder] = _requiresApproval;\\n        emit ApprovalRequirementChanged(_builder, _requiresApproval);\\n    }\\n\\n    // Set whether this contracts requires approval for withdrawals\\n    function toggleContractApprovalRequirement(bool _enable) public onlyAdmin {\\n        requireApprovalForWithdrawals = _enable;\\n        emit ApprovalRequirementChanged(address(this), _enable);\\n    }\\n\\n    // Request a withdrawal - for builders that require approval\\n    function _requestWithdraw(uint256 _amount, string memory _reason) private noPendingRequests(msg.sender) {\\n        // Check if the builder has enough unlocked to withdraw\\n        uint256 totalAmountCanWithdraw = unlockedBuilderAmount(msg.sender);\\n        if (totalAmountCanWithdraw < _amount) {\\n            revert InsufficientInStream(_amount, totalAmountCanWithdraw);\\n        }\\n\\n        // Create withdrawal request\\n        withdrawRequests[msg.sender].push(\\n            WithdrawRequest({\\n                amount: _amount,\\n                reason: _reason,\\n                approved: false,\\n                completed: false,\\n                requestTime: block.timestamp\\n            })\\n        );\\n\\n        uint256 requestId = withdrawRequests[msg.sender].length - 1;\\n        emit WithdrawRequested(msg.sender, requestId, _amount, _reason);\\n    }\\n\\n    // Approve a withdrawal request - only admins can call this\\n    function approveWithdraw(address _builder, uint256 _requestId) public onlyAdmin {\\n        if (withdrawRequests[_builder].length <= _requestId) revert WithdrawRequestNotFound();\\n        WithdrawRequest storage request = withdrawRequests[_builder][_requestId];\\n\\n        if (request.completed) revert WithdrawRequestAlreadyCompleted();\\n\\n        request.approved = true;\\n        emit WithdrawApproved(_builder, _requestId);\\n    }\\n\\n    // Reject a withdrawal request - only admins can call this\\n    function rejectWithdraw(address _builder, uint256 _requestId) public onlyAdmin {\\n        if (withdrawRequests[_builder].length <= _requestId) revert WithdrawRequestNotFound();\\n        WithdrawRequest storage request = withdrawRequests[_builder][_requestId];\\n\\n        if (request.completed) revert WithdrawRequestAlreadyCompleted();\\n\\n        // Delete the request by marking it as completed but not approved\\n        request.completed = true;\\n        request.approved = false;\\n        emit WithdrawRejected(_builder, _requestId);\\n    }\\n\\n    // Complete a withdrawal that was previously approved\\n    function completeWithdraw(uint256 _requestId) public isStreamActive(msg.sender) nonReentrant isCohortLocked {\\n        // Check if request exists\\n        if (withdrawRequests[msg.sender].length <= _requestId) revert WithdrawRequestNotFound();\\n        WithdrawRequest storage request = withdrawRequests[msg.sender][_requestId];\\n\\n        // Check if request is completed\\n        if (request.completed) revert WithdrawRequestAlreadyCompleted();\\n\\n        // Check if approval is required and given\\n        if (requiresApproval[msg.sender] && !request.approved) revert WithdrawRequestNotApproved();\\n\\n        if (isONETIME) {\\n            _processOneTimeWithdraw();\\n        } else {\\n            _processStreamWithdraw(request.amount);\\n        }\\n\\n        // Mark request as completed\\n        request.completed = true;\\n\\n        emit WithdrawCompleted(msg.sender, _requestId, request.amount);\\n        emit Withdraw(msg.sender, request.amount, request.reason);\\n    }\\n\\n    function streamWithdraw(\\n        uint256 _amount,\\n        string memory _reason\\n    ) public isStreamActive(msg.sender) nonReentrant isCohortLocked {\\n        if (requiresApproval[msg.sender]) {\\n            _requestWithdraw(_amount, _reason);\\n            return;\\n        }\\n\\n        if (isONETIME) {\\n            _processOneTimeWithdraw();\\n        } else {\\n            _processStreamWithdraw(_amount);\\n        }\\n\\n        emit Withdraw(msg.sender, _amount, _reason);\\n    }\\n\\n    function _processStreamWithdraw(uint256 _amount) private {\\n        uint256 totalAmountCanWithdraw = unlockedBuilderAmount(msg.sender);\\n        if (totalAmountCanWithdraw < _amount) {\\n            revert InsufficientInStream(_amount, totalAmountCanWithdraw);\\n        }\\n\\n        // Process the withdrawal similar to streamWithdraw\\n        BuilderStreamInfo storage builderStream = streamingBuilders[msg.sender];\\n        uint256 builderstreamLast = builderStream.last;\\n        uint256 timestamp = block.timestamp;\\n        uint256 cappedLast = timestamp - cycle;\\n        if (builderstreamLast < cappedLast) {\\n            builderstreamLast = cappedLast;\\n        }\\n\\n        if (!isERC20) {\\n            uint256 contractFunds = address(this).balance;\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            (bool sent, ) = msg.sender.call{ value: _amount }(\\\"\\\");\\n            if (!sent) revert EtherSendingFailed();\\n        } else {\\n            uint256 contractFunds = IERC20(tokenAddress).balanceOf(address(this));\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            IERC20(tokenAddress).safeTransfer(msg.sender, _amount);\\n        }\\n\\n        // Update last withdrawal time\\n        builderStream.last = builderstreamLast + (((timestamp - builderstreamLast) * _amount) / totalAmountCanWithdraw);\\n    }\\n\\n    function _processOneTimeWithdraw() private {\\n        BuilderStreamInfo storage builderStream = streamingBuilders[msg.sender];\\n\\n        // Check if the builder has already withdrawn\\n        if (builderStream.last != type(uint256).max) {\\n            revert AlreadyWithdrawnOneTime();\\n        }\\n\\n        uint256 _amount = builderStream.cap;\\n\\n        if (!isERC20) {\\n            uint256 contractFunds = address(this).balance;\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            (bool sent, ) = msg.sender.call{ value: _amount }(\\\"\\\");\\n            if (!sent) revert EtherSendingFailed();\\n        } else {\\n            uint256 contractFunds = IERC20(tokenAddress).balanceOf(address(this));\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            IERC20(tokenAddress).safeTransfer(msg.sender, _amount);\\n        }\\n\\n        builderStream.last = block.timestamp;\\n    }\\n\\n    // Drain the contract to the primary admin address\\n    function drainContract(address _token) public onlyAdmin nonReentrant {\\n        uint256 remainingBalance;\\n\\n        // Drain Ether\\n        if (_token == address(0)) {\\n            remainingBalance = address(this).balance;\\n            if (remainingBalance > 0) {\\n                (bool sent, ) = primaryAdmin.call{ value: remainingBalance }(\\\"\\\");\\n                if (!sent) revert EtherSendingFailed();\\n                emit ContractDrained(remainingBalance);\\n            }\\n            return;\\n        }\\n\\n        // Drain ERC20 tokens\\n        remainingBalance = IERC20(_token).balanceOf(address(this));\\n        if (remainingBalance > 0) {\\n            IERC20(_token).safeTransfer(primaryAdmin, remainingBalance);\\n            emit ContractDrained(remainingBalance);\\n        }\\n    }\\n\\n    // Fallback function to receive ether\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x386deaea22e7de7e627d82d5430d0d446458353d2a549fb9193d4ae9facc73c0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102335760003560e01c806365cd2a4e1161012e5780639de1b23d116100ab578063a8397ddc1161006f578063a8397ddc14610710578063af40253214610730578063b19cb81014610750578063cf3090121461076f578063d547741f1461078f57600080fd5b80639de1b23d1461066e578063a217fddf1461068e578063a46495ac146106a3578063a4adcb61146106d0578063a7839334146106f057600080fd5b80638216d506116100f25780638216d506146105b657806382c2aff7146105d65780638c0a2d56146105f657806391d14854146106165780639d76ea581461063657600080fd5b806365cd2a4e146105035780636d6ca319146105235780637284e416146105545780637c6f1b591461056957806380c9b2f61461059657600080fd5b806324d7806c116101bc5780633519a2f8116101805780633519a2f81461045157806336568abe14610464578063377c9815146104845780634e1ca120146104cd5780636190c9d5146104ed57600080fd5b806324d7806c146103a757806329d36c46146103d75780632eb67f53146103f75780632f2ff15d146104115780633109b16e1461043157600080fd5b80630ca2c6a9116102035780630ca2c6a9146102e85780630d12cc6814610309578063116e72db146103295780632087ed5c14610349578063248a9ca31461036957600080fd5b806208359d1461023f57806301ffc9a71461026157806306fdde0314610296578063070092d4146102b857600080fd5b3661023a57005b600080fd5b34801561024b57600080fd5b5061025f61025a366004612adf565b6107af565b005b34801561026d57600080fd5b5061028161027c366004612b18565b610881565b60405190151581526020015b60405180910390f35b3480156102a257600080fd5b506102ab6108b8565b60405161028d9190612b92565b3480156102c457600080fd5b506102816102d3366004612ba5565b60096020526000908152604090205460ff1681565b3480156102f457600080fd5b50600354610281906301000000900460ff1681565b34801561031557600080fd5b5061025f610324366004612c98565b610946565b34801561033557600080fd5b5061025f610344366004612adf565b610a07565b34801561035557600080fd5b5061025f610364366004612d5a565b610b49565b34801561037557600080fd5b50610399610384366004612d5a565b60009081526020819052604090206001015490565b60405190815260200161028d565b3480156103b357600080fd5b506102816103c2366004612ba5565b600d6020526000908152604090205460ff1681565b3480156103e357600080fd5b5061025f6103f2366004612d73565b610d6b565b34801561040357600080fd5b506003546102819060ff1681565b34801561041d57600080fd5b5061025f61042c366004612d9f565b610e83565b34801561043d57600080fd5b5061025f61044c366004612dc4565b610ead565b61025f61045f366004612d5a565b610f2f565b34801561047057600080fd5b5061025f61047f366004612d9f565b61100b565b34801561049057600080fd5b506104b861049f366004612ba5565b600a602052600090815260409020805460019091015482565b6040805192835260208301919091520161028d565b3480156104d957600080fd5b5061025f6104e8366004612d73565b611085565b3480156104f957600080fd5b5061039960025481565b34801561050f57600080fd5b5061025f61051e366004612dc4565b61119b565b34801561052f57600080fd5b5061054361053e366004612d73565b611219565b60405161028d959493929190612de1565b34801561056057600080fd5b506102ab6112fb565b34801561057557600080fd5b50610589610584366004612e17565b611308565b60405161028d9190612e8c565b3480156105a257600080fd5b506103996105b1366004612ba5565b611407565b3480156105c257600080fd5b5061025f6105d1366004612d73565b6114fc565b3480156105e257600080fd5b5061025f6105f1366004612d73565b61165d565b34801561060257600080fd5b5061025f610611366004612ba5565b611872565b34801561062257600080fd5b50610281610631366004612d9f565b611930565b34801561064257600080fd5b50600654610656906001600160a01b031681565b6040516001600160a01b03909116815260200161028d565b34801561067a57600080fd5b50600754610656906001600160a01b031681565b34801561069a57600080fd5b50610399600081565b3480156106af57600080fd5b506103996106be366004612ba5565b600b6020526000908152604090205481565b3480156106dc57600080fd5b5061025f6106eb366004612ba5565b611959565b3480156106fc57600080fd5b5061065661070b366004612d5a565b611b36565b34801561071c57600080fd5b5061025f61072b366004612edb565b611b60565b34801561073c57600080fd5b5061025f61074b366004612ba5565b611c7c565b34801561075c57600080fd5b5060035461028190610100900460ff1681565b34801561077b57600080fd5b506003546102819062010000900460ff1681565b34801561079b57600080fd5b5061025f6107aa366004612d9f565b611e20565b6107ba600033611930565b6107d757604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600a60205260408120548391036108205760405163f4c8fba360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b038316600081815260096020908152604091829020805460ff191686151590811790915591519182527f70d2c92da609a3045e6b2a21e9d4cd5dc02f15a3830961912b03f5b236b78c8b91015b60405180910390a2505050565b60006001600160e01b03198216637965db0b60e01b14806108b257506301ffc9a760e01b6001600160e01b03198316145b92915050565b600480546108c590612f7a565b80601f01602080910402602001604051908101604052809291908181526020018280546108f190612f7a565b801561093e5780601f106109135761010080835404028352916020019161093e565b820191906000526020600020905b81548152906001019060200180831161092157829003601f168201915b505050505081565b610951600033611930565b61096e57604051634ca8886760e01b815260040160405180910390fd5b8151601981106109915760405163104e7cef60e31b815260040160405180910390fd5b815181146109b25760405163586cb9e160e01b815260040160405180910390fd5b60005b81811015610a01576109f98482815181106109d2576109d2612fae565b60200260200101518483815181106109ec576109ec612fae565b602002602001015161165d565b6001016109b5565b50505050565b610a12600033611930565b610a2f57604051634ca8886760e01b815260040160405180910390fd5b8015610ac4576001600160a01b0382166000908152600a602052604090205415610a6c5760405163094d784960e21b815260040160405180910390fd5b610a77600083610e83565b6001600160a01b0382166000818152600d6020526040808220805460ff19166001179055517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e3399190a25050565b6007546001600160a01b0390811690831603610af357604051634ca8886760e01b815260040160405180910390fd5b610afe600083611e20565b6001600160a01b0382166000818152600d6020526040808220805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f9190a25b5050565b336000818152600a60205260408120549003610b835760405163f4c8fba360e01b81526001600160a01b0382166004820152602401610817565b600260015403610ba55760405162461bcd60e51b815260040161081790612fc4565b600260015560035462010000900460ff1615610bd45760405163af9e1b4360e01b815260040160405180910390fd5b336000908152600860205260409020548210610c0357604051632bb8b38560e11b815260040160405180910390fd5b336000908152600860205260408120805484908110610c2457610c24612fae565b906000526020600020906004020190508060020160019054906101000a900460ff1615610c6457604051635a4a8a4360e11b815260040160405180910390fd5b3360009081526009602052604090205460ff168015610c885750600281015460ff16155b15610ca657604051632b811a4760e11b815260040160405180910390fd5b600354610100900460ff1615610cc357610cbe611e45565b610cce565b8054610cce90611fdf565b60028101805461ff001916610100179055805460405133917f0502837c293951f8cf960d168bcedcf3e4531ffd7010af47fe48bbff7917d9b491610d1a91878252602082015260400190565b60405180910390a2805460405133917f485f1bb6524c663555797e00171a10f341656e59b02d6b557a0a38ba7d5d975191610d5a91906001860190612ffb565b60405180910390a250506001805550565b610d76600033611930565b610d9357604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600860205260409020548110610dcb57604051632bb8b38560e11b815260040160405180910390fd5b6001600160a01b0382166000908152600860205260408120805483908110610df557610df5612fae565b906000526020600020906004020190508060020160019054906101000a900460ff1615610e3557604051635a4a8a4360e11b815260040160405180910390fd5b60028101805461ffff19166101001790556040516001600160a01b038416907f019d1297aa228eef7dd79b31640282cbe91fbc09dc0cbf5000ca5abf72805989906108749085815260200190565b600082815260208190526040902060010154610e9e816121e0565b610ea883836121ea565b505050565b610eb8600033611930565b610ed557604051634ca8886760e01b815260040160405180910390fd5b6003805482151563010000000263ff0000001990911617905560405130907f70d2c92da609a3045e6b2a21e9d4cd5dc02f15a3830961912b03f5b236b78c8b90610f2490841515815260200190565b60405180910390a250565b60035460ff16610f8c5734600003610f5a576040516327738acf60e21b815260040160405180910390fd5b60405134815233907f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f90602001610f24565b80600003610fad576040516327738acf60e21b815260040160405180910390fd5b600654610fc5906001600160a01b031633308461226e565b60065460405182815233916001600160a01b0316907fa17c2a1269d65f89b5c5688ce949fa4a7f59d8fcb9bbbac872d27a142b2b49e79060200160405180910390a35b50565b6001600160a01b038116331461107b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610817565b610b4582826122d9565b611090600033611930565b6110ad57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604090205481106110e557604051632bb8b38560e11b815260040160405180910390fd5b6001600160a01b038216600090815260086020526040812080548390811061110f5761110f612fae565b906000526020600020906004020190508060020160019054906101000a900460ff161561114f57604051635a4a8a4360e11b815260040160405180910390fd5b60028101805460ff191660011790556040516001600160a01b038416907f6f856c863eba32b6aca7d24f96817572a1f48382957c3dc9e8d4741f38afd72e906108749085815260200190565b6111a6600033611930565b6111c357604051634ca8886760e01b815260040160405180910390fd5b60038054821515620100000262ff0000199091161790556040517fb08f70f6219c5c2ed5e08e7cf45080e4840fde880b27a0841faf45475cd02d2e9061120e90831515815260200190565b60405180910390a150565b6008602052816000526040600020818154811061123557600080fd5b90600052602060002090600402016000915091505080600001549080600101805461125f90612f7a565b80601f016020809104026020016040519081016040528092919081815260200182805461128b90612f7a565b80156112d85780601f106112ad576101008083540402835291602001916112d8565b820191906000526020600020905b8154815290600101906020018083116112bb57829003601f168201915b505050506002830154600390930154919260ff8082169361010090920416915085565b600580546108c590612f7a565b60608160008167ffffffffffffffff81111561132657611326612bc2565b60405190808252806020026020018201604052801561136b57816020015b60408051808201909152600080825260208201528152602001906001900390816113445790505b50905060005b828110156113fe57600086868381811061138d5761138d612fae565b90506020020160208101906113a29190612ba5565b6001600160a01b0381166000908152600a602090815260409182902082518084019093528054835260010154908201528451919250908490849081106113ea576113ea612fae565b602090810291909101015250600101611371565b50949350505050565b6001600160a01b0381166000908152600a60205260408120548290820361144c5760405163f4c8fba360e01b81526001600160a01b0382166004820152602401610817565b6001600160a01b0383166000908152600a60209081526040918290208251808401909352805483526001015490820152600354610100900460ff16156114ab576000198160200151036114a1575191506114f6565b60009250506114f6565b60008160200151426114bd91906130a4565b90506002548110156114f1576002548251600091906114dc90846130b7565b6114e691906130ce565b94506114f692505050565b505191505b50919050565b611507600033611930565b61152457604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600a60205260408120548391036115685760405163f4c8fba360e01b81526001600160a01b0382166004820152602401610817565b6509184e72a00082108015611580575060035460ff16155b156115ad5760405163c281dd3b60e01b8152600481018390526509184e72a0006024820152604401610817565b620f4240821080156115c1575060035460ff165b156115eb5760405163c281dd3b60e01b815260048101839052620f42406024820152604401610817565b6001600160a01b0383166000908152600a6020526040902082815560025461161390426130a4565b60018201556040518381526001600160a01b038516907f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d5906020015b60405180910390a250505050565b611668600033611930565b61168557604051634ca8886760e01b815260040160405180910390fd5b600c546019116116a85760405163104e7cef60e31b815260040160405180910390fd5b6116b2828261233e565b600354610100900460ff16156117025760408051808201825282815260001960208083019182526001600160a01b0386166000908152600a9091529290922090518155905160019091015561174c565b60405180604001604052808281526020016002544261172191906130a4565b90526001600160a01b0383166000908152600a60209081526040909120825181559101516001909101555b600c80546001808201835560008390527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790910180546001600160a01b0319166001600160a01b03861617905590546117a591906130a4565b6001600160a01b0383166000908152600b60205260409020556003546301000000900460ff161561182b576001600160a01b038216600081815260096020908152604091829020805460ff1916600190811790915591519182527f70d2c92da609a3045e6b2a21e9d4cd5dc02f15a3830961912b03f5b236b78c8b910160405180910390a25b816001600160a01b03167f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c38260405161186691815260200190565b60405180910390a25050565b6007546001600160a01b0316331461189d5760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166118c45760405163b5aaecfd60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556118ee906000906122d9565b6118f96000826121ea565b6040516001600160a01b038216907fb8121b611a666c4d7c03b96ba9dbc315332dc3f1aa77a22c0a1c162e55c5c32b90600090a250565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b611964600033611930565b61198157604051634ca8886760e01b815260040160405180910390fd5b6002600154036119a35760405162461bcd60e51b815260040161081790612fc4565b600260015560006001600160a01b038216611a6f5750478015611a69576007546040516000916001600160a01b03169083908381818185875af1925050503d8060008114611a0d576040519150601f19603f3d011682016040523d82523d6000602084013e611a12565b606091505b5050905080611a3457604051637d6a86b760e11b815260040160405180910390fd5b6040518281527f217f10a82904d12e2798042bffcd3f5c3cab8f7ea5638a4c0b804a5d6487c8fa9060200160405180910390a1505b50611b2f565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad791906130f0565b90508015611b2d57600754611af9906001600160a01b03848116911683612459565b6040518181527f217f10a82904d12e2798042bffcd3f5c3cab8f7ea5638a4c0b804a5d6487c8fa9060200160405180910390a15b505b5060018055565b600c8181548110611b4657600080fd5b6000918252602090912001546001600160a01b0316905081565b336000818152600a60205260408120549003611b9a5760405163f4c8fba360e01b81526001600160a01b0382166004820152602401610817565b600260015403611bbc5760405162461bcd60e51b815260040161081790612fc4565b600260015560035462010000900460ff1615611beb5760405163af9e1b4360e01b815260040160405180910390fd5b3360009081526009602052604090205460ff1615611c1257611c0d8383612489565b611c73565b600354610100900460ff1615611c2f57611c2a611e45565b611c38565b611c3883611fdf565b336001600160a01b03167f485f1bb6524c663555797e00171a10f341656e59b02d6b557a0a38ba7d5d97518484604051610d5a929190613109565b50506001805550565b611c87600033611930565b611ca457604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0381166000908152600a6020526040812054829103611ce85760405163f4c8fba360e01b81526001600160a01b0382166004820152602401610817565b6001600160a01b0382166000908152600b6020526040812054600c8054919291611d14906001906130a4565b81548110611d2457611d24612fae565b6000918252602090912001546001600160a01b03908116915084168114611d935780600c8381548110611d5957611d59612fae565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559183168152600b909152604090208290555b600c805480611da457611da4613122565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b038616808352600a82526040808420848155600101849055600b835280842084905551928352917f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d5910161164f565b600082815260208190526040902060010154611e3b816121e0565b610ea883836122d9565b336000908152600a60205260409020600181015460001914611e7a57604051632de4346760e11b815260040160405180910390fd5b805460035460ff16611f22574781811015611eb257604051631508de4560e01b81526004810183905260248101829052604401610817565b604051600090339084908381818185875af1925050503d8060008114611ef4576040519150601f19603f3d011682016040523d82523d6000602084013e611ef9565b606091505b5050905080611f1b57604051637d6a86b760e11b815260040160405180910390fd5b5050611fd5565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8f91906130f0565b905081811015611fbc57604051631508de4560e01b81526004810183905260248101829052604401610817565b600654611fd3906001600160a01b03163384612459565b505b5042600190910155565b6000611fea33611407565b9050818110156120175760405163ba49c84f60e01b81526004810183905260248101829052604401610817565b336000908152600a6020526040812060018101546002549192909142919061203f90836130a4565b90508083101561204d578092505b60035460ff166120f357478681101561208357604051631508de4560e01b81526004810188905260248101829052604401610817565b604051600090339089908381818185875af1925050503d80600081146120c5576040519150601f19603f3d011682016040523d82523d6000602084013e6120ca565b606091505b50509050806120ec57604051637d6a86b760e11b815260040160405180910390fd5b50506121a6565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561213c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216091906130f0565b90508681101561218d57604051631508de4560e01b81526004810188905260248101829052604401610817565b6006546121a4906001600160a01b03163389612459565b505b84866121b285856130a4565b6121bc91906130b7565b6121c691906130ce565b6121d09084613138565b8460010181905550505050505050565b6110088133612662565b6121f48282611930565b610b45576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561222a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a019085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526126c6565b6122e38282611930565b15610b45576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6509184e72a00081108015612356575060035460ff16155b156123835760405163c281dd3b60e01b8152600481018290526509184e72a0006024820152604401610817565b620f424081108015612397575060035460ff165b156123c15760405163c281dd3b60e01b815260048101829052620f42406024820152604401610817565b6001600160a01b0382166123e85760405163094d784960e21b815260040160405180910390fd5b6001600160a01b0382166000908152600d602052604090205460ff16156124225760405163094d784960e21b815260040160405180910390fd5b6001600160a01b0382166000908152600a602052604090205415610b4557604051637fe8efbb60e01b815260040160405180910390fd5b6040516001600160a01b038316602482015260448101829052610ea890849063a9059cbb60e01b906064016122a2565b33600081815260086020526040812054815b81811015612501576001600160a01b03841660009081526008602052604090208054829081106124cd576124cd612fae565b906000526020600020906004020160020160019054906101000a900460ff166124f95760019250612501565b60010161249b565b5081156125215760405163ef97f13b60e01b815260040160405180910390fd5b600061252c33611407565b9050858110156125595760405163ba49c84f60e01b81526004810187905260248101829052604401610817565b336000908152600860209081526040808320815160a0810183528a81528084018a8152928101859052606081018590524260808201528154600181810184559286529390942084516004909402019283559051908201906125ba9082613199565b50604082810151600283018054606086015115156101000261ff00199315159390931661ffff1990911617919091179055608090920151600390910155336000908152600860205290812054612612906001906130a4565b9050336001600160a01b03167f0aed8180bd84f93fd8a307d9c534f2081366c2231daec597d51911c89fdae2a682898960405161265193929190613259565b60405180910390a250505050505050565b61266c8282611930565b610b4557612684816001600160a01b03166014612798565b61268f836020612798565b6040516020016126a0929190613281565b60408051601f198184030181529082905262461bcd60e51b825261081791600401612b92565b600061271b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661293b9092919063ffffffff16565b805190915015610ea8578080602001905181019061273991906132f6565b610ea85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610817565b606060006127a78360026130b7565b6127b2906002613138565b67ffffffffffffffff8111156127ca576127ca612bc2565b6040519080825280601f01601f1916602001820160405280156127f4576020820181803683370190505b509050600360fc1b8160008151811061280f5761280f612fae565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061283e5761283e612fae565b60200101906001600160f81b031916908160001a90535060006128628460026130b7565b61286d906001613138565b90505b60018111156128e5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106128a1576128a1612fae565b1a60f81b8282815181106128b7576128b7612fae565b60200101906001600160f81b031916908160001a90535060049490941c936128de81613313565b9050612870565b5083156129345760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610817565b9392505050565b606061294a8484600085612952565b949350505050565b6060824710156129b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610817565b6001600160a01b0385163b612a0a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610817565b600080866001600160a01b03168587604051612a26919061332a565b60006040518083038185875af1925050503d8060008114612a63576040519150601f19603f3d011682016040523d82523d6000602084013e612a68565b606091505b5091509150612a78828286612a83565b979650505050505050565b60608315612a92575081612934565b825115612aa25782518084602001fd5b8160405162461bcd60e51b81526004016108179190612b92565b6001600160a01b038116811461100857600080fd5b801515811461100857600080fd5b60008060408385031215612af257600080fd5b8235612afd81612abc565b91506020830135612b0d81612ad1565b809150509250929050565b600060208284031215612b2a57600080fd5b81356001600160e01b03198116811461293457600080fd5b60005b83811015612b5d578181015183820152602001612b45565b50506000910152565b60008151808452612b7e816020860160208601612b42565b601f01601f19169290920160200192915050565b6020815260006129346020830184612b66565b600060208284031215612bb757600080fd5b813561293481612abc565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c0157612c01612bc2565b604052919050565b600067ffffffffffffffff821115612c2357612c23612bc2565b5060051b60200190565b600082601f830112612c3e57600080fd5b81356020612c53612c4e83612c09565b612bd8565b82815260059290921b84018101918181019086841115612c7257600080fd5b8286015b84811015612c8d5780358352918301918301612c76565b509695505050505050565b60008060408385031215612cab57600080fd5b823567ffffffffffffffff80821115612cc357600080fd5b818501915085601f830112612cd757600080fd5b81356020612ce7612c4e83612c09565b82815260059290921b84018101918181019089841115612d0657600080fd5b948201945b83861015612d2d578535612d1e81612abc565b82529482019490820190612d0b565b96505086013592505080821115612d4357600080fd5b50612d5085828601612c2d565b9150509250929050565b600060208284031215612d6c57600080fd5b5035919050565b60008060408385031215612d8657600080fd5b8235612d9181612abc565b946020939093013593505050565b60008060408385031215612db257600080fd5b823591506020830135612b0d81612abc565b600060208284031215612dd657600080fd5b813561293481612ad1565b85815260a060208201526000612dfa60a0830187612b66565b941515604083015250911515606083015260809091015292915050565b60008060208385031215612e2a57600080fd5b823567ffffffffffffffff80821115612e4257600080fd5b818501915085601f830112612e5657600080fd5b813581811115612e6557600080fd5b8660208260051b8501011115612e7a57600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b82811015612ece57815180518552860151868501529284019290850190600101612ea9565b5091979650505050505050565b60008060408385031215612eee57600080fd5b8235915060208084013567ffffffffffffffff80821115612f0e57600080fd5b818601915086601f830112612f2257600080fd5b813581811115612f3457612f34612bc2565b612f46601f8201601f19168501612bd8565b91508082528784828501011115612f5c57600080fd5b80848401858401376000848284010152508093505050509250929050565b600181811c90821680612f8e57607f821691505b6020821081036114f657634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b828152600060206040818401526000845461301581612f7a565b806040870152606060018084166000811461303757600181146130515761307f565b60ff1985168984015283151560051b89018301955061307f565b896000528660002060005b858110156130775781548b820186015290830190880161305c565b8a0184019650505b50939998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108b2576108b261308e565b80820281158282048414176108b2576108b261308e565b6000826130eb57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561310257600080fd5b5051919050565b82815260406020820152600061294a6040830184612b66565b634e487b7160e01b600052603160045260246000fd5b808201808211156108b2576108b261308e565b601f821115610ea857600081815260208120601f850160051c810160208610156131725750805b601f850160051c820191505b818110156131915782815560010161317e565b505050505050565b815167ffffffffffffffff8111156131b3576131b3612bc2565b6131c7816131c18454612f7a565b8461314b565b602080601f8311600181146131fc57600084156131e45750858301515b600019600386901b1c1916600185901b178555613191565b600085815260208120601f198616915b8281101561322b5788860151825594840194600190910190840161320c565b50858210156132495787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8381528260208201526060604082015260006132786060830184612b66565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516132b9816017850160208801612b42565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516132ea816028840160208801612b42565b01602801949350505050565b60006020828403121561330857600080fd5b815161293481612ad1565b6000816133225761332261308e565b506000190190565b6000825161333c818460208701612b42565b919091019291505056fea2646970667358221220cca7169ebd959ee432e8adeecaa480be7e28abdeab79bb6df3aedb267eb459d364736f6c63430008140033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 554,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1553,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "cycle",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1555,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "isERC20",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1557,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "isONETIME",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1559,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "locked",
        "offset": 2,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1561,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "requireApprovalForWithdrawals",
        "offset": 3,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1563,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1565,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "description",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1567,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1569,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "primaryAdmin",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1926,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "withdrawRequests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_struct(WithdrawRequest)1920_storage)dyn_storage)"
      },
      {
        "astId": 1930,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "requiresApproval",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1949,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "streamingBuilders",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(BuilderStreamInfo)1867_storage)"
      },
      {
        "astId": 1953,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "builderIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1956,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "activeBuilders",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1960,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "isAdmin",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(WithdrawRequest)1920_storage)dyn_storage": {
        "base": "t_struct(WithdrawRequest)1920_storage",
        "encoding": "dynamic_array",
        "label": "struct Cohort.WithdrawRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(WithdrawRequest)1920_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Cohort.WithdrawRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(WithdrawRequest)1920_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(BuilderStreamInfo)1867_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Cohort.BuilderStreamInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BuilderStreamInfo)1867_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BuilderStreamInfo)1867_storage": {
        "encoding": "inplace",
        "label": "struct Cohort.BuilderStreamInfo",
        "members": [
          {
            "astId": 1864,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "cap",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1866,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "last",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WithdrawRequest)1920_storage": {
        "encoding": "inplace",
        "label": "struct Cohort.WithdrawRequest",
        "members": [
          {
            "astId": 1911,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1913,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "reason",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1915,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "approved",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1917,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "completed",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1919,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "requestTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}